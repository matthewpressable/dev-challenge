!function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:i})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=26)}([function(t,e){t.exports=jQuery},function(t,e,n){"use strict";t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";(function(t){var e,n,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e=window,n=function(t,e){if(e.getElementsByClassName){var n,i,r=e.documentElement,a=t.Date,o=t.HTMLPictureElement,s=t.addEventListener,l=t.setTimeout,c=t.requestAnimationFrame||l,u=t.requestIdleCallback,d=/^picture$/i,f=["load","error","lazyincluded","_lazyloaded"],v={},g=Array.prototype.forEach,p=function(t,e){return v[e]||(v[e]=new RegExp("(\\s|^)"+e+"(\\s|$)")),v[e].test(t.getAttribute("class")||"")&&v[e]},m=function(t,e){p(t,e)||t.setAttribute("class",(t.getAttribute("class")||"").trim()+" "+e)},y=function(t,e){var n;(n=p(t,e))&&t.setAttribute("class",(t.getAttribute("class")||"").replace(n," "))},h=function t(e,n,i){var r=i?"addEventListener":"removeEventListener";i&&t(e,n),f.forEach(function(t){e[r](t,n)})},b=function(t,i,r,a,o){var s=e.createEvent("CustomEvent");return r||(r={}),r.instance=n,s.initCustomEvent(i,!a,!o,r),t.dispatchEvent(s),s},z=function(e,n){var r;!o&&(r=t.picturefill||i.pf)?r({reevaluate:!0,elements:[e]}):n&&n.src&&(e.src=n.src)},A=function(t,e){return(getComputedStyle(t,null)||{})[e]},C=function(t,e,n){for(n=n||t.offsetWidth;n<i.minSize&&e&&!t._lazysizesWidth;)n=e.offsetWidth,e=e.parentNode;return n},w=function(){var t,n,i=[],r=[],a=i,o=function(){var e=a;for(a=i.length?r:i,t=!0,n=!1;e.length;)e.shift()();t=!1},s=function(i,r){t&&!r?i.apply(this,arguments):(a.push(i),n||(n=!0,(e.hidden?l:c)(o)))};return s._lsFlush=o,s}(),E=function(t,e){return e?function(){w(t)}:function(){var e=this,n=arguments;w(function(){t.apply(e,n)})}},S=function(t){var e,n=0,r=i.throttleDelay,o=i.ricTimeout,s=function(){e=!1,n=a.now(),t()},c=u&&o>49?function(){u(s,{timeout:o}),o!==i.ricTimeout&&(o=i.ricTimeout)}:E(function(){l(s)},!0);return function(t){var i;(t=!0===t)&&(o=33),e||(e=!0,(i=r-(a.now()-n))<0&&(i=0),t||i<9?c():l(c,i))}},_=function(t){var e,n,i=function(){e=null,t()},r=function t(){var e=a.now()-n;e<99?l(t,99-e):(u||i)(i)};return function(){n=a.now(),e||(e=l(r,99))}};!function(){var e,n={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(e in i=t.lazySizesConfig||t.lazysizesConfig||{},n)e in i||(i[e]=n[e]);t.lazySizesConfig=i,l(function(){i.init&&k()})}();var L=function(){var o,c,u,f,v,C,L,k,j,T,P,M,N,W,O=/^img$/i,F=/^iframe$/i,I="onscroll"in t&&!/glebot/.test(navigator.userAgent),q=0,B=0,D=-1,R=function t(e){B--,e&&e.target&&h(e.target,t),(!e||B<0||!e.target)&&(B=0)},H=function(t,n){var i,a=t,o="hidden"==A(e.body,"visibility")||"hidden"!=A(t,"visibility");for(k-=n,P+=n,j-=n,T+=n;o&&(a=a.offsetParent)&&a!=e.body&&a!=r;)(o=(A(a,"opacity")||1)>0)&&"visible"!=A(a,"overflow")&&(i=a.getBoundingClientRect(),o=T>i.left&&j<i.right&&P>i.top-1&&k<i.bottom+1);return o},$=function(){var t,a,s,l,u,d,v,g,p,m=n.elements;if((f=i.loadMode)&&B<8&&(t=m.length)){a=0,D++,null==N&&("expand"in i||(i.expand=r.clientHeight>500&&r.clientWidth>500?500:370),M=i.expand,N=M*i.expFactor),q<N&&B<1&&D>2&&f>2&&!e.hidden?(q=N,D=0):q=f>1&&D>1&&B<6?M:0;for(;a<t;a++)if(m[a]&&!m[a]._lazyRace)if(I)if((g=m[a].getAttribute("data-expand"))&&(d=1*g)||(d=q),p!==d&&(C=innerWidth+d*W,L=innerHeight+d,v=-1*d,p=d),s=m[a].getBoundingClientRect(),(P=s.bottom)>=v&&(k=s.top)<=L&&(T=s.right)>=v*W&&(j=s.left)<=C&&(P||T||j||k)&&(i.loadHidden||"hidden"!=A(m[a],"visibility"))&&(c&&B<3&&!g&&(f<3||D<4)||H(m[a],d))){if(G(m[a]),u=!0,B>9)break}else!u&&c&&!l&&B<4&&D<4&&f>2&&(o[0]||i.preloadAfterLoad)&&(o[0]||!g&&(P||T||j||k||"auto"!=m[a].getAttribute(i.sizesAttr)))&&(l=o[0]||m[a]);else G(m[a]);l&&!u&&G(l)}},U=S($),X=function(t){m(t.target,i.loadedClass),y(t.target,i.loadingClass),h(t.target,V),b(t.target,"lazyloaded")},J=E(X),V=function(t){J({target:t.target})},Y=function(t){var e,n=t.getAttribute(i.srcsetAttr);(e=i.customMedia[t.getAttribute("data-media")||t.getAttribute("media")])&&t.setAttribute("media",e),n&&t.setAttribute("srcset",n)},Q=E(function(t,e,n,r,a){var o,s,c,f,v,p;(v=b(t,"lazybeforeunveil",e)).defaultPrevented||(r&&(n?m(t,i.autosizesClass):t.setAttribute("sizes",r)),s=t.getAttribute(i.srcsetAttr),o=t.getAttribute(i.srcAttr),a&&(f=(c=t.parentNode)&&d.test(c.nodeName||"")),p=e.firesLoad||"src"in t&&(s||o||f),v={target:t},p&&(h(t,R,!0),clearTimeout(u),u=l(R,2500),m(t,i.loadingClass),h(t,V,!0)),f&&g.call(c.getElementsByTagName("source"),Y),s?t.setAttribute("srcset",s):o&&!f&&(F.test(t.nodeName)?function(t,e){try{t.contentWindow.location.replace(e)}catch(n){t.src=e}}(t,o):t.src=o),a&&(s||f)&&z(t,{src:o})),t._lazyRace&&delete t._lazyRace,y(t,i.lazyClass),w(function(){(!p||t.complete&&t.naturalWidth>1)&&(p?R(v):B--,X(v))},!0)}),G=function(t){var e,n=O.test(t.nodeName),r=n&&(t.getAttribute(i.sizesAttr)||t.getAttribute("sizes")),a="auto"==r;(!a&&c||!n||!t.getAttribute("src")&&!t.srcset||t.complete||p(t,i.errorClass)||!p(t,i.lazyClass))&&(e=b(t,"lazyunveilread").detail,a&&x.updateElem(t,!0,t.offsetWidth),t._lazyRace=!0,B++,Q(t,e,a,r,n))},K=function t(){if(!c){if(a.now()-v<999)return void l(t,999);var e=_(function(){i.loadMode=3,U()});c=!0,i.loadMode=3,U(),s("scroll",function(){3==i.loadMode&&(i.loadMode=2),e()},!0)}};return{_:function(){v=a.now(),n.elements=e.getElementsByClassName(i.lazyClass),o=e.getElementsByClassName(i.lazyClass+" "+i.preloadClass),W=i.hFac,s("scroll",U,!0),s("resize",U,!0),t.MutationObserver?new MutationObserver(U).observe(r,{childList:!0,subtree:!0,attributes:!0}):(r.addEventListener("DOMNodeInserted",U,!0),r.addEventListener("DOMAttrModified",U,!0),setInterval(U,999)),s("hashchange",U,!0),["focus","mouseover","click","load","transitionend","animationend","webkitAnimationEnd"].forEach(function(t){e.addEventListener(t,U,!0)}),/d$|^c/.test(e.readyState)?K():(s("load",K),e.addEventListener("DOMContentLoaded",U),l(K,2e4)),n.elements.length?($(),w._lsFlush()):U()},checkElems:U,unveil:G}}(),x=function(){var t,n=E(function(t,e,n,i){var r,a,o;if(t._lazysizesWidth=i,i+="px",t.setAttribute("sizes",i),d.test(e.nodeName||""))for(a=0,o=(r=e.getElementsByTagName("source")).length;a<o;a++)r[a].setAttribute("sizes",i);n.detail.dataAttr||z(t,n.detail)}),r=function(t,e,i){var r,a=t.parentNode;a&&(i=C(t,a,i),(r=b(t,"lazybeforesizes",{width:i,dataAttr:!!e})).defaultPrevented||(i=r.detail.width)&&i!==t._lazysizesWidth&&n(t,a,r,i))},a=_(function(){var e,n=t.length;if(n)for(e=0;e<n;e++)r(t[e])});return{_:function(){t=e.getElementsByClassName(i.autosizesClass),s("resize",a)},checkElems:a,updateElem:r}}(),k=function t(){t.i||(t.i=!0,x._(),L._())};return n={cfg:i,autoSizer:x,loader:L,init:k,uP:z,aC:m,rC:y,hC:p,fire:b,gW:C,rAF:w}}}(e,e.document),e.lazySizes=n,"object"==i(t)&&t.exports&&(t.exports=n)}).call(this,n(1)(t))},function(t,e,n){"use strict";(function(t){function n(e){var n=e.offset().top;t("html, body").animate({scrollTop:n},500)}Object.defineProperty(e,"__esModule",{value:!0}),e.debounce=function(t,e,n){var i=void 0;return function(){var r=this,a=arguments,o=n&&!i;clearTimeout(i),i=setTimeout(function(){i=null,n||t.apply(r,a)},e),o&&t.apply(r,a)}},e.triggerUpdateText=function(t){var e=t.data("open"),n=t.data("close");t.parent().hasClass("is-active")?t.text(n):t.text(e)},e.scrollToElement=n,e.scrollToTarget=function(e){e.preventDefault();var i=t(this).attr("href");i.includes("#")&&n(t(""+i))},e.extend=function t(){var e={},n=!1,i=0,r=arguments.length;for("[object Boolean]"===Object.prototype.toString.call(arguments[0])&&(n=arguments[0],i++);i<r;i++)!function(i){for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(n&&"[object Object]"===Object.prototype.toString.call(i[r])?e[r]=t(!0,e[r],i[r]):e[r]=i[r])}(arguments[i]);return e},e.mobileWidth=960}).call(this,n(0))},function(t,e,n){"use strict";
/*!
 * verge 1.10.2+201705300050
 * http://npm.im/verge
 * MIT Ryan Van Etten
 */var i;i=function(){function t(){return{width:l(),height:c()}}function e(t,e){return!(!(t=t&&!t.nodeType?t[0]:t)||1!==t.nodeType)&&function(t,e){var n={};return e=+e||0,n.width=(n.right=t.right+e)-(n.left=t.left-e),n.height=(n.bottom=t.bottom+e)-(n.top=t.top-e),n}(t.getBoundingClientRect(),e)}var n={},i="undefined"!=typeof window&&window,r="undefined"!=typeof document&&document,a=r&&r.documentElement,o=i.matchMedia||i.msMatchMedia,s=o?function(t){return!!o.call(i,t).matches}:function(){return!1},l=n.viewportW=function(){var t=a.clientWidth,e=i.innerWidth;return t<e?e:t},c=n.viewportH=function(){var t=a.clientHeight,e=i.innerHeight;return t<e?e:t};return n.mq=s,n.matchMedia=o?function(){return o.apply(i,arguments)}:function(){return{}},n.viewport=t,n.scrollX=function(){return i.pageXOffset||a.scrollLeft},n.scrollY=function(){return i.pageYOffset||a.scrollTop},n.rectangle=e,n.aspect=function(n){var i=(n=null==n?t():1===n.nodeType?e(n):n).height,r=n.width;return i="function"==typeof i?i.call(n):i,(r="function"==typeof r?r.call(n):r)/i},n.inX=function(t,n){var i=e(t,n);return!!i&&i.right>=0&&i.left<=l()},n.inY=function(t,n){var i=e(t,n);return!!i&&i.bottom>=0&&i.top<=c()},n.inViewport=function(t,n){var i=e(t,n);return!!i&&i.bottom>=0&&i.right>=0&&i.top<=c()&&i.left<=l()},n},void 0!==t&&t.exports?t.exports=i():(void 0).verge=i()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DetectEdge=void 0;var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();n(3),e.DetectEdge=function(){function t(e,n){(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),this.buffer=n||0,this.elements=this.getElements(e),this.main()}return i(t,[{key:"main",value:function(){var t=this;this.elements.length>0&&(this.checkElements(),window.addEventListener("resize",function(e){t.checkElements()}))}},{key:"checkElements",value:function(){var t=this;this.removeEdgeClasses();var e=this.getWindowWidth();this.elements.forEach(function(n){var i=n.getBoundingClientRect();i.left+i.width+t.buffer>e&&n.classList.add("right-edge"),i.left<=t.buffer&&n.classList.add("left-edge")})}},{key:"removeEdgeClasses",value:function(){this.elements.forEach(function(t){t.classList.remove("right-edge"),t.classList.remove("left-edge")})}},{key:"getWindowWidth",value:function(){return window.innerWidth}},{key:"getElements",value:function(t){return Array.from(document.querySelectorAll(t))}}]),t}()},,,,function(t,e,n){"use strict";(function(t){var e,i,r,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e=window,i=function(t,e,n){var i,r=e.createElement("img");!("srcset"in r)||"sizes"in r||t.HTMLPictureElement||(i=/^picture$/i,e.addEventListener("lazybeforeunveil",function(t){var r,a,o,s,l,c,u;t.detail.instance==n&&(!t.defaultPrevented&&!lazySizesConfig.noIOSFix&&(r=t.target)&&(o=r.getAttribute(lazySizesConfig.srcsetAttr))&&(a=r.parentNode)&&((l=i.test(a.nodeName||""))||(s=r.getAttribute("sizes")||r.getAttribute(lazySizesConfig.sizesAttr)))&&(c=l?a:e.createElement("picture"),r._lazyImgSrc||Object.defineProperty(r,"_lazyImgSrc",{value:e.createElement("source"),writable:!0}),u=r._lazyImgSrc,s&&u.setAttribute("sizes",s),u.setAttribute(lazySizesConfig.srcsetAttr,o),r.setAttribute("data-pfsrcset",o),r.removeAttribute(lazySizesConfig.srcsetAttr),l||(a.insertBefore(c,r),c.appendChild(r)),c.insertBefore(u,r)))}))},r=function t(){i(e.lazySizes),e.removeEventListener("lazyunveilread",t,!0)},i=i.bind(null,e,e.document),"object"==a(t)&&t.exports?i(n(2)):e.lazySizes?r():e.addEventListener("lazyunveilread",r,!0)}).call(this,n(1)(t))},function(t,e,n){"use strict";(function(t){var e,i,r,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e=window,i=function(t,e,n){var i,r=n&&n.cfg||t.lazySizesConfig,a=e.createElement("img"),o="sizes"in a&&"srcset"in a,s=/\s+\d+h/g,l=function(){var t=/\s+(\d+)(w|h)\s+(\d+)(w|h)/,n=Array.prototype.forEach;return function(i){var r=e.createElement("img"),a=function(e){var n,i,r=e.getAttribute(lazySizesConfig.srcsetAttr);r&&((i=r.match(t))&&(n="w"==i[2]?i[1]/i[3]:i[3]/i[1])&&e.setAttribute("data-aspectratio",n),e.setAttribute(lazySizesConfig.srcsetAttr,r.replace(s,"")))},o=function(t){var e=t.target.parentNode;e&&"PICTURE"==e.nodeName&&n.call(e.getElementsByTagName("source"),a),a(t.target)},l=function(){r.currentSrc&&e.removeEventListener("lazybeforeunveil",o)};i[1]&&(e.addEventListener("lazybeforeunveil",o),r.onload=l,r.onerror=l,r.srcset="data:,a 1w 1h",r.complete&&l())}}();if(r||(r={},t.lazySizesConfig=r),r.supportsType||(r.supportsType=function(t){return!t}),!t.picturefill&&!r.pf){if(t.HTMLPictureElement&&o)return e.msElementsFromPoint&&l(navigator.userAgent.match(/Edge\/(\d+)/)),void(r.pf=function(){});r.pf=function(e){var n,r;if(!t.picturefill)for(n=0,r=e.elements.length;n<r;n++)i(e.elements[n])},i=function(){var a=function(t,e){return t.w-e.w},l=/^\s*\d+\.*\d*px\s*$/,c=function(){var t,e=/(([^,\s].[^\s]+)\s+(\d+)w)/g,n=/\s/,i=function(e,n,i,r){t.push({c:n,u:i,w:1*r})};return function(r){return t=[],(r=r.trim()).replace(s,"").replace(e,i),t.length||!r||n.test(r)||t.push({c:r,u:r,w:99}),t}}(),u=function t(){t.init||(t.init=!0,addEventListener("resize",function(){var t,n=e.getElementsByClassName("lazymatchmedia"),r=function(){var t,e;for(t=0,e=n.length;t<e;t++)i(n[t])};return function(){clearTimeout(t),t=setTimeout(r,66)}}()))},d=function(e,i){var a,o=e.getAttribute("srcset")||e.getAttribute(r.srcsetAttr);!o&&i&&(o=e._lazypolyfill?e._lazypolyfill._set:e.getAttribute(r.srcAttr)||e.getAttribute("src")),e._lazypolyfill&&e._lazypolyfill._set==o||(a=c(o||""),i&&e.parentNode&&(a.isPicture="PICTURE"==e.parentNode.nodeName.toUpperCase(),a.isPicture&&t.matchMedia&&(n.aC(e,"lazymatchmedia"),u())),a._set=o,Object.defineProperty(e,"_lazypolyfill",{value:a,writable:!0}))},f=function(e){var i=t.devicePixelRatio||1,r=n.getX&&n.getX(e);return Math.min(r||i,2.5,i)},v=function(e){return t.matchMedia?(v=function(t){return!t||(matchMedia(t)||{}).matches})(e):!e},g=function(t){var e,i,o,s,c,u,g;if(d(s=t,!0),(c=s._lazypolyfill).isPicture)for(i=0,o=(e=t.parentNode.getElementsByTagName("source")).length;i<o;i++)if(r.supportsType(e[i].getAttribute("type"),t)&&v(e[i].getAttribute("media"))){s=e[i],d(s),c=s._lazypolyfill;break}return c.length>1?(g=s.getAttribute("sizes")||"",g=l.test(g)&&parseInt(g,10)||n.gW(t,t.parentNode),c.d=f(t),!c.src||!c.w||c.w<g?(c.w=g,u=function(t){for(var e,n,i=t.length,r=t[i-1],a=0;a<i;a++)if((r=t[a]).d=r.w/t.w,r.d>=t.d){!r.cached&&(e=t[a-1])&&e.d>t.d-.13*Math.pow(t.d,2.2)&&(n=Math.pow(e.d-.6,1.6),e.cached&&(e.d+=.15*n),e.d+(r.d-t.d)*n>t.d&&(r=e));break}return r}(c.sort(a)),c.src=u):u=c.src):u=c[0],u},p=function(t){if(!o||!t.parentNode||"PICTURE"==t.parentNode.nodeName.toUpperCase()){var e=g(t);e&&e.u&&t._lazypolyfill.cur!=e.u&&(t._lazypolyfill.cur=e.u,e.cached=!0,t.setAttribute(r.srcAttr,e.u),t.setAttribute("src",e.u))}};return p.parse=c,p}(),r.loadedClass&&r.loadingClass&&function(){var t=[];['img[sizes$="px"][srcset].',"picture > img:not([srcset])."].forEach(function(e){t.push(e+r.loadedClass),t.push(e+r.loadingClass)}),r.pf({elements:e.querySelectorAll(t.join(", "))})}()}},r=function t(){i(e.lazySizes),e.removeEventListener("lazyunveilread",t,!0)},i=i.bind(null,e,e.document),"object"==a(t)&&t.exports?i(n(2),n(9)):e.lazySizes?r():e.addEventListener("lazyunveilread",r,!0)}).call(this,n(1)(t))},function(t,e,n){"use strict";(function(t){var e,i,r,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e=window,i=function(t,e,n){function i(t,n){if(!o[t]){var i=e.createElement(n?"link":"script"),r=e.getElementsByTagName("script")[0];n?(i.rel="stylesheet",i.href=t):i.src=t,o[t]=!0,o[i.src||i.href]=!0,r.parentNode.insertBefore(i,r)}}var r,a,o={};e.addEventListener&&(a=/\(|\)|\s|'/,r=function(t,n){var i=e.createElement("img");i.onload=function(){i.onload=null,i.onerror=null,i=null,n()},i.onerror=i.onload,i.src=t,i&&i.complete&&i.onload&&i.onload()},addEventListener("lazybeforeunveil",function(t){var e,o,s;t.detail.instance==n&&(t.defaultPrevented||("none"==t.target.preload&&(t.target.preload="auto"),(e=t.target.getAttribute("data-link"))&&i(e,!0),(e=t.target.getAttribute("data-script"))&&i(e),(e=t.target.getAttribute("data-require"))&&(n.cfg.requireJs?n.cfg.requireJs([e]):i(e)),(o=t.target.getAttribute("data-bg"))&&(t.detail.firesLoad=!0,r(o,function(){t.target.style.backgroundImage="url("+(a.test(o)?JSON.stringify(o):o)+")",t.detail.firesLoad=!1,n.fire(t.target,"_lazyloaded",{},!0,!0)})),(s=t.target.getAttribute("data-poster"))&&(t.detail.firesLoad=!0,r(s,function(){t.target.poster=s,t.detail.firesLoad=!1,n.fire(t.target,"_lazyloaded",{},!0,!0)}))))},!1))},r=function t(){i(e.lazySizes),e.removeEventListener("lazyunveilread",t,!0)},i=i.bind(null,e,e.document),"object"==a(t)&&t.exports?i(n(2)):e.lazySizes?r():e.addEventListener("lazyunveilread",r,!0)}).call(this,n(1)(t))},function(t,e,n){"use strict";(function(t){var e,i,r,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e=window,i=function(t,e,n){if(t.addEventListener){var i=/\s+/g,r=/\s*\|\s+|\s+\|\s*/g,a=/^(.+?)(?:\s+\[\s*(.+?)\s*\])?$/,o=/\(|\)|'/,s={contain:1,cover:1},l=function(t,n,o){var s=e.createElement("picture"),l=n.getAttribute(lazySizesConfig.sizesAttr),c=n.getAttribute("data-ratio"),u=n.getAttribute("data-optimumx");n._lazybgset&&n._lazybgset.parentNode==n&&n.removeChild(n._lazybgset),Object.defineProperty(o,"_lazybgset",{value:n,writable:!0}),Object.defineProperty(n,"_lazybgset",{value:s,writable:!0}),t=t.replace(i," ").split(r),s.style.display="none",o.className=lazySizesConfig.lazyClass,1!=t.length||l||(l="auto"),t.forEach(function(t){var n,i=e.createElement("source");l&&"auto"!=l&&i.setAttribute("sizes",l),(n=t.match(a))&&(i.setAttribute(lazySizesConfig.srcsetAttr,n[1]),n[2]&&i.setAttribute("media",lazySizesConfig.customMedia[n[2]]||n[2])),s.appendChild(i)}),l&&(o.setAttribute(lazySizesConfig.sizesAttr,l),n.removeAttribute(lazySizesConfig.sizesAttr),n.removeAttribute("sizes")),u&&o.setAttribute("data-optimumx",u),c&&o.setAttribute("data-ratio",c),s.appendChild(o),n.appendChild(s)},c=function(t){if(t.target._lazybgset){var e=t.target,i=e._lazybgset,r=e.currentSrc||e.src;r&&(i.style.backgroundImage="url("+(o.test(r)?JSON.stringify(r):r)+")"),e._lazybgsetLoading&&(n.fire(i,"_lazyloaded",{},!1,!0),delete e._lazybgsetLoading)}};addEventListener("lazybeforeunveil",function(t){var i,r,a;!t.defaultPrevented&&(i=t.target.getAttribute("data-bgset"))&&(a=t.target,(r=e.createElement("img")).alt="",r._lazybgsetLoading=!0,t.detail.firesLoad=!0,l(i,a,r),setTimeout(function(){n.loader.unveil(r),n.rAF(function(){n.fire(r,"_lazyloaded",{},!0,!0),r.complete&&c({target:r})})}))}),e.addEventListener("load",c,!0),t.addEventListener("lazybeforesizes",function(t){if(t.detail.instance==n&&t.target._lazybgset&&t.detail.dataAttr){var e=function(t){var e;return e=(getComputedStyle(t)||{getPropertyValue:function(){}}).getPropertyValue("background-size"),!s[e]&&s[t.style.backgroundSize]&&(e=t.style.backgroundSize),e}(t.target._lazybgset);s[e]&&(t.target._lazysizesParentFit=e,n.rAF(function(){t.target.setAttribute("data-parent-fit",e),t.target._lazysizesParentFit&&delete t.target._lazysizesParentFit}))}},!0),e.documentElement.addEventListener("lazybeforesizes",function(t){!t.defaultPrevented&&t.target._lazybgset&&t.detail.instance==n&&(t.detail.width=function(t){var e=n.gW(t,t.parentNode);return(!t._lazysizesWidth||e>t._lazysizesWidth)&&(t._lazysizesWidth=e),t._lazysizesWidth}(t.target._lazybgset))})}},r=function t(){i(e.lazySizes),e.removeEventListener("lazyunveilread",t,!0)},i=i.bind(null,e,e.document),"object"==a(t)&&t.exports?i(n(2)):e.lazySizes?r():e.addEventListener("lazyunveilread",r,!0)}).call(this,n(1)(t))},function(t,e,n){"use strict";(function(t,e){var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t,r){var a=function e(){r(t.lazySizes),t.removeEventListener("lazyunveilread",e,!0)};r=r.bind(null,t,t.document),"object"==i(e)&&e.exports?r(n(2)):t.lazySizes?a():t.addEventListener("lazyunveilread",a,!0)}(window,function(e,n,i){if(e.addEventListener){var r=/\s+(\d+)(w|h)\s+(\d+)(w|h)/,a=/parent-fit["']*\s*:\s*["']*(contain|cover|width)/,o=/parent-container["']*\s*:\s*["']*(.+?)(?=(\s|$|,|'|"|;))/,s=/^picture$/i,l={getParent:function(n,i){var r=n,a=n.parentNode;return i&&"prev"!=i||!a||!s.test(a.nodeName||"")||(a=a.parentNode),"self"!=i&&(r="prev"==i?n.previousElementSibling:i&&(a.closest||e.jQuery)&&(a.closest?a.closest(i):t(a).closest(i)[0])||a),r},getFit:function(t){var e,n,i=function(t){return getComputedStyle(t,null)||{}}(t),r=i.content||i.fontFamily,s={fit:t._lazysizesParentFit||t.getAttribute("data-parent-fit")};return!s.fit&&r&&(e=r.match(a))&&(s.fit=e[1]),s.fit?(!(n=t._lazysizesParentContainer||t.getAttribute("data-parent-container"))&&r&&(e=r.match(o))&&(n=e[1]),s.parent=l.getParent(t,n)):s.fit=i.objectFit,s},getImageRatio:function(t){var n,i,a,o,l,c=t.parentNode,u=c&&s.test(c.nodeName||"")?c.querySelectorAll("source, img"):[t];for(n=0;n<u.length;n++)if(i=(t=u[n]).getAttribute(lazySizesConfig.srcsetAttr)||t.getAttribute("srcset")||t.getAttribute("data-pfsrcset")||t.getAttribute("data-risrcset")||"",a=t._lsMedia||t.getAttribute("media"),a=lazySizesConfig.customMedia[t.getAttribute("data-media")||a]||a,i&&(!a||(e.matchMedia&&matchMedia(a)||{}).matches)){!(o=parseFloat(t.getAttribute("data-aspectratio")))&&(l=i.match(r))&&(o="w"==l[2]?l[1]/l[3]:l[3]/l[1]);break}return o},calculateSize:function(t,e){var n,i,r,a,o=this.getFit(t),s=o.fit,l=o.parent;return"width"==s||("contain"==s||"cover"==s)&&(r=this.getImageRatio(t))?(l?e=l.clientWidth:l=t,a=e,"width"==s?a=e:(i=l.clientHeight)>40&&(n=e/i)&&("cover"==s&&n<r||"contain"==s&&n>r)&&(a=e*(r/n)),a):e}};i.parentFit=l,n.addEventListener("lazybeforesizes",function(t){if(!t.defaultPrevented&&t.detail.instance==i){var e=t.target;t.detail.width=l.calculateSize(e,t.detail.width)}})}})}).call(this,n(0),n(1)(t))},function(t,e,n){"use strict";(function(t){function i(e){e&&e.preventDefault();var n=t(this).attr("href"),i=t(n),a=t('*[href="'+n+'"]'),l=e.data.allTriggers,c=e.data.allContent,u=e.data.closeOnClick,d=a.hasClass("is-active");d&&u||d&&o.default.viewportW()<s.mobileWidth?r(l,c):(r(l,c),a.addClass("is-active").ariaExpanded(),function(t){t.addClass("is-active").focus()}(i),e.data.deepLinking&&(history.pushState?history.pushState(null,null,n):window.location.hash=n))}function r(t,e){t.removeClass("is-active").ariaNotExpanded(),e.removeClass("is-active")}Object.defineProperty(e,"__esModule",{value:!0}),e.TabAccordion=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function(t){return t&&t.__esModule?t:{default:t}}(n(4)),s=n(3),l=function(){function e(t,n,i,r,a,o,s){(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,e),this._selectors={containerClass:t,triggerClass:n,contentClass:i},this._autoOpenOnDesktop=a||!1,this._closeOnClick=r||!1,this._openFirstTabOnDesktop=o||!1,this._deepLinking=s||!1,this._init()}return a(e,[{key:"_init",value:function(){var e=t(this._selectors.containerClass);if(!(e.length<1)){var n=e.find(this._selectors.triggerClass),r=e.find(this._selectors.contentClass),a=window.location.hash;n.on("click",{allTriggers:n,allContent:r,closeOnClick:this._closeOnClick,deepLinking:this._deepLinking},i),this._autoOpenOnDesktop&&function(t){window.addEventListener("resize",(0,s.debounce)(function(){o.default.viewportW()>=s.mobileWidth&&!t.hasClass("is-active")&&t.eq(0).trigger("click")},500))}(n),this._openFirstTabOnDesktop&&s.mobileWidth<o.default.viewportW()&&!a&&setTimeout(function(){n.eq(0).trigger("click")},200),this._deepLinking&&function(e){window.addEventListener("load",function(){var n=window.location.hash,i=void 0;if(n){t.each(e,function(t){this.getAttribute("href")===n&&(i=t)});var r=e.eq(i);r.trigger("click"),t("html, body").animate({scrollTop:r.offset().top})}})}(n)}}}]),e}();e.TabAccordion=l}).call(this,n(0))},function(t,e,n){"use strict";var i=n(14);new i.TabAccordion(".js-custom-tabs",".js-tab-trigger",".js-tab-content",!1,!0,!0,!0),new i.TabAccordion(".js-product-accordion",".js-product-accordion__link",".js-product-accordion__content",!0,!1,!1,!1),new i.TabAccordion(".js-faqs-accordion",".js-faqs-accordion__link",".js-faqs-accordion__content",!0,!1,!1,!1),new i.TabAccordion(".js-product-faq",".js-product-faq__link",".js-product-faq__content",!0,!1,!1,!1)},function(t,e,n){"use strict";(function(t){t(".c-skip-nav").on("click",function(e){var n="#"+this.href.split("#")[1];t(n).attr("tabindex",-1).on("blur focusout",function(){t(this).removeAttr("tabindex")}).focus()})}).call(this,n(0))},function(t,e,n){"use strict";(function(t){function e(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];A.attr({"aria-hidden":t,"aria-expanded":e,"aria-haspopup":n})}function i(){e(!1,!1,!0),m.ariaHiddenTrue()}function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:h,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:b;t.attr("aria-expanded",!1),e.attr("aria-hidden",!0)}function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:h,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t(".navigation .sub-menu");e.removeClass("is-active"),e.parent().removeClass("is-active"),n.removeClass("is-active"),r(e,n)}function o(t,e){E.not(e).removeClass("is-active"),w.not(t).removeClass("is-active"),E.not(e).attr("aria-hidden",!0),w.not(t).attr("aria-expanded",!1)}function s(){w.removeClass("is-active"),E.removeClass("is-active"),r(w,E)}function l(){L<v.mobileWidth&&(A.removeClass("is-active"),m.removeClass("is-active"),i(),u(x=0))}function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:h,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".sub-menu";e.on("click",function(e){var i=t(e.currentTarget),c=i.next(n),d=i.parent().siblings(),g=i.parent().siblings().children(".is-parent-trigger"),y=g.next(n),h=i.data("level");if(f.default.viewportW()<v.mobileWidth)if(i.hasClass("js-modal-trigger")){if(i.toggleClass("is-active"),i.attr("data-main-nav-trigger"))o(i,c),t('[data-main-nav-modal="'+i.attr("data-main-nav-trigger")+'"]').toggleClass("is-active").toggleAriaHidden()}else i.addClass("is-active"),c.addClass("is-active");else i.toggleClass("is-active"),c.toggleClass("is-active");i.hasClass("js-modal-trigger")?((!i.hasClass("is-active")||f.default.viewportW()>v.mobileWidth)&&o(i,c),a(),l()):(s(),r(g,y),d.removeClass("is-active"),g.removeClass("is-active"),y.removeClass("is-active"),i.parent().toggleClass("is-active")),h&&f.default.viewportW()<v.mobileWidth&&u(x=h),i.hasClass("is-active")?S.addClass("nav-active"):S.removeClass("nav-active"),i.hasClass("is-active")?function(t){t.attr("aria-expanded",!0),t.next(".sub-menu").attr("aria-hidden",!1)}(i):r(i),m.scrollTop(0),p.checkElements()})}function u(t){y.css("transform","translateX("+-100*t+"%)"),x>0?z.show():z.hide()}function d(){u(x=0),a(),s(),S.removeClass("nav-active"),A.removeClass("is-active"),m.removeClass("is-active")}var f=function(t){return t&&t.__esModule?t:{default:t}}(n(4)),v=n(3),g=n(5);window.navEdgeDetect=new g.DetectEdge(".sub-menu-level-1",15);var p=window.navEdgeDetect,m=t(".navigation"),y=t("#nav-main"),h=t(".is-parent-trigger"),b=t(".sub-menu"),z=t(".js-menu-back"),A=t(".js-menu-trigger"),C=t(".c-trigger__text"),w=t(".js-modal-trigger"),E=t(".js-modal"),S=t("body"),_=t(window),L=_.width(),x=0;A.on("click",function(t){t.preventDefault(),A.toggleClass("is-active"),m.toggleClass("is-active"),A.hasClass("is-active")?(e(!1,!0,!1),m.ariaHiddenFalse(),s(),S.addClass("nav-active")):(i(),d()),(0,v.triggerUpdateText)(C)}),e(!0,!1,!0),m.ariaHiddenFalse(),c(),c(w,".js-modal"),document.addEventListener("click",function(t){return t.target.closest(".js-nav")?null:d()}),z.on("click",function(){t(".sub-menu-level-"+x).removeClass("is-active"),u(--x)}),S.on("keydown",function(t){27===t.which&&S.hasClass("nav-active")&&d()}),f.default.viewportW()<v.mobileWidth&&i(),_.on("resize",(0,v.debounce)(function(){f.default.viewportW()>=v.mobileWidth&&(i(),(0,v.triggerUpdateText)(C),d())},500)),window.navCloseAll=function(){d()}}).call(this,n(0))},function(t,e,n){"use strict";(function(t){var e=[document.getElementById("footer-nav-1"),document.getElementById("footer-nav-2"),document.getElementById("footer-nav-3")];e.forEach(function(t){t.addEventListener("click",function(n){t.classList.contains("is-active")?t.classList.remove("is-active"):(e.forEach(function(t){t.classList.remove("is-active")}),t.classList.add("is-active"))})});var n=[].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(document.querySelectorAll(".js-disclosure-title")));n.forEach(function(e){e.addEventListener("click",function(i){e.classList.contains("is-active")?t(e).removeClass("is-active").ariaNotExpanded():(n.forEach(function(e){t(e).removeClass("is-active").ariaNotExpanded()}),t(e).addClass("is-active").toggleAriaExpanded())})})}).call(this,n(0))},function(t,e,n){"use strict";(function(t){var e,n,i,r;!window.navigator.userAgent.match(/Trident/g)&&CSS.supports("( box-decoration-break: clone ) or ( -webkit-box-decoration-break: clone )")||(e=document.querySelector(".js-box-deco"),n=t(e),i=n.parent(),r=t(e).html().split("<br>"),n.remove(),t.each(r,function(e,n){n=n.replace(/\n/,""),i.append(t("<span>").text(n)),e<r.length-1&&i.append("<br>")}))}).call(this,n(0))},function(t,e,n){"use strict";var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(){function t(e,n){(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),this.slideSelector=e,this.slideDelay=n||4e3,this.slides=this.collectSlides(),this.currentSlideIndex=0,this.currentSlideElement,this._slideLoop,this._isRunning,this.main()}return i(t,[{key:"main",value:function(){this.slides<=1||(this.currentSlideElement=this.activateSlide(this.currentSlideIndex),this.startLoop())}},{key:"startLoop",value:function(){var t=this;this._isRunning=!0,this._slideLoop=setInterval(function(){t.nextSlide()},this.slideDelay)}},{key:"stopLoop",value:function(){this._isRunning=!1,clearInterval(this._slideLoop)}},{key:"toggleLoop",value:function(){this._isRunning?this.stopLoop():this.startLoop()}},{key:"nextSlide",value:function(){this.deactivateSlide(this.currentSlideIndex),this.currentSlideIndex===this.slides.length-1?this.currentSlideIndex=0:this.currentSlideIndex++,this.currentSlideElement=this.activateSlide(this.currentSlideIndex)}},{key:"activateSlide",value:function(t){var e=this.slides[t];return e.classList.add("is-active-slide"),e}},{key:"deactivateSlide",value:function(t){this.slides[t].classList.remove("is-active-slide")}},{key:"collectSlides",value:function(){return Array.from(document.querySelectorAll(this.slideSelector))}}]),t}();window.heroSlider=new r(".js-homepage-slide",4e3);var a=document.querySelector(".js-hero-slider-control");if(a){var o=document.querySelector(".js-hero-slider-control__text");a.addEventListener("click",function(t){window.heroSlider.toggleLoop(),a.classList.toggle("is-playing"),o.textContent="Pause"===o.textContent?"Play":"Pause"})}},function(t,e,n){"use strict";(function(t){function e(e){var n=e.pageX-t(e.target).offset().left,i=e.pageY-t(e.target).offset().top;e.target.style.setProperty("--x",n+"px"),e.target.style.setProperty("--y",i+"px")}[].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(document.querySelectorAll(".button"))).forEach(function(t){return t.addEventListener("mousemove",e)})}).call(this,n(0))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Modals=void 0;var i=n(3),r=e.Modals=function(t){var e={modalDataAttr:"data-modal",addBodyClass:!0};return function(t){function n(){var t=[].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(document.querySelectorAll("["+a.modalDataAttr+"]")));if(t.length<=0)return!1;t.forEach(function(t){var e=t.getAttribute(a.modalDataAttr);r.modals[e]=t}),document.addEventListener("click",function(t){(function(t){r.activeModal&&(!t.target.hasAttribute("data-close-modal")&&t.target.closest("["+a.modalDataAttr+"]")||(a.addBodyClass&&o.classList.remove("modal-active"),r.closeAllModals()))})(t),function(t){var e=t.target.closest("a");if(e){var n=e.hash||e.href.baseVal;if(function(t){return new RegExp(/^#/gm).test(t)}(n)){var i=n.replace("#","");(function(t){return r.modals.hasOwnProperty(t)})(i)&&(t.preventDefault(),r.openModal(i),a.addBodyClass&&o.classList.add("modal-active"))}}}(t)}),document.addEventListener("keydown",function(t){27===t.which&&(a.addBodyClass&&o.classList.remove("modal-active"),r.closeAllModals())})}var r={},a=void 0,o=document.querySelector("body");return r.modals={},r.activeModal=null,r.openModal=function(t){r.modals[t].classList.add("is-active"),r.modals[t].setAttribute("aria-hidden","false"),r.activeModal=r.modals[t]},r.closeAllModals=function(){for(var t in r.modals)r.modals[t].classList.remove("is-active"),r.modals[t].setAttribute("aria-hidden","false");r.activeModal=null},r.init=function(t){a=(0,i.extend)(e,t||{}),n()},r.init(t),r}}(window,document);window.baseModals=new r},function(t,e,n){"use strict";(function(t){t.fn.extend({toggleAriaHidden:function(){if(this.attr("aria-hidden")){var t="true"===this.attr("aria-hidden")||!1;return this.attr("aria-hidden",!t)}},ariaHiddenTrue:function(){return this.attr("aria-hidden","true")},ariaHiddenFalse:function(){return this.attr("aria-hidden","false")},toggleAriaExpanded:function(){if(this.attr("aria-expanded")){var t="true"===this.attr("aria-expanded")||!1;return this.attr("aria-expanded",!t)}},ariaExpanded:function(){return this.attr("aria-expanded","true")},ariaNotExpanded:function(){return this.attr("aria-expanded","false")}})}).call(this,n(0))},,function(t,e,n){},function(t,e,n){"use strict";n(25),n(23),n(22),n(21),n(20),n(5),n(19),n(18),n(17),n(16),n(15),n(2),n(13),n(12),n(11),n(10)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvYmFzZS5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwialF1ZXJ5XCIiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGF6eXNpemVzL2xhenlzaXplcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGF6eXNpemVzL3BsdWdpbnMvcmVzcGltZy9scy5yZXNwaW1nLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9zb3VyY2UvanMvdXRpbGl0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sYXp5c2l6ZXMvcGx1Z2lucy9iZ3NldC9scy5iZ3NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmVyZ2UvdmVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NvdXJjZS9qcy90YWItYWNjb3JkaW9uLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9zb3VyY2UvanMvZGV0ZWN0LWVkZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xhenlzaXplcy9wbHVnaW5zL2ZpeC1pb3Mtc2l6ZXMvZml4LWlvcy1zaXplcy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc291cmNlL2pzL25hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NvdXJjZS9qcy9leHRlbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xhenlzaXplcy9wbHVnaW5zL3VudmVpbGhvb2tzL2xzLnVudmVpbGhvb2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sYXp5c2l6ZXMvcGx1Z2lucy9wYXJlbnQtZml0L2xzLnBhcmVudC1maXQuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NvdXJjZS9qcy9pbml0LWFjY29yZGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc291cmNlL2pzL3NraXAtbmF2LmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9zb3VyY2UvanMvY3VzdG9tLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9zb3VyY2UvanMvcG9seWZpbGwvYm94LWRlY29yYXRpb24tYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NvdXJjZS9qcy9oZXJvLXNsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc291cmNlL2pzL2J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc291cmNlL2pzL21vZGFsLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9zb3VyY2UvanMvaW5kZXguanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJqUXVlcnkiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoaWxkcmVuIiwid2luZG93IiwibGF6eVNpemVzIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJsYXp5c2l6ZXMiLCJsYXp5U2l6ZXNDb25maWciLCJkb2NFbGVtIiwiZG9jdW1lbnRFbGVtZW50IiwiRGF0ZSIsInN1cHBvcnRQaWN0dXJlIiwiSFRNTFBpY3R1cmVFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwicmVnUGljdHVyZSIsImxvYWRFdmVudHMiLCJyZWdDbGFzc0NhY2hlIiwiZm9yRWFjaCIsIkFycmF5IiwiaGFzQ2xhc3MiLCJlbGUiLCJjbHMiLCJSZWdFeHAiLCJ0ZXN0IiwiZ2V0QXR0cmlidXRlIiwiYWRkQ2xhc3MiLCJzZXRBdHRyaWJ1dGUiLCJ0cmltIiwicmVtb3ZlQ2xhc3MiLCJyZWciLCJyZXBsYWNlIiwiYWRkUmVtb3ZlTG9hZEV2ZW50cyIsImRvbSIsImZuIiwiYWRkIiwiYWN0aW9uIiwiZXZ0IiwidHJpZ2dlckV2ZW50IiwiZWxlbSIsImRldGFpbCIsIm5vQnViYmxlcyIsIm5vQ2FuY2VsYWJsZSIsImV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbnN0YW5jZSIsImluaXRDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJ1cGRhdGVQb2x5ZmlsbCIsImVsIiwiZnVsbCIsInBvbHlmaWxsIiwicGljdHVyZWZpbGwiLCJwZiIsInJlZXZhbHVhdGUiLCJlbGVtZW50cyIsInNyYyIsImdldENTUyIsInN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFdpZHRoIiwicGFyZW50Iiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsIm1pblNpemUiLCJfbGF6eXNpemVzV2lkdGgiLCJwYXJlbnROb2RlIiwickFGIiwicnVubmluZyIsIndhaXRpbmciLCJmaXJzdEZucyIsInNlY29uZEZucyIsImZucyIsInJ1biIsInJ1bkZucyIsImxlbmd0aCIsInNoaWZ0IiwicmFmQmF0Y2giLCJxdWV1ZSIsImFwcGx5IiwidGhpcyIsImFyZ3VtZW50cyIsInB1c2giLCJoaWRkZW4iLCJfbHNGbHVzaCIsInJBRkl0Iiwic2ltcGxlIiwidGhhdCIsImFyZ3MiLCJ0aHJvdHRsZSIsImxhc3RUaW1lIiwiZ0RlbGF5IiwidGhyb3R0bGVEZWxheSIsInJJQ1RpbWVvdXQiLCJyaWNUaW1lb3V0Iiwibm93IiwiaWRsZUNhbGxiYWNrIiwidGltZW91dCIsImlzUHJpb3JpdHkiLCJkZWxheSIsImRlYm91bmNlIiwiZnVuYyIsInRpbWVzdGFtcCIsImxhdGVyIiwibGFzdCIsInByb3AiLCJsYXp5U2l6ZXNEZWZhdWx0cyIsImxhenlDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwicHJlbG9hZENsYXNzIiwiZXJyb3JDbGFzcyIsImF1dG9zaXplc0NsYXNzIiwic3JjQXR0ciIsInNyY3NldEF0dHIiLCJzaXplc0F0dHIiLCJjdXN0b21NZWRpYSIsImluaXQiLCJleHBGYWN0b3IiLCJoRmFjIiwibG9hZE1vZGUiLCJsb2FkSGlkZGVuIiwibGF6eXNpemVzQ29uZmlnIiwibG9hZGVyIiwicHJlbG9hZEVsZW1zIiwiaXNDb21wbGV0ZWQiLCJyZXNldFByZWxvYWRpbmdUaW1lciIsInN0YXJ0ZWQiLCJlTHZXIiwiZWx2SCIsImVMdG9wIiwiZUxsZWZ0IiwiZUxyaWdodCIsImVMYm90dG9tIiwiZGVmYXVsdEV4cGFuZCIsInByZWxvYWRFeHBhbmQiLCJyZWdJbWciLCJyZWdJZnJhbWUiLCJzdXBwb3J0U2Nyb2xsIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiY3VycmVudEV4cGFuZCIsImlzTG9hZGluZyIsImxvd1J1bnMiLCJyZXNldFByZWxvYWRpbmciLCJlIiwidGFyZ2V0IiwiaXNOZXN0ZWRWaXNpYmxlIiwiZWxlbUV4cGFuZCIsIm91dGVyUmVjdCIsInZpc2libGUiLCJib2R5Iiwib2Zmc2V0UGFyZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiY2hlY2tFbGVtZW50cyIsImVMbGVuIiwicmVjdCIsImF1dG9Mb2FkRWxlbSIsImxvYWRlZFNvbWV0aGluZyIsImVsZW1OZWdhdGl2ZUV4cGFuZCIsImVsZW1FeHBhbmRWYWwiLCJiZWZvcmVFeHBhbmRWYWwiLCJsYXp5bG9hZEVsZW1zIiwiZXhwYW5kIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJfbGF6eVJhY2UiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJ1bnZlaWxFbGVtZW50IiwicHJlbG9hZEFmdGVyTG9hZCIsInRocm90dGxlZENoZWNrRWxlbWVudHMiLCJzd2l0Y2hMb2FkaW5nQ2xhc3MiLCJyYWZTd2l0Y2hMb2FkaW5nQ2xhc3MiLCJyYWZlZFN3aXRjaExvYWRpbmdDbGFzcyIsImhhbmRsZVNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VTcmNzZXQiLCJsYXp5VW52ZWlsIiwiaXNBdXRvIiwic2l6ZXMiLCJpc0ltZyIsInNyY3NldCIsImlzUGljdHVyZSIsImZpcmVzTG9hZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJub2RlTmFtZSIsImNsZWFyVGltZW91dCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY29udGVudFdpbmRvdyIsImxvY2F0aW9uIiwiY2hhbmdlSWZyYW1lU3JjIiwiY29tcGxldGUiLCJuYXR1cmFsV2lkdGgiLCJhdXRvU2l6ZXIiLCJ1cGRhdGVFbGVtIiwib25sb2FkIiwiYWZ0ZXJTY3JvbGwiLCJfIiwiTXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiYXR0cmlidXRlcyIsInNldEludGVydmFsIiwicmVhZHlTdGF0ZSIsImNoZWNrRWxlbXMiLCJ1bnZlaWwiLCJhdXRvc2l6ZXNFbGVtcyIsInNpemVFbGVtZW50Iiwic291cmNlcyIsImxlbiIsImRhdGFBdHRyIiwiZ2V0U2l6ZUVsZW1lbnQiLCJkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzIiwiY2ZnIiwidVAiLCJhQyIsInJDIiwiaEMiLCJmaXJlIiwiZ1ciLCJnZXRDYW5kaWRhdGUiLCJzY3JvbGxUb0VsZW1lbnQiLCJlbGVtZW50IiwiZWxlbWVudE9mZnNldFRvcCIsIm9mZnNldCIsIiQiLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwid2FpdCIsImltbWVkaWF0ZSIsImNvbnRleHQiLCJjYWxsTm93IiwidHJpZ2dlclVwZGF0ZVRleHQiLCJ0ZXh0T3BlbiIsImRhdGEiLCJ0ZXh0Q2xvc2UiLCJ0ZXh0Iiwic2Nyb2xsVG9UYXJnZXQiLCJwcmV2ZW50RGVmYXVsdCIsImhyZWYiLCJhdHRyIiwiaW5jbHVkZXMiLCJleHRlbmQiLCJleHRlbmRlZCIsImRlZXAiLCJ0b1N0cmluZyIsIm1vYmlsZVdpZHRoIiwiX2xhenliZ3NldCIsIm1ha2UiLCJ2aWV3cG9ydCIsInZpZXdwb3J0VyIsImhlaWdodCIsInZpZXdwb3J0SCIsInJlY3RhbmdsZSIsImN1c2hpb24iLCJub2RlVHlwZSIsImNvb3JkcyIsImNhbGlicmF0ZSIsInhwb3J0cyIsIndpbiIsImRvYyIsIm1hdGNoTWVkaWEiLCJtc01hdGNoTWVkaWEiLCJtcSIsInEiLCJtYXRjaGVzIiwiYSIsImIiLCJzY3JvbGxYIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWSIsInBhZ2VZT2Zmc2V0IiwiYXNwZWN0IiwiaCIsInciLCJpblgiLCJpblkiLCJpblZpZXdwb3J0IiwidmVyZ2UiLCJjb250YWluZXIiLCJhbGxUcmlnZ2VycyIsIkRldGVjdEVkZ2UiLCJfY3JlYXRlQ2xhc3MiLCJ0cmlnZ2VyIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwid3JpdGFibGUiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRlZmluZVByb3BlcnRpZXMiLCJzZWxlY3RvciIsImJ1ZmZlciIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsImdldEVsZW1lbnRzIiwibWFpbiIsIl90aGlzIiwiX3RoaXMyIiwicmVtb3ZlRWRnZUNsYXNzZXMiLCJ3aW5kb3dXaWR0aCIsImdldFdpbmRvd1dpZHRoIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmYWN0b3J5IiwiZ2xvYmFsSW5zdGFsbCIsImFkZE1vYmlsZUFyaWEiLCJpbWciLCJjcmVhdGVFbGVtZW50IiwicGljdHVyZSIsIm5vSU9TRml4IiwiX2xhenlJbWdTcmMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJiaW5kIiwibmF2RWRnZURldGVjdCIsImNvbmZpZyIsInN1cHBvcnRTcmNzZXQiLCJyZWdIRGVzYyIsImZpeEVkZ2VIRGVzY3JpcHRvciIsInJlZ0Rlc2NyaXB0b3JzIiwiZWRnZU1hdGNoIiwicmVtb3ZlSERlc2NyaXB0b3JzIiwicmF0aW8iLCJtYXRjaCIsImhhbmRsZXIiLCJjdXJyZW50U3JjIiwib25lcnJvciIsInN1cHBvcnRzVHlwZSIsInR5cGUiLCJtc0VsZW1lbnRzRnJvbVBvaW50Iiwib3B0aW9ucyIsImFzY2VuZGluZ1NvcnQiLCJyZWdQeExlbmd0aCIsInBhcnNlV3NyY3NldCIsImNhbmRpZGF0ZXMiLCJyZWdXQ2FuZGlkYXRlcyIsInJlZ011bHRpcGxlIiwiYWRkQ2FuZGlkYXRlIiwiY2FuZGlkYXRlIiwidXJsIiwid0Rlc2NyaXB0b3IiLCJ1IiwiaW5wdXQiLCJydW5NYXRjaE1lZGlhIiwidGltZXIiLCJtYXRjaE1lZGlhRWxlbXMiLCJjcmVhdGVTcmNzZXQiLCJpc0ltYWdlIiwicGFyc2VkU2V0Iiwic3JjU2V0IiwiX2xhenlwb2x5ZmlsbCIsIl9zZXQiLCJ0b1VwcGVyQ2FzZSIsImdldFgiLCJkcHIiLCJkZXZpY2VQaXhlbFJhdGlvIiwib3B0aW11bSIsIk1hdGgiLCJtaW4iLCJtYXRjaGVzTWVkaWEiLCJtZWRpYSIsInNyY2VzIiwicGFyc2VJbnQiLCJsb3dlckNhbmRpZGF0ZSIsImJvbnVzRmFjdG9yIiwiY2FjaGVkIiwicG93IiwicmVkdWNlQ2FuZGlkYXRlIiwic29ydCIsImN1ciIsInBhcnNlIiwic2VscyIsInNlbCIsImpvaW4iLCJhZGRTdHlsZVNjcmlwdCIsInVuaXF1ZVVybHMiLCJpbnNlcnRFbGVtIiwicmVsIiwiYmdMb2FkIiwicmVnQmdVcmxFc2NhcGUiLCJjYiIsInRtcCIsImJnIiwicG9zdGVyIiwicHJlbG9hZCIsInJlcXVpcmVKcyIsImJhY2tncm91bmRJbWFnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZWdXaGl0ZSIsInJlZ1NwbGl0U2V0IiwicmVnU291cmNlIiwiYWxsb3dlZEJhY2tncm91bmRTaXplIiwiY29udGFpbiIsImNvdmVyIiwiY3JlYXRlUGljdHVyZSIsInNldHMiLCJvcHRpbXVteCIsInJlbW92ZUNoaWxkIiwic3BsaXQiLCJkaXNwbGF5IiwiY2xhc3NOYW1lIiwic2V0IiwicHJveHlMb2FkIiwiaW1hZ2UiLCJfbGF6eWJnc2V0TG9hZGluZyIsImFsdCIsImJnU2l6ZSIsImdldFByb3BlcnR5VmFsdWUiLCJiYWNrZ3JvdW5kU2l6ZSIsImdldEJnU2l6ZSIsIl9sYXp5c2l6ZXNQYXJlbnRGaXQiLCJwcm94eVdpZHRoIiwicmVnQ3NzRml0IiwicmVnQ3NzT2JqZWN0IiwicGFyZW50Rml0IiwiZ2V0UGFyZW50IiwicGFyZW50U2VsIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImNsb3Nlc3QiLCJnZXRGaXQiLCJ0bXBNYXRjaCIsInBhcmVudE9iaiIsImNzcyIsImNvbnRlbnQiLCJmb250RmFtaWx5IiwiZml0IiwiX2xhenlzaXplc1BhcmVudENvbnRhaW5lciIsIm9iamVjdEZpdCIsImdldEltYWdlUmF0aW8iLCJfbHNNZWRpYSIsInBhcnNlRmxvYXQiLCJjYWxjdWxhdGVTaXplIiwiZGlzcGxheVJhdGlvIiwiaW1hZ2VSYXRpbyIsInJldFdpZHRoIiwiZml0T2JqIiwiZml0RWxlbSIsIm9wZW5UYWIiLCJpZCIsImJ1dHRvbnMiLCJhbGxDb250ZW50IiwiY2xvc2VPbkNsaWNrIiwiYnV0dG9uQWN0aXZlIiwiX3ZlcmdlMiIsIl91dGlsaXRpZXMiLCJjbG9zZUFsbFRhYnMiLCJhcmlhRXhwYW5kZWQiLCJmb2N1cyIsIm9wZW5Db250ZW50IiwiZGVlcExpbmtpbmciLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiaGFzaCIsInRyaWdnZXJzIiwiYXJpYU5vdEV4cGFuZGVkIiwiVGFiQWNjb3JkaW9uIiwiY29udGFpbmVyQ2xhc3MiLCJ0cmlnZ2VyQ2xhc3MiLCJjb250ZW50Q2xhc3MiLCJhdXRvT3Blbk9uRGVza3RvcCIsIm9wZW5GaXJzdFRhYk9uRGVza3RvcCIsIl9zZWxlY3RvcnMiLCJfYXV0b09wZW5PbkRlc2t0b3AiLCJfY2xvc2VPbkNsaWNrIiwiX29wZW5GaXJzdFRhYk9uRGVza3RvcCIsIl9kZWVwTGlua2luZyIsIl9pbml0IiwiZmluZCIsImNvbnRlbnRzIiwibG9jYXRpb25IYXNoIiwib24iLCJlcSIsImFjdGl2ZVRyaWdnZXJJbmRleCIsImVhY2giLCJpbmRleCIsImFjdGl2ZVRyaWdnZXIiLCJvcGVuRGVlcExpbmtlZFRhYiIsIl90YWJBY2NvcmRpb24iLCJza2lwVG8iLCJyZW1vdmVBdHRyIiwibW9iaWxlVHJpZ2dlckFyaWEiLCJleHBhbmRlZCIsImhhc3BvcHVwIiwibW9iaWxlVHJpZ2dlciIsImFyaWEtaGlkZGVuIiwiYXJpYS1leHBhbmRlZCIsImFyaWEtaGFzcG9wdXAiLCJuYXZpZ2F0aW9uIiwiYXJpYUhpZGRlblRydWUiLCJjbG9zZVN1Yk1lbnVBcmlhIiwicGFyZW50VHJpZ2dlciIsImlzUGFyZW50VHJpZ2dlciIsIm1lbnUiLCJzdWJNZW51IiwiY2xvc2VNZW51cyIsImNsb3NlU2libGluZ01vZGFscyIsInRoaXNUcmlnZ2VyIiwidGhpc01vZGFsIiwibW9kYWwiLCJub3QiLCJtb2RhbFRyaWdnZXIiLCJjbG9zZU1vZGFscyIsImNsb3NlTW9iaWxlTmF2Iiwic2xpZGVOYXYiLCJjdXJyZW50TmF2RGVwdGgiLCJ0b2dnbGVOYXZFbGVtZW50IiwibWVudVRyaWdnZXIiLCJjdXJyZW50VHJpZ2dlciIsImN1cnJlbnRUYXJnZXQiLCJjdXJyZW50TWVudSIsIm5leHQiLCJzaWJsaW5ncyIsInNpYmxpbmdUcmlnZ2VycyIsInNpYmxpbmdNZW51cyIsImRlcHRoIiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGVBcmlhSGlkZGVuIiwib3BlblN1Yk1lbnVBcmlhIiwibmF2TWFpbiIsIm1vYmlsZUJhY2tCdXR0b24iLCJzaG93IiwiaGlkZSIsImNsb3NlQWxsIiwiX2RldGVjdEVkZ2UiLCJ0cmlnZ2VyVGV4dCIsIiR3aW5kb3ciLCJhcmlhSGlkZGVuRmFsc2UiLCJ3aGljaCIsIm5hdkNsb3NlQWxsIiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250YWlucyIsImFjY29yZGlvblRyaWdnZXJzIiwiYXJyIiwiaXNBcnJheSIsImFycjIiLCJ0b2dnbGVBcmlhRXhwYW5kZWQiLCIkZWwiLCIkcGFyZW50Iiwic3RyaW5ncyIsIkNTUyIsInN1cHBvcnRzIiwicXVlcnlTZWxlY3RvciIsImh0bWwiLCJzdHJpbmciLCJhcHBlbmQiLCJIZXJvU2xpZGVyIiwic2xpZGVTZWxlY3RvciIsInNsaWRlRGVsYXkiLCJzbGlkZXMiLCJjb2xsZWN0U2xpZGVzIiwiY3VycmVudFNsaWRlSW5kZXgiLCJjdXJyZW50U2xpZGVFbGVtZW50IiwiX3NsaWRlTG9vcCIsIl9pc1J1bm5pbmciLCJhY3RpdmF0ZVNsaWRlIiwic3RhcnRMb29wIiwibmV4dFNsaWRlIiwiY2xlYXJJbnRlcnZhbCIsInN0b3BMb29wIiwiZGVhY3RpdmF0ZVNsaWRlIiwic2xpZGVOdW1iZXIiLCJuZXdBY3RpdmVTbGlkZSIsImhlcm9TbGlkZXIiLCJoZXJvU2xpZGVyUGF1c2VQbGF5IiwiYnV0dG9uVGV4dCIsInRvZ2dsZUxvb3AiLCJ0b2dnbGUiLCJ0ZXh0Q29udGVudCIsImhvdmVyRWZmZWN0IiwieCIsInBhZ2VYIiwieSIsInBhZ2VZIiwic2V0UHJvcGVydHkiLCJjb25jYXQiLCJidXR0b24iLCJNb2RhbHMiLCJkZWZhdWx0cyIsIm1vZGFsRGF0YUF0dHIiLCJhZGRCb2R5Q2xhc3MiLCJydW5Nb2RhbHMiLCJtb2RhbHMiLCJzZXR0aW5ncyIsIm1vZGFsSWQiLCJwdWJsaWNBUElzIiwiYWN0aXZlTW9kYWwiLCJoYXNBdHRyaWJ1dGUiLCJjbG9zZUFsbE1vZGFscyIsImhhbmRsZUNsb3NlIiwiYW5jaG9yIiwiYW5jaG9ySGFzaCIsImJhc2VWYWwiLCJpc1RhcmdldFVybCIsImhhc2hUYXJnZXQiLCJjaGVja0Zvck1vZGFsSWQi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R0FDUkEsRUFBUSxJQUNSQSxFQUFRLElBQ1JBLEVBQVEsSUFDUkEsRUFBUSIsImZpbGUiOiJqcy9iYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjYpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24gKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihtb2R1bGUpIHtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4oZnVuY3Rpb24gKHdpbmRvdywgZmFjdG9yeSkge1xuXHR2YXIgbGF6eVNpemVzID0gZmFjdG9yeSh3aW5kb3csIHdpbmRvdy5kb2N1bWVudCk7XG5cdHdpbmRvdy5sYXp5U2l6ZXMgPSBsYXp5U2l6ZXM7XG5cdGlmICgoIGZhbHNlID8gdW5kZWZpbmVkIDogX3R5cGVvZihtb2R1bGUpKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gbGF6eVNpemVzO1xuXHR9XG59KSh3aW5kb3csIGZ1bmN0aW9uIGwod2luZG93LCBkb2N1bWVudCkge1xuXHQndXNlIHN0cmljdCc7XG5cdC8qanNoaW50IGVxbnVsbDp0cnVlICovXG5cblx0aWYgKCFkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIGxhenlzaXplcywgbGF6eVNpemVzQ29uZmlnO1xuXG5cdHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdHZhciBEYXRlID0gd2luZG93LkRhdGU7XG5cblx0dmFyIHN1cHBvcnRQaWN0dXJlID0gd2luZG93LkhUTUxQaWN0dXJlRWxlbWVudDtcblxuXHR2YXIgX2FkZEV2ZW50TGlzdGVuZXIgPSAnYWRkRXZlbnRMaXN0ZW5lcic7XG5cblx0dmFyIF9nZXRBdHRyaWJ1dGUgPSAnZ2V0QXR0cmlidXRlJztcblxuXHR2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IHdpbmRvd1tfYWRkRXZlbnRMaXN0ZW5lcl07XG5cblx0dmFyIHNldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dDtcblxuXHR2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBzZXRUaW1lb3V0O1xuXG5cdHZhciByZXF1ZXN0SWRsZUNhbGxiYWNrID0gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2s7XG5cblx0dmFyIHJlZ1BpY3R1cmUgPSAvXnBpY3R1cmUkL2k7XG5cblx0dmFyIGxvYWRFdmVudHMgPSBbJ2xvYWQnLCAnZXJyb3InLCAnbGF6eWluY2x1ZGVkJywgJ19sYXp5bG9hZGVkJ107XG5cblx0dmFyIHJlZ0NsYXNzQ2FjaGUgPSB7fTtcblxuXHR2YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG5cdHZhciBoYXNDbGFzcyA9IGZ1bmN0aW9uIGhhc0NsYXNzKGVsZSwgY2xzKSB7XG5cdFx0aWYgKCFyZWdDbGFzc0NhY2hlW2Nsc10pIHtcblx0XHRcdHJlZ0NsYXNzQ2FjaGVbY2xzXSA9IG5ldyBSZWdFeHAoJyhcXFxcc3xeKScgKyBjbHMgKyAnKFxcXFxzfCQpJyk7XG5cdFx0fVxuXHRcdHJldHVybiByZWdDbGFzc0NhY2hlW2Nsc10udGVzdChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpICYmIHJlZ0NsYXNzQ2FjaGVbY2xzXTtcblx0fTtcblxuXHR2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyhlbGUsIGNscykge1xuXHRcdGlmICghaGFzQ2xhc3MoZWxlLCBjbHMpKSB7XG5cdFx0XHRlbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpLnRyaW0oKSArICcgJyArIGNscyk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZSwgY2xzKSB7XG5cdFx0dmFyIHJlZztcblx0XHRpZiAocmVnID0gaGFzQ2xhc3MoZWxlLCBjbHMpKSB7XG5cdFx0XHRlbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpLnJlcGxhY2UocmVnLCAnICcpKTtcblx0XHR9XG5cdH07XG5cblx0dmFyIGFkZFJlbW92ZUxvYWRFdmVudHMgPSBmdW5jdGlvbiBhZGRSZW1vdmVMb2FkRXZlbnRzKGRvbSwgZm4sIGFkZCkge1xuXHRcdHZhciBhY3Rpb24gPSBhZGQgPyBfYWRkRXZlbnRMaXN0ZW5lciA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcblx0XHRpZiAoYWRkKSB7XG5cdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGRvbSwgZm4pO1xuXHRcdH1cblx0XHRsb2FkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2dCkge1xuXHRcdFx0ZG9tW2FjdGlvbl0oZXZ0LCBmbik7XG5cdFx0fSk7XG5cdH07XG5cblx0dmFyIHRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uIHRyaWdnZXJFdmVudChlbGVtLCBuYW1lLCBkZXRhaWwsIG5vQnViYmxlcywgbm9DYW5jZWxhYmxlKSB7XG5cdFx0dmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG5cblx0XHRpZiAoIWRldGFpbCkge1xuXHRcdFx0ZGV0YWlsID0ge307XG5cdFx0fVxuXG5cdFx0ZGV0YWlsLmluc3RhbmNlID0gbGF6eXNpemVzO1xuXG5cdFx0ZXZlbnQuaW5pdEN1c3RvbUV2ZW50KG5hbWUsICFub0J1YmJsZXMsICFub0NhbmNlbGFibGUsIGRldGFpbCk7XG5cblx0XHRlbGVtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdHJldHVybiBldmVudDtcblx0fTtcblxuXHR2YXIgdXBkYXRlUG9seWZpbGwgPSBmdW5jdGlvbiB1cGRhdGVQb2x5ZmlsbChlbCwgZnVsbCkge1xuXHRcdHZhciBwb2x5ZmlsbDtcblx0XHRpZiAoIXN1cHBvcnRQaWN0dXJlICYmIChwb2x5ZmlsbCA9IHdpbmRvdy5waWN0dXJlZmlsbCB8fCBsYXp5U2l6ZXNDb25maWcucGYpKSB7XG5cdFx0XHRwb2x5ZmlsbCh7IHJlZXZhbHVhdGU6IHRydWUsIGVsZW1lbnRzOiBbZWxdIH0pO1xuXHRcdH0gZWxzZSBpZiAoZnVsbCAmJiBmdWxsLnNyYykge1xuXHRcdFx0ZWwuc3JjID0gZnVsbC5zcmM7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBnZXRDU1MgPSBmdW5jdGlvbiBnZXRDU1MoZWxlbSwgc3R5bGUpIHtcblx0XHRyZXR1cm4gKGdldENvbXB1dGVkU3R5bGUoZWxlbSwgbnVsbCkgfHwge30pW3N0eWxlXTtcblx0fTtcblxuXHR2YXIgZ2V0V2lkdGggPSBmdW5jdGlvbiBnZXRXaWR0aChlbGVtLCBwYXJlbnQsIHdpZHRoKSB7XG5cdFx0d2lkdGggPSB3aWR0aCB8fCBlbGVtLm9mZnNldFdpZHRoO1xuXG5cdFx0d2hpbGUgKHdpZHRoIDwgbGF6eVNpemVzQ29uZmlnLm1pblNpemUgJiYgcGFyZW50ICYmICFlbGVtLl9sYXp5c2l6ZXNXaWR0aCkge1xuXHRcdFx0d2lkdGggPSBwYXJlbnQub2Zmc2V0V2lkdGg7XG5cdFx0XHRwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gd2lkdGg7XG5cdH07XG5cblx0dmFyIHJBRiA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcnVubmluZywgd2FpdGluZztcblx0XHR2YXIgZmlyc3RGbnMgPSBbXTtcblx0XHR2YXIgc2Vjb25kRm5zID0gW107XG5cdFx0dmFyIGZucyA9IGZpcnN0Rm5zO1xuXG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uIHJ1bigpIHtcblx0XHRcdHZhciBydW5GbnMgPSBmbnM7XG5cblx0XHRcdGZucyA9IGZpcnN0Rm5zLmxlbmd0aCA/IHNlY29uZEZucyA6IGZpcnN0Rm5zO1xuXG5cdFx0XHRydW5uaW5nID0gdHJ1ZTtcblx0XHRcdHdhaXRpbmcgPSBmYWxzZTtcblxuXHRcdFx0d2hpbGUgKHJ1bkZucy5sZW5ndGgpIHtcblx0XHRcdFx0cnVuRm5zLnNoaWZ0KCkoKTtcblx0XHRcdH1cblxuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdH07XG5cblx0XHR2YXIgcmFmQmF0Y2ggPSBmdW5jdGlvbiByYWZCYXRjaChmbiwgcXVldWUpIHtcblx0XHRcdGlmIChydW5uaW5nICYmICFxdWV1ZSkge1xuXHRcdFx0XHRmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm5zLnB1c2goZm4pO1xuXG5cdFx0XHRcdGlmICghd2FpdGluZykge1xuXHRcdFx0XHRcdHdhaXRpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdChkb2N1bWVudC5oaWRkZW4gPyBzZXRUaW1lb3V0IDogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKShydW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJhZkJhdGNoLl9sc0ZsdXNoID0gcnVuO1xuXG5cdFx0cmV0dXJuIHJhZkJhdGNoO1xuXHR9KCk7XG5cblx0dmFyIHJBRkl0ID0gZnVuY3Rpb24gckFGSXQoZm4sIHNpbXBsZSkge1xuXHRcdHJldHVybiBzaW1wbGUgPyBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyQUYoZm4pO1xuXHRcdH0gOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0XHRcdHJBRihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0fTtcblxuXHR2YXIgdGhyb3R0bGUgPSBmdW5jdGlvbiB0aHJvdHRsZShmbikge1xuXHRcdHZhciBydW5uaW5nO1xuXHRcdHZhciBsYXN0VGltZSA9IDA7XG5cdFx0dmFyIGdEZWxheSA9IGxhenlTaXplc0NvbmZpZy50aHJvdHRsZURlbGF5O1xuXHRcdHZhciBySUNUaW1lb3V0ID0gbGF6eVNpemVzQ29uZmlnLnJpY1RpbWVvdXQ7XG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uIHJ1bigpIHtcblx0XHRcdHJ1bm5pbmcgPSBmYWxzZTtcblx0XHRcdGxhc3RUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRcdGZuKCk7XG5cdFx0fTtcblx0XHR2YXIgaWRsZUNhbGxiYWNrID0gcmVxdWVzdElkbGVDYWxsYmFjayAmJiBySUNUaW1lb3V0ID4gNDkgPyBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXF1ZXN0SWRsZUNhbGxiYWNrKHJ1biwgeyB0aW1lb3V0OiBySUNUaW1lb3V0IH0pO1xuXG5cdFx0XHRpZiAocklDVGltZW91dCAhPT0gbGF6eVNpemVzQ29uZmlnLnJpY1RpbWVvdXQpIHtcblx0XHRcdFx0cklDVGltZW91dCA9IGxhenlTaXplc0NvbmZpZy5yaWNUaW1lb3V0O1xuXHRcdFx0fVxuXHRcdH0gOiByQUZJdChmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZXRUaW1lb3V0KHJ1bik7XG5cdFx0fSwgdHJ1ZSk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gKGlzUHJpb3JpdHkpIHtcblx0XHRcdHZhciBkZWxheTtcblxuXHRcdFx0aWYgKGlzUHJpb3JpdHkgPSBpc1ByaW9yaXR5ID09PSB0cnVlKSB7XG5cdFx0XHRcdHJJQ1RpbWVvdXQgPSAzMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKHJ1bm5pbmcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRydW5uaW5nID0gdHJ1ZTtcblxuXHRcdFx0ZGVsYXkgPSBnRGVsYXkgLSAoRGF0ZS5ub3coKSAtIGxhc3RUaW1lKTtcblxuXHRcdFx0aWYgKGRlbGF5IDwgMCkge1xuXHRcdFx0XHRkZWxheSA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc1ByaW9yaXR5IHx8IGRlbGF5IDwgOSkge1xuXHRcdFx0XHRpZGxlQ2FsbGJhY2soKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldFRpbWVvdXQoaWRsZUNhbGxiYWNrLCBkZWxheSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHQvL2Jhc2VkIG9uIGh0dHA6Ly9tb2Rlcm5qYXZhc2NyaXB0LmJsb2dzcG90LmRlLzIwMTMvMDgvYnVpbGRpbmctYmV0dGVyLWRlYm91bmNlLmh0bWxcblx0dmFyIGRlYm91bmNlID0gZnVuY3Rpb24gZGVib3VuY2UoZnVuYykge1xuXHRcdHZhciB0aW1lb3V0LCB0aW1lc3RhbXA7XG5cdFx0dmFyIHdhaXQgPSA5OTtcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24gcnVuKCkge1xuXHRcdFx0dGltZW91dCA9IG51bGw7XG5cdFx0XHRmdW5jKCk7XG5cdFx0fTtcblx0XHR2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcblx0XHRcdHZhciBsYXN0ID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcDtcblxuXHRcdFx0aWYgKGxhc3QgPCB3YWl0KSB7XG5cdFx0XHRcdHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdChyZXF1ZXN0SWRsZUNhbGxiYWNrIHx8IHJ1bikocnVuKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cblx0XHRcdGlmICghdGltZW91dCkge1xuXHRcdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHRcdHZhciBwcm9wO1xuXG5cdFx0dmFyIGxhenlTaXplc0RlZmF1bHRzID0ge1xuXHRcdFx0bGF6eUNsYXNzOiAnbGF6eWxvYWQnLFxuXHRcdFx0bG9hZGVkQ2xhc3M6ICdsYXp5bG9hZGVkJyxcblx0XHRcdGxvYWRpbmdDbGFzczogJ2xhenlsb2FkaW5nJyxcblx0XHRcdHByZWxvYWRDbGFzczogJ2xhenlwcmVsb2FkJyxcblx0XHRcdGVycm9yQ2xhc3M6ICdsYXp5ZXJyb3InLFxuXHRcdFx0Ly9zdHJpY3RDbGFzczogJ2xhenlzdHJpY3QnLFxuXHRcdFx0YXV0b3NpemVzQ2xhc3M6ICdsYXp5YXV0b3NpemVzJyxcblx0XHRcdHNyY0F0dHI6ICdkYXRhLXNyYycsXG5cdFx0XHRzcmNzZXRBdHRyOiAnZGF0YS1zcmNzZXQnLFxuXHRcdFx0c2l6ZXNBdHRyOiAnZGF0YS1zaXplcycsXG5cdFx0XHQvL3ByZWxvYWRBZnRlckxvYWQ6IGZhbHNlLFxuXHRcdFx0bWluU2l6ZTogNDAsXG5cdFx0XHRjdXN0b21NZWRpYToge30sXG5cdFx0XHRpbml0OiB0cnVlLFxuXHRcdFx0ZXhwRmFjdG9yOiAxLjUsXG5cdFx0XHRoRmFjOiAwLjgsXG5cdFx0XHRsb2FkTW9kZTogMixcblx0XHRcdGxvYWRIaWRkZW46IHRydWUsXG5cdFx0XHRyaWNUaW1lb3V0OiAwLFxuXHRcdFx0dGhyb3R0bGVEZWxheTogMTI1XG5cdFx0fTtcblxuXHRcdGxhenlTaXplc0NvbmZpZyA9IHdpbmRvdy5sYXp5U2l6ZXNDb25maWcgfHwgd2luZG93LmxhenlzaXplc0NvbmZpZyB8fCB7fTtcblxuXHRcdGZvciAocHJvcCBpbiBsYXp5U2l6ZXNEZWZhdWx0cykge1xuXHRcdFx0aWYgKCEocHJvcCBpbiBsYXp5U2l6ZXNDb25maWcpKSB7XG5cdFx0XHRcdGxhenlTaXplc0NvbmZpZ1twcm9wXSA9IGxhenlTaXplc0RlZmF1bHRzW3Byb3BdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHdpbmRvdy5sYXp5U2l6ZXNDb25maWcgPSBsYXp5U2l6ZXNDb25maWc7XG5cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChsYXp5U2l6ZXNDb25maWcuaW5pdCkge1xuXHRcdFx0XHRpbml0KCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pKCk7XG5cblx0dmFyIGxvYWRlciA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcHJlbG9hZEVsZW1zLCBpc0NvbXBsZXRlZCwgcmVzZXRQcmVsb2FkaW5nVGltZXIsIGxvYWRNb2RlLCBzdGFydGVkO1xuXG5cdFx0dmFyIGVMdlcsIGVsdkgsIGVMdG9wLCBlTGxlZnQsIGVMcmlnaHQsIGVMYm90dG9tO1xuXG5cdFx0dmFyIGRlZmF1bHRFeHBhbmQsIHByZWxvYWRFeHBhbmQsIGhGYWM7XG5cblx0XHR2YXIgcmVnSW1nID0gL15pbWckL2k7XG5cdFx0dmFyIHJlZ0lmcmFtZSA9IC9eaWZyYW1lJC9pO1xuXG5cdFx0dmFyIHN1cHBvcnRTY3JvbGwgPSAnb25zY3JvbGwnIGluIHdpbmRvdyAmJiAhL2dsZWJvdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuXHRcdHZhciBzaHJpbmtFeHBhbmQgPSAwO1xuXHRcdHZhciBjdXJyZW50RXhwYW5kID0gMDtcblxuXHRcdHZhciBpc0xvYWRpbmcgPSAwO1xuXHRcdHZhciBsb3dSdW5zID0gLTE7XG5cblx0XHR2YXIgcmVzZXRQcmVsb2FkaW5nID0gZnVuY3Rpb24gcmVzZXRQcmVsb2FkaW5nKGUpIHtcblx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0aWYgKGUgJiYgZS50YXJnZXQpIHtcblx0XHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhlLnRhcmdldCwgcmVzZXRQcmVsb2FkaW5nKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFlIHx8IGlzTG9hZGluZyA8IDAgfHwgIWUudGFyZ2V0KSB7XG5cdFx0XHRcdGlzTG9hZGluZyA9IDA7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBpc05lc3RlZFZpc2libGUgPSBmdW5jdGlvbiBpc05lc3RlZFZpc2libGUoZWxlbSwgZWxlbUV4cGFuZCkge1xuXHRcdFx0dmFyIG91dGVyUmVjdDtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtO1xuXHRcdFx0dmFyIHZpc2libGUgPSBnZXRDU1MoZG9jdW1lbnQuYm9keSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJyB8fCBnZXRDU1MoZWxlbSwgJ3Zpc2liaWxpdHknKSAhPSAnaGlkZGVuJztcblxuXHRcdFx0ZUx0b3AgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMYm90dG9tICs9IGVsZW1FeHBhbmQ7XG5cdFx0XHRlTGxlZnQgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMcmlnaHQgKz0gZWxlbUV4cGFuZDtcblxuXHRcdFx0d2hpbGUgKHZpc2libGUgJiYgKHBhcmVudCA9IHBhcmVudC5vZmZzZXRQYXJlbnQpICYmIHBhcmVudCAhPSBkb2N1bWVudC5ib2R5ICYmIHBhcmVudCAhPSBkb2NFbGVtKSB7XG5cdFx0XHRcdHZpc2libGUgPSAoZ2V0Q1NTKHBhcmVudCwgJ29wYWNpdHknKSB8fCAxKSA+IDA7XG5cblx0XHRcdFx0aWYgKHZpc2libGUgJiYgZ2V0Q1NTKHBhcmVudCwgJ292ZXJmbG93JykgIT0gJ3Zpc2libGUnKSB7XG5cdFx0XHRcdFx0b3V0ZXJSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdHZpc2libGUgPSBlTHJpZ2h0ID4gb3V0ZXJSZWN0LmxlZnQgJiYgZUxsZWZ0IDwgb3V0ZXJSZWN0LnJpZ2h0ICYmIGVMYm90dG9tID4gb3V0ZXJSZWN0LnRvcCAtIDEgJiYgZUx0b3AgPCBvdXRlclJlY3QuYm90dG9tICsgMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmlzaWJsZTtcblx0XHR9O1xuXG5cdFx0dmFyIGNoZWNrRWxlbWVudHMgPSBmdW5jdGlvbiBjaGVja0VsZW1lbnRzKCkge1xuXHRcdFx0dmFyIGVMbGVuLCBpLCByZWN0LCBhdXRvTG9hZEVsZW0sIGxvYWRlZFNvbWV0aGluZywgZWxlbUV4cGFuZCwgZWxlbU5lZ2F0aXZlRXhwYW5kLCBlbGVtRXhwYW5kVmFsLCBiZWZvcmVFeHBhbmRWYWw7XG5cblx0XHRcdHZhciBsYXp5bG9hZEVsZW1zID0gbGF6eXNpemVzLmVsZW1lbnRzO1xuXG5cdFx0XHRpZiAoKGxvYWRNb2RlID0gbGF6eVNpemVzQ29uZmlnLmxvYWRNb2RlKSAmJiBpc0xvYWRpbmcgPCA4ICYmIChlTGxlbiA9IGxhenlsb2FkRWxlbXMubGVuZ3RoKSkge1xuXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRcdGxvd1J1bnMrKztcblxuXHRcdFx0XHRpZiAocHJlbG9hZEV4cGFuZCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0aWYgKCEoJ2V4cGFuZCcgaW4gbGF6eVNpemVzQ29uZmlnKSkge1xuXHRcdFx0XHRcdFx0bGF6eVNpemVzQ29uZmlnLmV4cGFuZCA9IGRvY0VsZW0uY2xpZW50SGVpZ2h0ID4gNTAwICYmIGRvY0VsZW0uY2xpZW50V2lkdGggPiA1MDAgPyA1MDAgOiAzNzA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZGVmYXVsdEV4cGFuZCA9IGxhenlTaXplc0NvbmZpZy5leHBhbmQ7XG5cdFx0XHRcdFx0cHJlbG9hZEV4cGFuZCA9IGRlZmF1bHRFeHBhbmQgKiBsYXp5U2l6ZXNDb25maWcuZXhwRmFjdG9yO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRFeHBhbmQgPCBwcmVsb2FkRXhwYW5kICYmIGlzTG9hZGluZyA8IDEgJiYgbG93UnVucyA+IDIgJiYgbG9hZE1vZGUgPiAyICYmICFkb2N1bWVudC5oaWRkZW4pIHtcblx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gcHJlbG9hZEV4cGFuZDtcblx0XHRcdFx0XHRsb3dSdW5zID0gMDtcblx0XHRcdFx0fSBlbHNlIGlmIChsb2FkTW9kZSA+IDEgJiYgbG93UnVucyA+IDEgJiYgaXNMb2FkaW5nIDwgNikge1xuXHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBkZWZhdWx0RXhwYW5kO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBzaHJpbmtFeHBhbmQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKDsgaSA8IGVMbGVuOyBpKyspIHtcblxuXHRcdFx0XHRcdGlmICghbGF6eWxvYWRFbGVtc1tpXSB8fCBsYXp5bG9hZEVsZW1zW2ldLl9sYXp5UmFjZSkge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCFzdXBwb3J0U2Nyb2xsKSB7XG5cdFx0XHRcdFx0XHR1bnZlaWxFbGVtZW50KGxhenlsb2FkRWxlbXNbaV0pO2NvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghKGVsZW1FeHBhbmRWYWwgPSBsYXp5bG9hZEVsZW1zW2ldW19nZXRBdHRyaWJ1dGVdKCdkYXRhLWV4cGFuZCcpKSB8fCAhKGVsZW1FeHBhbmQgPSBlbGVtRXhwYW5kVmFsICogMSkpIHtcblx0XHRcdFx0XHRcdGVsZW1FeHBhbmQgPSBjdXJyZW50RXhwYW5kO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChiZWZvcmVFeHBhbmRWYWwgIT09IGVsZW1FeHBhbmQpIHtcblx0XHRcdFx0XHRcdGVMdlcgPSBpbm5lcldpZHRoICsgZWxlbUV4cGFuZCAqIGhGYWM7XG5cdFx0XHRcdFx0XHRlbHZIID0gaW5uZXJIZWlnaHQgKyBlbGVtRXhwYW5kO1xuXHRcdFx0XHRcdFx0ZWxlbU5lZ2F0aXZlRXhwYW5kID0gZWxlbUV4cGFuZCAqIC0xO1xuXHRcdFx0XHRcdFx0YmVmb3JlRXhwYW5kVmFsID0gZWxlbUV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZWN0ID0gbGF6eWxvYWRFbGVtc1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0XHRcdGlmICgoZUxib3R0b20gPSByZWN0LmJvdHRvbSkgPj0gZWxlbU5lZ2F0aXZlRXhwYW5kICYmIChlTHRvcCA9IHJlY3QudG9wKSA8PSBlbHZIICYmIChlTHJpZ2h0ID0gcmVjdC5yaWdodCkgPj0gZWxlbU5lZ2F0aXZlRXhwYW5kICogaEZhYyAmJiAoZUxsZWZ0ID0gcmVjdC5sZWZ0KSA8PSBlTHZXICYmIChlTGJvdHRvbSB8fCBlTHJpZ2h0IHx8IGVMbGVmdCB8fCBlTHRvcCkgJiYgKGxhenlTaXplc0NvbmZpZy5sb2FkSGlkZGVuIHx8IGdldENTUyhsYXp5bG9hZEVsZW1zW2ldLCAndmlzaWJpbGl0eScpICE9ICdoaWRkZW4nKSAmJiAoaXNDb21wbGV0ZWQgJiYgaXNMb2FkaW5nIDwgMyAmJiAhZWxlbUV4cGFuZFZhbCAmJiAobG9hZE1vZGUgPCAzIHx8IGxvd1J1bnMgPCA0KSB8fCBpc05lc3RlZFZpc2libGUobGF6eWxvYWRFbGVtc1tpXSwgZWxlbUV4cGFuZCkpKSB7XG5cdFx0XHRcdFx0XHR1bnZlaWxFbGVtZW50KGxhenlsb2FkRWxlbXNbaV0pO1xuXHRcdFx0XHRcdFx0bG9hZGVkU29tZXRoaW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGlmIChpc0xvYWRpbmcgPiA5KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIWxvYWRlZFNvbWV0aGluZyAmJiBpc0NvbXBsZXRlZCAmJiAhYXV0b0xvYWRFbGVtICYmIGlzTG9hZGluZyA8IDQgJiYgbG93UnVucyA8IDQgJiYgbG9hZE1vZGUgPiAyICYmIChwcmVsb2FkRWxlbXNbMF0gfHwgbGF6eVNpemVzQ29uZmlnLnByZWxvYWRBZnRlckxvYWQpICYmIChwcmVsb2FkRWxlbXNbMF0gfHwgIWVsZW1FeHBhbmRWYWwgJiYgKGVMYm90dG9tIHx8IGVMcmlnaHQgfHwgZUxsZWZ0IHx8IGVMdG9wIHx8IGxhenlsb2FkRWxlbXNbaV1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ29uZmlnLnNpemVzQXR0cikgIT0gJ2F1dG8nKSkpIHtcblx0XHRcdFx0XHRcdGF1dG9Mb2FkRWxlbSA9IHByZWxvYWRFbGVtc1swXSB8fCBsYXp5bG9hZEVsZW1zW2ldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChhdXRvTG9hZEVsZW0gJiYgIWxvYWRlZFNvbWV0aGluZykge1xuXHRcdFx0XHRcdHVudmVpbEVsZW1lbnQoYXV0b0xvYWRFbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyA9IHRocm90dGxlKGNoZWNrRWxlbWVudHMpO1xuXG5cdFx0dmFyIHN3aXRjaExvYWRpbmdDbGFzcyA9IGZ1bmN0aW9uIHN3aXRjaExvYWRpbmdDbGFzcyhlKSB7XG5cdFx0XHRhZGRDbGFzcyhlLnRhcmdldCwgbGF6eVNpemVzQ29uZmlnLmxvYWRlZENsYXNzKTtcblx0XHRcdHJlbW92ZUNsYXNzKGUudGFyZ2V0LCBsYXp5U2l6ZXNDb25maWcubG9hZGluZ0NsYXNzKTtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZS50YXJnZXQsIHJhZlN3aXRjaExvYWRpbmdDbGFzcyk7XG5cdFx0XHR0cmlnZ2VyRXZlbnQoZS50YXJnZXQsICdsYXp5bG9hZGVkJyk7XG5cdFx0fTtcblx0XHR2YXIgcmFmZWRTd2l0Y2hMb2FkaW5nQ2xhc3MgPSByQUZJdChzd2l0Y2hMb2FkaW5nQ2xhc3MpO1xuXHRcdHZhciByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MgPSBmdW5jdGlvbiByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MoZSkge1xuXHRcdFx0cmFmZWRTd2l0Y2hMb2FkaW5nQ2xhc3MoeyB0YXJnZXQ6IGUudGFyZ2V0IH0pO1xuXHRcdH07XG5cblx0XHR2YXIgY2hhbmdlSWZyYW1lU3JjID0gZnVuY3Rpb24gY2hhbmdlSWZyYW1lU3JjKGVsZW0sIHNyYykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZWxlbS5jb250ZW50V2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3JjKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0ZWxlbS5zcmMgPSBzcmM7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBoYW5kbGVTb3VyY2VzID0gZnVuY3Rpb24gaGFuZGxlU291cmNlcyhzb3VyY2UpIHtcblx0XHRcdHZhciBjdXN0b21NZWRpYTtcblxuXHRcdFx0dmFyIHNvdXJjZVNyY3NldCA9IHNvdXJjZVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDb25maWcuc3Jjc2V0QXR0cik7XG5cblx0XHRcdGlmIChjdXN0b21NZWRpYSA9IGxhenlTaXplc0NvbmZpZy5jdXN0b21NZWRpYVtzb3VyY2VbX2dldEF0dHJpYnV0ZV0oJ2RhdGEtbWVkaWEnKSB8fCBzb3VyY2VbX2dldEF0dHJpYnV0ZV0oJ21lZGlhJyldKSB7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgY3VzdG9tTWVkaWEpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc291cmNlU3Jjc2V0KSB7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIHNvdXJjZVNyY3NldCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBsYXp5VW52ZWlsID0gckFGSXQoZnVuY3Rpb24gKGVsZW0sIGRldGFpbCwgaXNBdXRvLCBzaXplcywgaXNJbWcpIHtcblx0XHRcdHZhciBzcmMsIHNyY3NldCwgcGFyZW50LCBpc1BpY3R1cmUsIGV2ZW50LCBmaXJlc0xvYWQ7XG5cblx0XHRcdGlmICghKGV2ZW50ID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5YmVmb3JldW52ZWlsJywgZGV0YWlsKSkuZGVmYXVsdFByZXZlbnRlZCkge1xuXG5cdFx0XHRcdGlmIChzaXplcykge1xuXHRcdFx0XHRcdGlmIChpc0F1dG8pIHtcblx0XHRcdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NvbmZpZy5hdXRvc2l6ZXNDbGFzcyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzaXplcycsIHNpemVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcmNzZXQgPSBlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NvbmZpZy5zcmNzZXRBdHRyKTtcblx0XHRcdFx0c3JjID0gZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDb25maWcuc3JjQXR0cik7XG5cblx0XHRcdFx0aWYgKGlzSW1nKSB7XG5cdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHRcdGlzUGljdHVyZSA9IHBhcmVudCAmJiByZWdQaWN0dXJlLnRlc3QocGFyZW50Lm5vZGVOYW1lIHx8ICcnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZpcmVzTG9hZCA9IGRldGFpbC5maXJlc0xvYWQgfHwgJ3NyYycgaW4gZWxlbSAmJiAoc3Jjc2V0IHx8IHNyYyB8fCBpc1BpY3R1cmUpO1xuXG5cdFx0XHRcdGV2ZW50ID0geyB0YXJnZXQ6IGVsZW0gfTtcblxuXHRcdFx0XHRpZiAoZmlyZXNMb2FkKSB7XG5cdFx0XHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhlbGVtLCByZXNldFByZWxvYWRpbmcsIHRydWUpO1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dChyZXNldFByZWxvYWRpbmdUaW1lcik7XG5cdFx0XHRcdFx0cmVzZXRQcmVsb2FkaW5nVGltZXIgPSBzZXRUaW1lb3V0KHJlc2V0UHJlbG9hZGluZywgMjUwMCk7XG5cblx0XHRcdFx0XHRhZGRDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDb25maWcubG9hZGluZ0NsYXNzKTtcblx0XHRcdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGVsZW0sIHJhZlN3aXRjaExvYWRpbmdDbGFzcywgdHJ1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaXNQaWN0dXJlKSB7XG5cdFx0XHRcdFx0Zm9yRWFjaC5jYWxsKHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJyksIGhhbmRsZVNvdXJjZXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHNyY3NldCkge1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBzcmNzZXQpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHNyYyAmJiAhaXNQaWN0dXJlKSB7XG5cdFx0XHRcdFx0aWYgKHJlZ0lmcmFtZS50ZXN0KGVsZW0ubm9kZU5hbWUpKSB7XG5cdFx0XHRcdFx0XHRjaGFuZ2VJZnJhbWVTcmMoZWxlbSwgc3JjKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxlbS5zcmMgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGlzSW1nICYmIChzcmNzZXQgfHwgaXNQaWN0dXJlKSkge1xuXHRcdFx0XHRcdHVwZGF0ZVBvbHlmaWxsKGVsZW0sIHsgc3JjOiBzcmMgfSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGVsZW0uX2xhenlSYWNlKSB7XG5cdFx0XHRcdGRlbGV0ZSBlbGVtLl9sYXp5UmFjZTtcblx0XHRcdH1cblx0XHRcdHJlbW92ZUNsYXNzKGVsZW0sIGxhenlTaXplc0NvbmZpZy5sYXp5Q2xhc3MpO1xuXG5cdFx0XHRyQUYoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoIWZpcmVzTG9hZCB8fCBlbGVtLmNvbXBsZXRlICYmIGVsZW0ubmF0dXJhbFdpZHRoID4gMSkge1xuXHRcdFx0XHRcdGlmIChmaXJlc0xvYWQpIHtcblx0XHRcdFx0XHRcdHJlc2V0UHJlbG9hZGluZyhldmVudCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzd2l0Y2hMb2FkaW5nQ2xhc3MoZXZlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0cnVlKTtcblx0XHR9KTtcblxuXHRcdHZhciB1bnZlaWxFbGVtZW50ID0gZnVuY3Rpb24gdW52ZWlsRWxlbWVudChlbGVtKSB7XG5cdFx0XHR2YXIgZGV0YWlsO1xuXG5cdFx0XHR2YXIgaXNJbWcgPSByZWdJbWcudGVzdChlbGVtLm5vZGVOYW1lKTtcblxuXHRcdFx0Ly9hbGxvdyB1c2luZyBzaXplcz1cImF1dG9cIiwgYnV0IGRvbid0IHVzZS4gaXQncyBpbnZhbGlkLiBVc2UgZGF0YS1zaXplcz1cImF1dG9cIiBvciBhIHZhbGlkIHZhbHVlIGZvciBzaXplcyBpbnN0ZWFkIChpLmUuOiBzaXplcz1cIjgwdndcIilcblx0XHRcdHZhciBzaXplcyA9IGlzSW1nICYmIChlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NvbmZpZy5zaXplc0F0dHIpIHx8IGVsZW1bX2dldEF0dHJpYnV0ZV0oJ3NpemVzJykpO1xuXHRcdFx0dmFyIGlzQXV0byA9IHNpemVzID09ICdhdXRvJztcblxuXHRcdFx0aWYgKChpc0F1dG8gfHwgIWlzQ29tcGxldGVkKSAmJiBpc0ltZyAmJiAoZWxlbVtfZ2V0QXR0cmlidXRlXSgnc3JjJykgfHwgZWxlbS5zcmNzZXQpICYmICFlbGVtLmNvbXBsZXRlICYmICFoYXNDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDb25maWcuZXJyb3JDbGFzcykgJiYgaGFzQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ29uZmlnLmxhenlDbGFzcykpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRkZXRhaWwgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenl1bnZlaWxyZWFkJykuZGV0YWlsO1xuXG5cdFx0XHRpZiAoaXNBdXRvKSB7XG5cdFx0XHRcdGF1dG9TaXplci51cGRhdGVFbGVtKGVsZW0sIHRydWUsIGVsZW0ub2Zmc2V0V2lkdGgpO1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLl9sYXp5UmFjZSA9IHRydWU7XG5cdFx0XHRpc0xvYWRpbmcrKztcblxuXHRcdFx0bGF6eVVudmVpbChlbGVtLCBkZXRhaWwsIGlzQXV0bywgc2l6ZXMsIGlzSW1nKTtcblx0XHR9O1xuXG5cdFx0dmFyIG9ubG9hZCA9IGZ1bmN0aW9uIG9ubG9hZCgpIHtcblx0XHRcdGlmIChpc0NvbXBsZXRlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0ZWQgPCA5OTkpIHtcblx0XHRcdFx0c2V0VGltZW91dChvbmxvYWQsIDk5OSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciBhZnRlclNjcm9sbCA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0bGF6eVNpemVzQ29uZmlnLmxvYWRNb2RlID0gMztcblx0XHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlzQ29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0bGF6eVNpemVzQ29uZmlnLmxvYWRNb2RlID0gMztcblxuXHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXG5cdFx0XHRhZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChsYXp5U2l6ZXNDb25maWcubG9hZE1vZGUgPT0gMykge1xuXHRcdFx0XHRcdGxhenlTaXplc0NvbmZpZy5sb2FkTW9kZSA9IDI7XG5cdFx0XHRcdH1cblx0XHRcdFx0YWZ0ZXJTY3JvbGwoKTtcblx0XHRcdH0sIHRydWUpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0XzogZnVuY3Rpb24gXygpIHtcblx0XHRcdFx0c3RhcnRlZCA9IERhdGUubm93KCk7XG5cblx0XHRcdFx0bGF6eXNpemVzLmVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShsYXp5U2l6ZXNDb25maWcubGF6eUNsYXNzKTtcblx0XHRcdFx0cHJlbG9hZEVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShsYXp5U2l6ZXNDb25maWcubGF6eUNsYXNzICsgJyAnICsgbGF6eVNpemVzQ29uZmlnLnByZWxvYWRDbGFzcyk7XG5cdFx0XHRcdGhGYWMgPSBsYXp5U2l6ZXNDb25maWcuaEZhYztcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHRpZiAod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcblx0XHRcdFx0XHRuZXcgTXV0YXRpb25PYnNlcnZlcih0aHJvdHRsZWRDaGVja0VsZW1lbnRzKS5vYnNlcnZlKGRvY0VsZW0sIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRvY0VsZW1bX2FkZEV2ZW50TGlzdGVuZXJdKCdET01Ob2RlSW5zZXJ0ZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0XHRkb2NFbGVtW19hZGRFdmVudExpc3RlbmVyXSgnRE9NQXR0ck1vZGlmaWVkJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdFx0c2V0SW50ZXJ2YWwodGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgOTk5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHQvLywgJ2Z1bGxzY3JlZW5jaGFuZ2UnXG5cdFx0XHRcdFsnZm9jdXMnLCAnbW91c2VvdmVyJywgJ2NsaWNrJywgJ2xvYWQnLCAndHJhbnNpdGlvbmVuZCcsICdhbmltYXRpb25lbmQnLCAnd2Via2l0QW5pbWF0aW9uRW5kJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0XHRcdGRvY3VtZW50W19hZGRFdmVudExpc3RlbmVyXShuYW1lLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYgKC9kJHxeYy8udGVzdChkb2N1bWVudC5yZWFkeVN0YXRlKSkge1xuXHRcdFx0XHRcdG9ubG9hZCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbmxvYWQpO1xuXHRcdFx0XHRcdGRvY3VtZW50W19hZGRFdmVudExpc3RlbmVyXSgnRE9NQ29udGVudExvYWRlZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMpO1xuXHRcdFx0XHRcdHNldFRpbWVvdXQob25sb2FkLCAyMDAwMCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobGF6eXNpemVzLmVsZW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRcdGNoZWNrRWxlbWVudHMoKTtcblx0XHRcdFx0XHRyQUYuX2xzRmx1c2goKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRjaGVja0VsZW1zOiB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLFxuXHRcdFx0dW52ZWlsOiB1bnZlaWxFbGVtZW50XG5cdFx0fTtcblx0fSgpO1xuXG5cdHZhciBhdXRvU2l6ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGF1dG9zaXplc0VsZW1zO1xuXG5cdFx0dmFyIHNpemVFbGVtZW50ID0gckFGSXQoZnVuY3Rpb24gKGVsZW0sIHBhcmVudCwgZXZlbnQsIHdpZHRoKSB7XG5cdFx0XHR2YXIgc291cmNlcywgaSwgbGVuO1xuXHRcdFx0ZWxlbS5fbGF6eXNpemVzV2lkdGggPSB3aWR0aDtcblx0XHRcdHdpZHRoICs9ICdweCc7XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzaXplcycsIHdpZHRoKTtcblxuXHRcdFx0aWYgKHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpKSB7XG5cdFx0XHRcdHNvdXJjZXMgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpO1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0c291cmNlc1tpXS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgd2lkdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICghZXZlbnQuZGV0YWlsLmRhdGFBdHRyKSB7XG5cdFx0XHRcdHVwZGF0ZVBvbHlmaWxsKGVsZW0sIGV2ZW50LmRldGFpbCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dmFyIGdldFNpemVFbGVtZW50ID0gZnVuY3Rpb24gZ2V0U2l6ZUVsZW1lbnQoZWxlbSwgZGF0YUF0dHIsIHdpZHRoKSB7XG5cdFx0XHR2YXIgZXZlbnQ7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAocGFyZW50KSB7XG5cdFx0XHRcdHdpZHRoID0gZ2V0V2lkdGgoZWxlbSwgcGFyZW50LCB3aWR0aCk7XG5cdFx0XHRcdGV2ZW50ID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5YmVmb3Jlc2l6ZXMnLCB7IHdpZHRoOiB3aWR0aCwgZGF0YUF0dHI6ICEhZGF0YUF0dHIgfSk7XG5cblx0XHRcdFx0aWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG5cdFx0XHRcdFx0d2lkdGggPSBldmVudC5kZXRhaWwud2lkdGg7XG5cblx0XHRcdFx0XHRpZiAod2lkdGggJiYgd2lkdGggIT09IGVsZW0uX2xhenlzaXplc1dpZHRoKSB7XG5cdFx0XHRcdFx0XHRzaXplRWxlbWVudChlbGVtLCBwYXJlbnQsIGV2ZW50LCB3aWR0aCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciB1cGRhdGVFbGVtZW50c1NpemVzID0gZnVuY3Rpb24gdXBkYXRlRWxlbWVudHNTaXplcygpIHtcblx0XHRcdHZhciBpO1xuXHRcdFx0dmFyIGxlbiA9IGF1dG9zaXplc0VsZW1zLmxlbmd0aDtcblx0XHRcdGlmIChsZW4pIHtcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGdldFNpemVFbGVtZW50KGF1dG9zaXplc0VsZW1zW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyA9IGRlYm91bmNlKHVwZGF0ZUVsZW1lbnRzU2l6ZXMpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdF86IGZ1bmN0aW9uIF8oKSB7XG5cdFx0XHRcdGF1dG9zaXplc0VsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShsYXp5U2l6ZXNDb25maWcuYXV0b3NpemVzQ2xhc3MpO1xuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzKTtcblx0XHRcdH0sXG5cdFx0XHRjaGVja0VsZW1zOiBkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzLFxuXHRcdFx0dXBkYXRlRWxlbTogZ2V0U2l6ZUVsZW1lbnRcblx0XHR9O1xuXHR9KCk7XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuXHRcdGlmICghaW5pdC5pKSB7XG5cdFx0XHRpbml0LmkgPSB0cnVlO1xuXHRcdFx0YXV0b1NpemVyLl8oKTtcblx0XHRcdGxvYWRlci5fKCk7XG5cdFx0fVxuXHR9O1xuXG5cdGxhenlzaXplcyA9IHtcblx0XHRjZmc6IGxhenlTaXplc0NvbmZpZyxcblx0XHRhdXRvU2l6ZXI6IGF1dG9TaXplcixcblx0XHRsb2FkZXI6IGxvYWRlcixcblx0XHRpbml0OiBpbml0LFxuXHRcdHVQOiB1cGRhdGVQb2x5ZmlsbCxcblx0XHRhQzogYWRkQ2xhc3MsXG5cdFx0ckM6IHJlbW92ZUNsYXNzLFxuXHRcdGhDOiBoYXNDbGFzcyxcblx0XHRmaXJlOiB0cmlnZ2VyRXZlbnQsXG5cdFx0Z1c6IGdldFdpZHRoLFxuXHRcdHJBRjogckFGXG5cdH07XG5cblx0cmV0dXJuIGxhenlzaXplcztcbn0pO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oMSkobW9kdWxlKSkpXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbigkKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlYm91bmNlID0gZGVib3VuY2U7XG5leHBvcnRzLnRyaWdnZXJVcGRhdGVUZXh0ID0gdHJpZ2dlclVwZGF0ZVRleHQ7XG5leHBvcnRzLnNjcm9sbFRvRWxlbWVudCA9IHNjcm9sbFRvRWxlbWVudDtcbmV4cG9ydHMuc2Nyb2xsVG9UYXJnZXQgPSBzY3JvbGxUb1RhcmdldDtcbmV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVVRJTElUSUVTXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxyXG4gKiBNb2JpbGUgV2lkdGhcclxuICogVGhpcyBudW1iZXIgaXMgdGhlIHdpZHRoIGluIHdoaWNoIG1vYmlsZSB2aWV3IGtpY2tzIGluLlxyXG4gKi9cbnZhciBtb2JpbGVXaWR0aCA9IGV4cG9ydHMubW9iaWxlV2lkdGggPSA5NjA7XG5cbi8qKlxyXG4gKiBEZWJvdW5jZVxyXG4gKiBGb3IgcmVzaXplIGV2ZW50IHNvIGl0IGRvZXNuJ3QgZmlyZSB0b28gbWFueSB0aW1lcy5cclxuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcblx0dmFyIHRpbWVvdXQgPSB2b2lkIDA7XG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGNvbnRleHQgPSB0aGlzO1xuXHRcdHZhciBhcmdzID0gYXJndW1lbnRzO1xuXHRcdHZhciBsYXRlciA9IGZ1bmN0aW9uIGxhdGVyKCkge1xuXHRcdFx0dGltZW91dCA9IG51bGw7XG5cdFx0XHRpZiAoIWltbWVkaWF0ZSkge1xuXHRcdFx0XHRmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0dmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG5cblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cblx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG5cblx0XHRpZiAoY2FsbE5vdykge1xuXHRcdFx0ZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxyXG4gKiBUcmlnZ2VyIFVwZGF0ZSBUZXh0XHJcbiAqIEBwYXJhbSBPYmplY3QgZWxlbWVudCBUZXh0IGluIHRyaWdnZXIgZWxlbWVudCB0byB1cGRhdGUuXHJcbiAqL1xuZnVuY3Rpb24gdHJpZ2dlclVwZGF0ZVRleHQoZWxlbWVudCkge1xuXHR2YXIgdGV4dE9wZW4gPSBlbGVtZW50LmRhdGEoJ29wZW4nKTtcblx0dmFyIHRleHRDbG9zZSA9IGVsZW1lbnQuZGF0YSgnY2xvc2UnKTtcblxuXHRpZiAoZWxlbWVudC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcblx0XHRlbGVtZW50LnRleHQodGV4dENsb3NlKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtZW50LnRleHQodGV4dE9wZW4pO1xuXHR9XG59XG5cbi8qKlxyXG4gKiBTY3JvbGwgVG8gZWxlbWVudFxyXG4gKlxyXG4gKiBAcGFyYW0gT2JqZWN0IGpRdWVyeVxyXG4gKiBAYXV0aG9yIFBhdWwgQWxsZW5cclxuICovXG5mdW5jdGlvbiBzY3JvbGxUb0VsZW1lbnQoZWxlbWVudCkge1xuXHR2YXIgZWxlbWVudE9mZnNldFRvcCA9IGVsZW1lbnQub2Zmc2V0KCkudG9wO1xuXG5cdCQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcblx0XHRzY3JvbGxUb3A6IGVsZW1lbnRPZmZzZXRUb3Bcblx0fSwgNTAwKTtcbn1cblxuLyoqXHJcbiAqIFNjcm9sbCB0byBFbGVtZW50IGJ5IElEXHJcbiAqXHJcbiAqIEBhdXRob3IgUGF1bCBBbGxlblxyXG4gKiBJbnRlbmRlZCB0byBiZSB1c2VkIG9uIGFuY2hvciB0YWdcclxuICovXG5mdW5jdGlvbiBzY3JvbGxUb1RhcmdldChlKSB7XG5cdGUucHJldmVudERlZmF1bHQoKTtcblx0dmFyICR0aGlzID0gJCh0aGlzKTtcblx0dmFyIGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJyk7XG5cblx0aWYgKCFocmVmLmluY2x1ZGVzKCcjJykpIHJldHVybjsgLy8gQmFpbCBpZiBocmVmIGlzIG5vdCBhIHRhcmdldFxuXG5cdHZhciB0YXJnZXQgPSAkKCcnICsgaHJlZik7XG5cblx0c2Nyb2xsVG9FbGVtZW50KHRhcmdldCk7XG59XG5cbi8qKlxyXG4gKiBFeHRlbmRcclxuICogTWVyZ2UgdHdvIG9iamVjdHNcclxuICovXG5mdW5jdGlvbiBleHRlbmQoKSB7XG5cdC8vIFZhcmlhYmxlc1xuXHR2YXIgZXh0ZW5kZWQgPSB7fTtcblx0dmFyIGRlZXAgPSBmYWxzZTtcblx0dmFyIGkgPSAwO1xuXHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblxuXHQvLyBDaGVjayBpZiBhIGRlZXAgbWVyZ2Vcblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudHNbMF0pID09PSAnW29iamVjdCBCb29sZWFuXScpIHtcblx0XHRkZWVwID0gYXJndW1lbnRzWzBdO1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIE1lcmdlIHRoZSBvYmplY3QgaW50byB0aGUgZXh0ZW5kZWQgb2JqZWN0XG5cdHZhciBtZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKG9iaikge1xuXHRcdGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG5cdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIHtcblx0XHRcdFx0Ly8gSWYgZGVlcCBtZXJnZSBhbmQgcHJvcGVydHkgaXMgYW4gb2JqZWN0LCBtZXJnZSBwcm9wZXJ0aWVzXG5cdFx0XHRcdGlmIChkZWVwICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmpbcHJvcF0pID09PSAnW29iamVjdCBPYmplY3RdJykge1xuXHRcdFx0XHRcdGV4dGVuZGVkW3Byb3BdID0gZXh0ZW5kKHRydWUsIGV4dGVuZGVkW3Byb3BdLCBvYmpbcHJvcF0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGV4dGVuZGVkW3Byb3BdID0gb2JqW3Byb3BdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIExvb3AgdGhyb3VnaCBlYWNoIG9iamVjdCBhbmQgY29uZHVjdCBhIG1lcmdlXG5cdGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgb2JqID0gYXJndW1lbnRzW2ldO1xuXHRcdG1lcmdlKG9iaik7XG5cdH1cblxuXHRyZXR1cm4gZXh0ZW5kZWQ7XG59O1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oMCkpKVxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyohXHJcbiAqIHZlcmdlIDEuMTAuMisyMDE3MDUzMDAwNTBcclxuICogaHR0cDovL25wbS5pbS92ZXJnZVxyXG4gKiBNSVQgUnlhbiBWYW4gRXR0ZW5cclxuICovXG5cbiFmdW5jdGlvbiAocm9vdCwgbmFtZSwgbWFrZSkge1xuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGVbJ2V4cG9ydHMnXSkgbW9kdWxlWydleHBvcnRzJ10gPSBtYWtlKCk7ZWxzZSByb290W25hbWVdID0gbWFrZSgpO1xufSh1bmRlZmluZWQsICd2ZXJnZScsIGZ1bmN0aW9uICgpIHtcblxuICB2YXIgeHBvcnRzID0ge30sXG4gICAgICB3aW4gPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdyxcbiAgICAgIGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudCxcbiAgICAgIGRvY0VsZW0gPSBkb2MgJiYgZG9jLmRvY3VtZW50RWxlbWVudCxcbiAgICAgIG1hdGNoTWVkaWEgPSB3aW5bJ21hdGNoTWVkaWEnXSB8fCB3aW5bJ21zTWF0Y2hNZWRpYSddLFxuICAgICAgbXEgPSBtYXRjaE1lZGlhID8gZnVuY3Rpb24gKHEpIHtcbiAgICByZXR1cm4gISFtYXRjaE1lZGlhLmNhbGwod2luLCBxKS5tYXRjaGVzO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgICAgIHZpZXdwb3J0VyA9IHhwb3J0c1sndmlld3BvcnRXJ10gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGEgPSBkb2NFbGVtWydjbGllbnRXaWR0aCddLFxuICAgICAgICBiID0gd2luWydpbm5lcldpZHRoJ107XG4gICAgcmV0dXJuIGEgPCBiID8gYiA6IGE7XG4gIH0sXG4gICAgICB2aWV3cG9ydEggPSB4cG9ydHNbJ3ZpZXdwb3J0SCddID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhID0gZG9jRWxlbVsnY2xpZW50SGVpZ2h0J10sXG4gICAgICAgIGIgPSB3aW5bJ2lubmVySGVpZ2h0J107XG4gICAgcmV0dXJuIGEgPCBiID8gYiA6IGE7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRlc3QgaWYgYSBtZWRpYSBxdWVyeSBpcyBhY3RpdmUuIExpa2UgTW9kZXJuaXpyLm1xXHJcbiAgICogQHNpbmNlIDEuNi4wXHJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgKi9cbiAgeHBvcnRzWydtcSddID0gbXE7XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZWQgbWF0Y2hNZWRpYVxyXG4gICAqIEBzaW5jZSAxLjYuMFxyXG4gICAqIEByZXR1cm4ge01lZGlhUXVlcnlMaXN0fE9iamVjdH1cclxuICAgKi9cbiAgeHBvcnRzWydtYXRjaE1lZGlhJ10gPSBtYXRjaE1lZGlhID8gZnVuY3Rpb24gKCkge1xuICAgIC8vIG1hdGNoTWVkaWEgbXVzdCBiZSBiaW5kZWQgdG8gd2luZG93XG4gICAgcmV0dXJuIG1hdGNoTWVkaWEuYXBwbHkod2luLCBhcmd1bWVudHMpO1xuICB9IDogZnVuY3Rpb24gKCkge1xuICAgIC8vIEdyYWNlZnVsbHkgZGVncmFkZSB0byBwbGFpbiBvYmplY3RcbiAgICByZXR1cm4ge307XG4gIH07XG5cbiAgLyoqXHJcbiAgICogQHNpbmNlIDEuOC4wXHJcbiAgICogQHJldHVybiB7e3dpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcn19XHJcbiAgICovXG4gIGZ1bmN0aW9uIHZpZXdwb3J0KCkge1xuICAgIHJldHVybiB7ICd3aWR0aCc6IHZpZXdwb3J0VygpLCAnaGVpZ2h0Jzogdmlld3BvcnRIKCkgfTtcbiAgfVxuICB4cG9ydHNbJ3ZpZXdwb3J0J10gPSB2aWV3cG9ydDtcblxuICAvKipcbiAgICogQ3Jvc3MtYnJvd3NlciB3aW5kb3cuc2Nyb2xsWFxyXG4gICAqIEBzaW5jZSAxLjAuMFxyXG4gICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgKi9cbiAgeHBvcnRzWydzY3JvbGxYJ10gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdpbi5wYWdlWE9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbExlZnQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIENyb3NzLWJyb3dzZXIgd2luZG93LnNjcm9sbFlcclxuICAgKiBAc2luY2UgMS4wLjBcclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICovXG4gIHhwb3J0c1snc2Nyb2xsWSddID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB3aW4ucGFnZVlPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxUb3A7XG4gIH07XG5cbiAgLyoqXHJcbiAgICogQHBhcmFtIHt7dG9wOm51bWJlciwgcmlnaHQ6bnVtYmVyLCBib3R0b206bnVtYmVyLCBsZWZ0Om51bWJlcn19IGNvb3Jkc1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gY3VzaGlvbiBhZGp1c3RtZW50XHJcbiAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAqL1xuICBmdW5jdGlvbiBjYWxpYnJhdGUoY29vcmRzLCBjdXNoaW9uKSB7XG4gICAgdmFyIG8gPSB7fTtcbiAgICBjdXNoaW9uID0gK2N1c2hpb24gfHwgMDtcbiAgICBvWyd3aWR0aCddID0gKG9bJ3JpZ2h0J10gPSBjb29yZHNbJ3JpZ2h0J10gKyBjdXNoaW9uKSAtIChvWydsZWZ0J10gPSBjb29yZHNbJ2xlZnQnXSAtIGN1c2hpb24pO1xuICAgIG9bJ2hlaWdodCddID0gKG9bJ2JvdHRvbSddID0gY29vcmRzWydib3R0b20nXSArIGN1c2hpb24pIC0gKG9bJ3RvcCddID0gY29vcmRzWyd0b3AnXSAtIGN1c2hpb24pO1xuICAgIHJldHVybiBvO1xuICB9XG5cbiAgLyoqXHJcbiAgICogQ3Jvc3MtYnJvd3NlciBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCBwbHVzIG9wdGlvbmFsIGN1c2hpb24uXHJcbiAgICogQ29vcmRzIGFyZSByZWxhdGl2ZSB0byB0aGUgdG9wLWxlZnQgY29ybmVyIG9mIHRoZSB2aWV3cG9ydC5cclxuICAgKiBAc2luY2UgMS4wLjBcclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbCBlbGVtZW50IG9yIHN0YWNrICh1c2VzIGZpcnN0IGl0ZW0pXHJcbiAgICogQHBhcmFtIHtudW1iZXI9fSBjdXNoaW9uICsvLSBwaXhlbCBhZGp1c3RtZW50IGFtb3VudFxyXG4gICAqIEByZXR1cm4ge09iamVjdHxib29sZWFufVxyXG4gICAqL1xuICBmdW5jdGlvbiByZWN0YW5nbGUoZWwsIGN1c2hpb24pIHtcbiAgICBlbCA9IGVsICYmICFlbC5ub2RlVHlwZSA/IGVsWzBdIDogZWw7XG4gICAgaWYgKCFlbCB8fCAxICE9PSBlbC5ub2RlVHlwZSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBjYWxpYnJhdGUoZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGN1c2hpb24pO1xuICB9XG4gIHhwb3J0c1sncmVjdGFuZ2xlJ10gPSByZWN0YW5nbGU7XG5cbiAgLyoqXHJcbiAgICogR2V0IHRoZSB2aWV3cG9ydCBhc3BlY3QgcmF0aW8gKG9yIHRoZSBhc3BlY3QgcmF0aW8gb2YgYW4gb2JqZWN0IG9yIGVsZW1lbnQpXHJcbiAgICogQHNpbmNlIDEuNy4wXHJcbiAgICogQHBhcmFtIHsoRWxlbWVudHxPYmplY3QpPX0gbyBvcHRpb25hbCBvYmplY3Qgd2l0aCB3aWR0aC9oZWlnaHQgcHJvcHMgb3IgbWV0aG9kc1xyXG4gICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgKiBAbGluayBodHRwOi8vdzMub3JnL1RSL2NzczMtbWVkaWFxdWVyaWVzLyNvcmllbnRhdGlvblxyXG4gICAqL1xuICBmdW5jdGlvbiBhc3BlY3Qobykge1xuICAgIG8gPSBudWxsID09IG8gPyB2aWV3cG9ydCgpIDogMSA9PT0gby5ub2RlVHlwZSA/IHJlY3RhbmdsZShvKSA6IG87XG4gICAgdmFyIGggPSBvWydoZWlnaHQnXSxcbiAgICAgICAgdyA9IG9bJ3dpZHRoJ107XG4gICAgaCA9IHR5cGVvZiBoID09ICdmdW5jdGlvbicgPyBoLmNhbGwobykgOiBoO1xuICAgIHcgPSB0eXBlb2YgdyA9PSAnZnVuY3Rpb24nID8gdy5jYWxsKG8pIDogdztcbiAgICByZXR1cm4gdyAvIGg7XG4gIH1cbiAgeHBvcnRzWydhc3BlY3QnXSA9IGFzcGVjdDtcblxuICAvKipcclxuICAgKiBUZXN0IGlmIGFuIGVsZW1lbnQgaXMgaW4gdGhlIHNhbWUgeC1heGlzIHNlY3Rpb24gYXMgdGhlIHZpZXdwb3J0LlxyXG4gICAqIEBzaW5jZSAxLjAuMFxyXG4gICAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsXHJcbiAgICogQHBhcmFtIHtudW1iZXI9fSBjdXNoaW9uXHJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgKi9cbiAgeHBvcnRzWydpblgnXSA9IGZ1bmN0aW9uIChlbCwgY3VzaGlvbikge1xuICAgIHZhciByID0gcmVjdGFuZ2xlKGVsLCBjdXNoaW9uKTtcbiAgICByZXR1cm4gISFyICYmIHIucmlnaHQgPj0gMCAmJiByLmxlZnQgPD0gdmlld3BvcnRXKCk7XG4gIH07XG5cbiAgLyoqXHJcbiAgICogVGVzdCBpZiBhbiBlbGVtZW50IGlzIGluIHRoZSBzYW1lIHktYXhpcyBzZWN0aW9uIGFzIHRoZSB2aWV3cG9ydC5cclxuICAgKiBAc2luY2UgMS4wLjBcclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gY3VzaGlvblxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICovXG4gIHhwb3J0c1snaW5ZJ10gPSBmdW5jdGlvbiAoZWwsIGN1c2hpb24pIHtcbiAgICB2YXIgciA9IHJlY3RhbmdsZShlbCwgY3VzaGlvbik7XG4gICAgcmV0dXJuICEhciAmJiByLmJvdHRvbSA+PSAwICYmIHIudG9wIDw9IHZpZXdwb3J0SCgpO1xuICB9O1xuXG4gIC8qKlxyXG4gICAqIFRlc3QgaWYgYW4gZWxlbWVudCBpcyBpbiB0aGUgdmlld3BvcnQuXHJcbiAgICogQHNpbmNlIDEuMC4wXHJcbiAgICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxcclxuICAgKiBAcGFyYW0ge251bWJlcj19IGN1c2hpb25cclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAqL1xuICB4cG9ydHNbJ2luVmlld3BvcnQnXSA9IGZ1bmN0aW9uIChlbCwgY3VzaGlvbikge1xuICAgIC8vIEVxdWl2IHRvIGBpblgoZWwsIGN1c2hpb24pICYmIGluWShlbCwgY3VzaGlvbilgIGJ1dCBqdXN0IG1hbnVhbGx5IGRvIGJvdGhcbiAgICAvLyB0byBhdm9pZCBjYWxsaW5nIHJlY3RhbmdsZSgpIHR3aWNlLiBJdCBnemlwcyBqdXN0IGFzIHNtYWxsIGxpa2UgdGhpcy5cbiAgICB2YXIgciA9IHJlY3RhbmdsZShlbCwgY3VzaGlvbik7XG4gICAgcmV0dXJuICEhciAmJiByLmJvdHRvbSA+PSAwICYmIHIucmlnaHQgPj0gMCAmJiByLnRvcCA8PSB2aWV3cG9ydEgoKSAmJiByLmxlZnQgPD0gdmlld3BvcnRXKCk7XG4gIH07XG5cbiAgcmV0dXJuIHhwb3J0cztcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRGV0ZWN0RWRnZSA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsgLyoqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBEZXRlY3QgRWRnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cblxudmFyIF91dGlsaXRpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcclxuICogRGV0ZWN0IEVkZ2VcclxuICogQHBhcmFtIFN0cmluZyBzZWxlY3RvclxyXG4gKiBAcGFyYW0gSW50ZWdlciBidWZmZXIob3B0aW9uYWwpIEhvdyBjbG9zZSB0byBlZGdlIGNhbiBlbGVtZW50cyBnZXQgYmVmb3JlIGVkZ2UgZGV0ZWN0b3IgY2xhc3MgaXMgYWRkZWQuXHJcbiAqL1xudmFyIERldGVjdEVkZ2UgPSBleHBvcnRzLkRldGVjdEVkZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdGZ1bmN0aW9uIERldGVjdEVkZ2Uoc2VsZWN0b3IsIGJ1ZmZlcikge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXRlY3RFZGdlKTtcblxuXHRcdHRoaXMuYnVmZmVyID0gYnVmZmVyIHx8IDA7XG5cdFx0dGhpcy5lbGVtZW50cyA9IHRoaXMuZ2V0RWxlbWVudHMoc2VsZWN0b3IpO1xuXG5cdFx0dGhpcy5tYWluKCk7XG5cdH1cblxuXHQvKipcclxuICAqIE1haW5cclxuICAqL1xuXG5cblx0X2NyZWF0ZUNsYXNzKERldGVjdEVkZ2UsIFt7XG5cdFx0a2V5OiAnbWFpbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIG1haW4oKSB7XG5cdFx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdFx0XHRpZiAodGhpcy5lbGVtZW50cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRoaXMuY2hlY2tFbGVtZW50cygpO1xuXG5cdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdF90aGlzLmNoZWNrRWxlbWVudHMoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQ2hlY2sgaWYgZWxlbWVudHMgYXJlIHRvdWNoaW5nIHdpbmRvdydzIGVkZ2UgKG1pbnVzIGJ1ZmZlcilcclxuICAgKi9cblxuXHR9LCB7XG5cdFx0a2V5OiAnY2hlY2tFbGVtZW50cycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNoZWNrRWxlbWVudHMoKSB7XG5cdFx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdFx0dGhpcy5yZW1vdmVFZGdlQ2xhc3NlcygpO1xuXG5cdFx0XHR2YXIgd2luZG93V2lkdGggPSB0aGlzLmdldFdpbmRvd1dpZHRoKCk7XG5cblx0XHRcdHRoaXMuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcblx0XHRcdFx0dmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0XHRpZiAocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCArIF90aGlzMi5idWZmZXIgPiB3aW5kb3dXaWR0aCkge1xuXHRcdFx0XHRcdC8vIGVsIGlzIHRvdWNoaW5nIHJpZ2h0IGVkZ2Vcblx0XHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKCdyaWdodC1lZGdlJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocmVjdC5sZWZ0IDw9IF90aGlzMi5idWZmZXIpIHtcblx0XHRcdFx0XHQvLyBlbCBpcyB0b3VjaGluZyBsZWZ0IGVkZ2Vcblx0XHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKCdsZWZ0LWVkZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogUmVtb3ZlIEVkZ2UgQ2xhc3Nlc1xyXG4gICAqIFJlbW92ZSB0aGUgY2xhc3NlcyBhZGRlZCBieSBjaGVja0VsZW1lbnRzLlxyXG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICdyZW1vdmVFZGdlQ2xhc3NlcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUVkZ2VDbGFzc2VzKCkge1xuXHRcdFx0dGhpcy5lbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0XHRlbC5jbGFzc0xpc3QucmVtb3ZlKCdyaWdodC1lZGdlJyk7XG5cdFx0XHRcdGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2xlZnQtZWRnZScpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogR2V0IFdpbmRvdyBTaXplXHJcbiAgICovXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFdpbmRvd1dpZHRoJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0V2luZG93V2lkdGgoKSB7XG5cdFx0XHRyZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogR2V0IEVsZW1lbnRzXHJcbiAgICovXG5cblx0fSwge1xuXHRcdGtleTogJ2dldEVsZW1lbnRzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudHMoc2VsZWN0b3IpIHtcblx0XHRcdHJldHVybiBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gRGV0ZWN0RWRnZTtcbn0oKTtcblxuLyoqKi8gfSksXG4vKiA2ICovLFxuLyogNyAqLyxcbi8qIDggKi8sXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbi8qKlxuICogU29tZSB2ZXJzaW9ucyBvZiBpT1MgKDguMS0pIGRvIGxvYWQgdGhlIGZpcnN0IGNhbmRpZGF0ZSBvZiBhIHNyY3NldCBjYW5kaWRhdGUgbGlzdCwgaWYgd2lkdGggZGVzY3JpcHRvcnMgd2l0aCB0aGUgc2l6ZXMgYXR0cmlidXRlIGlzIHVzZWQuXG4gKiBUaGlzIHRpbnkgZXh0ZW5zaW9uIHByZXZlbnRzIHRoaXMgd2FzdGVkIGRvd25sb2FkIGJ5IGNyZWF0aW5nIGEgcGljdHVyZSBzdHJ1Y3R1cmUgYXJvdW5kIHRoZSBpbWFnZS5cbiAqIE5vdGU6IFRoaXMgZXh0ZW5zaW9uIGlzIGFscmVhZHkgaW5jbHVkZWQgaW4gdGhlIGxzLnJlc3BpbWcuanMgZmlsZS5cbiAqXG4gKiBVc2FnZTpcbiAqXG4gKiA8aW1nXG4gKiBcdGNsYXNzPVwibGF6eWxvYWRcIlxuICogXHRkYXRhLXNpemVzPVwiYXV0b1wiXG4gKiBcdGRhdGEtc3Jjc2V0PVwic21hbGwuanBnIDY0MHB4LFxuICogXHRcdG1lZGl1bS5qcGcgOTgwdyxcbiAqIFx0XHRsYXJnZS5qcGcgMTI4MHdcIlxuICogXHQvPlxuICovXG5cbihmdW5jdGlvbiAod2luZG93LCBmYWN0b3J5KSB7XG5cdHZhciBnbG9iYWxJbnN0YWxsID0gZnVuY3Rpb24gZ2xvYmFsSW5zdGFsbCgpIHtcblx0XHRmYWN0b3J5KHdpbmRvdy5sYXp5U2l6ZXMpO1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsYXp5dW52ZWlscmVhZCcsIGdsb2JhbEluc3RhbGwsIHRydWUpO1xuXHR9O1xuXG5cdGZhY3RvcnkgPSBmYWN0b3J5LmJpbmQobnVsbCwgd2luZG93LCB3aW5kb3cuZG9jdW1lbnQpO1xuXG5cdGlmICgoIGZhbHNlID8gdW5kZWZpbmVkIDogX3R5cGVvZihtb2R1bGUpKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGZhY3RvcnkoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7XG5cdH0gZWxzZSBpZiAod2luZG93LmxhenlTaXplcykge1xuXHRcdGdsb2JhbEluc3RhbGwoKTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbGF6eXVudmVpbHJlYWQnLCBnbG9iYWxJbnN0YWxsLCB0cnVlKTtcblx0fVxufSkod2luZG93LCBmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgbGF6eVNpemVzKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgcmVnUGljdHVyZTtcblx0dmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG5cdGlmICgnc3Jjc2V0JyBpbiBpbWcgJiYgISgnc2l6ZXMnIGluIGltZykgJiYgIXdpbmRvdy5IVE1MUGljdHVyZUVsZW1lbnQpIHtcblx0XHRyZWdQaWN0dXJlID0gL15waWN0dXJlJC9pO1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenliZWZvcmV1bnZlaWwnLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0aWYgKGUuZGV0YWlsLmluc3RhbmNlICE9IGxhenlTaXplcykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBlbGVtLCBwYXJlbnQsIHNyY3NldCwgc2l6ZXMsIGlzUGljdHVyZTtcblx0XHRcdHZhciBwaWN0dXJlLCBzb3VyY2U7XG5cdFx0XHRpZiAoZS5kZWZhdWx0UHJldmVudGVkIHx8IGxhenlTaXplc0NvbmZpZy5ub0lPU0ZpeCB8fCAhKGVsZW0gPSBlLnRhcmdldCkgfHwgIShzcmNzZXQgPSBlbGVtLmdldEF0dHJpYnV0ZShsYXp5U2l6ZXNDb25maWcuc3Jjc2V0QXR0cikpIHx8ICEocGFyZW50ID0gZWxlbS5wYXJlbnROb2RlKSB8fCAhKGlzUGljdHVyZSA9IHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpKSAmJiAhKHNpemVzID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ3NpemVzJykgfHwgZWxlbS5nZXRBdHRyaWJ1dGUobGF6eVNpemVzQ29uZmlnLnNpemVzQXR0cikpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cGljdHVyZSA9IGlzUGljdHVyZSA/IHBhcmVudCA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3BpY3R1cmUnKTtcblxuXHRcdFx0aWYgKCFlbGVtLl9sYXp5SW1nU3JjKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtLCAnX2xhenlJbWdTcmMnLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0c291cmNlID0gZWxlbS5fbGF6eUltZ1NyYztcblxuXHRcdFx0aWYgKHNpemVzKSB7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgc2l6ZXMpO1xuXHRcdFx0fVxuXG5cdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zcmNzZXRBdHRyLCBzcmNzZXQpO1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGZzcmNzZXQnLCBzcmNzZXQpO1xuXHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUobGF6eVNpemVzQ29uZmlnLnNyY3NldEF0dHIpO1xuXG5cdFx0XHRpZiAoIWlzUGljdHVyZSkge1xuXHRcdFx0XHRwYXJlbnQuaW5zZXJ0QmVmb3JlKHBpY3R1cmUsIGVsZW0pO1xuXHRcdFx0XHRwaWN0dXJlLmFwcGVuZENoaWxkKGVsZW0pO1xuXHRcdFx0fVxuXHRcdFx0cGljdHVyZS5pbnNlcnRCZWZvcmUoc291cmNlLCBlbGVtKTtcblx0XHR9KTtcblx0fVxufSk7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygxKShtb2R1bGUpKSlcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihtb2R1bGUpIHtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4oZnVuY3Rpb24gKHdpbmRvdywgZmFjdG9yeSkge1xuXHR2YXIgZ2xvYmFsSW5zdGFsbCA9IGZ1bmN0aW9uIGdsb2JhbEluc3RhbGwoKSB7XG5cdFx0ZmFjdG9yeSh3aW5kb3cubGF6eVNpemVzKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGF6eXVudmVpbHJlYWQnLCBnbG9iYWxJbnN0YWxsLCB0cnVlKTtcblx0fTtcblxuXHRmYWN0b3J5ID0gZmFjdG9yeS5iaW5kKG51bGwsIHdpbmRvdywgd2luZG93LmRvY3VtZW50KTtcblxuXHRpZiAoKCBmYWxzZSA/IHVuZGVmaW5lZCA6IF90eXBlb2YobW9kdWxlKSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMiksIF9fd2VicGFja19yZXF1aXJlX18oOSkpO1xuXHR9IGVsc2UgaWYgKHdpbmRvdy5sYXp5U2l6ZXMpIHtcblx0XHRnbG9iYWxJbnN0YWxsKCk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH1cbn0pKHdpbmRvdywgZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsIGxhenlTaXplcykge1xuXHQvKmpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIHBvbHlmaWxsO1xuXHR2YXIgY29uZmlnID0gbGF6eVNpemVzICYmIGxhenlTaXplcy5jZmcgfHwgd2luZG93LmxhenlTaXplc0NvbmZpZztcblx0dmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHR2YXIgc3VwcG9ydFNyY3NldCA9ICdzaXplcycgaW4gaW1nICYmICdzcmNzZXQnIGluIGltZztcblx0dmFyIHJlZ0hEZXNjID0gL1xccytcXGQraC9nO1xuXHR2YXIgZml4RWRnZUhEZXNjcmlwdG9yID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciByZWdEZXNjcmlwdG9ycyA9IC9cXHMrKFxcZCspKHd8aClcXHMrKFxcZCspKHd8aCkvO1xuXHRcdHZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gKGVkZ2VNYXRjaCkge1xuXHRcdFx0dmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHRcdFx0dmFyIHJlbW92ZUhEZXNjcmlwdG9ycyA9IGZ1bmN0aW9uIHJlbW92ZUhEZXNjcmlwdG9ycyhzb3VyY2UpIHtcblx0XHRcdFx0dmFyIHJhdGlvLCBtYXRjaDtcblx0XHRcdFx0dmFyIHNyY3NldCA9IHNvdXJjZS5nZXRBdHRyaWJ1dGUobGF6eVNpemVzQ29uZmlnLnNyY3NldEF0dHIpO1xuXHRcdFx0XHRpZiAoc3Jjc2V0KSB7XG5cdFx0XHRcdFx0aWYgKG1hdGNoID0gc3Jjc2V0Lm1hdGNoKHJlZ0Rlc2NyaXB0b3JzKSkge1xuXHRcdFx0XHRcdFx0aWYgKG1hdGNoWzJdID09ICd3Jykge1xuXHRcdFx0XHRcdFx0XHRyYXRpbyA9IG1hdGNoWzFdIC8gbWF0Y2hbM107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyYXRpbyA9IG1hdGNoWzNdIC8gbWF0Y2hbMV07XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChyYXRpbykge1xuXHRcdFx0XHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKCdkYXRhLWFzcGVjdHJhdGlvJywgcmF0aW8pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zcmNzZXRBdHRyLCBzcmNzZXQucmVwbGFjZShyZWdIRGVzYywgJycpKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihlKSB7XG5cdFx0XHRcdHZhciBwaWN0dXJlID0gZS50YXJnZXQucGFyZW50Tm9kZTtcblxuXHRcdFx0XHRpZiAocGljdHVyZSAmJiBwaWN0dXJlLm5vZGVOYW1lID09ICdQSUNUVVJFJykge1xuXHRcdFx0XHRcdGZvckVhY2guY2FsbChwaWN0dXJlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKSwgcmVtb3ZlSERlc2NyaXB0b3JzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZW1vdmVIRGVzY3JpcHRvcnMoZS50YXJnZXQpO1xuXHRcdFx0fTtcblxuXHRcdFx0dmFyIHRlc3QgPSBmdW5jdGlvbiB0ZXN0KCkge1xuXHRcdFx0XHRpZiAoISFpbWcuY3VycmVudFNyYykge1xuXHRcdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xhenliZWZvcmV1bnZlaWwnLCBoYW5kbGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKGVkZ2VNYXRjaFsxXSkge1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdsYXp5YmVmb3JldW52ZWlsJywgaGFuZGxlcik7XG5cblx0XHRcdFx0aWYgKHRydWUpIHtcblx0XHRcdFx0XHRpbWcub25sb2FkID0gdGVzdDtcblx0XHRcdFx0XHRpbWcub25lcnJvciA9IHRlc3Q7XG5cblx0XHRcdFx0XHRpbWcuc3Jjc2V0ID0gJ2RhdGE6LGEgMXcgMWgnO1xuXG5cdFx0XHRcdFx0aWYgKGltZy5jb21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0dGVzdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0oKTtcblxuXHRpZiAoIWNvbmZpZykge1xuXHRcdGNvbmZpZyA9IHt9O1xuXHRcdHdpbmRvdy5sYXp5U2l6ZXNDb25maWcgPSBjb25maWc7XG5cdH1cblxuXHRpZiAoIWNvbmZpZy5zdXBwb3J0c1R5cGUpIHtcblx0XHRjb25maWcuc3VwcG9ydHNUeXBlID0gZnVuY3Rpb24gKHR5cGUgLyosIGVsZW0qLykge1xuXHRcdFx0cmV0dXJuICF0eXBlO1xuXHRcdH07XG5cdH1cblxuXHRpZiAod2luZG93LnBpY3R1cmVmaWxsIHx8IGNvbmZpZy5wZikge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICh3aW5kb3cuSFRNTFBpY3R1cmVFbGVtZW50ICYmIHN1cHBvcnRTcmNzZXQpIHtcblxuXHRcdGlmIChkb2N1bWVudC5tc0VsZW1lbnRzRnJvbVBvaW50KSB7XG5cdFx0XHRmaXhFZGdlSERlc2NyaXB0b3IobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pKTtcblx0XHR9XG5cblx0XHRjb25maWcucGYgPSBmdW5jdGlvbiAoKSB7fTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25maWcucGYgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHRcdHZhciBpLCBsZW47XG5cdFx0aWYgKHdpbmRvdy5waWN0dXJlZmlsbCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBvcHRpb25zLmVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRwb2x5ZmlsbChvcHRpb25zLmVsZW1lbnRzW2ldKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gcGFydGlhbCBwb2x5ZmlsbFxuXHRwb2x5ZmlsbCA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgYXNjZW5kaW5nU29ydCA9IGZ1bmN0aW9uIGFzY2VuZGluZ1NvcnQoYSwgYikge1xuXHRcdFx0cmV0dXJuIGEudyAtIGIudztcblx0XHR9O1xuXHRcdHZhciByZWdQeExlbmd0aCA9IC9eXFxzKlxcZCtcXC4qXFxkKnB4XFxzKiQvO1xuXHRcdHZhciByZWR1Y2VDYW5kaWRhdGUgPSBmdW5jdGlvbiByZWR1Y2VDYW5kaWRhdGUoc3JjZXMpIHtcblx0XHRcdHZhciBsb3dlckNhbmRpZGF0ZSwgYm9udXNGYWN0b3I7XG5cdFx0XHR2YXIgbGVuID0gc3JjZXMubGVuZ3RoO1xuXHRcdFx0dmFyIGNhbmRpZGF0ZSA9IHNyY2VzW2xlbiAtIDFdO1xuXHRcdFx0dmFyIGkgPSAwO1xuXG5cdFx0XHRmb3IgKGk7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRjYW5kaWRhdGUgPSBzcmNlc1tpXTtcblx0XHRcdFx0Y2FuZGlkYXRlLmQgPSBjYW5kaWRhdGUudyAvIHNyY2VzLnc7XG5cblx0XHRcdFx0aWYgKGNhbmRpZGF0ZS5kID49IHNyY2VzLmQpIHtcblx0XHRcdFx0XHRpZiAoIWNhbmRpZGF0ZS5jYWNoZWQgJiYgKGxvd2VyQ2FuZGlkYXRlID0gc3JjZXNbaSAtIDFdKSAmJiBsb3dlckNhbmRpZGF0ZS5kID4gc3JjZXMuZCAtIDAuMTMgKiBNYXRoLnBvdyhzcmNlcy5kLCAyLjIpKSB7XG5cblx0XHRcdFx0XHRcdGJvbnVzRmFjdG9yID0gTWF0aC5wb3cobG93ZXJDYW5kaWRhdGUuZCAtIDAuNiwgMS42KTtcblxuXHRcdFx0XHRcdFx0aWYgKGxvd2VyQ2FuZGlkYXRlLmNhY2hlZCkge1xuXHRcdFx0XHRcdFx0XHRsb3dlckNhbmRpZGF0ZS5kICs9IDAuMTUgKiBib251c0ZhY3Rvcjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKGxvd2VyQ2FuZGlkYXRlLmQgKyAoY2FuZGlkYXRlLmQgLSBzcmNlcy5kKSAqIGJvbnVzRmFjdG9yID4gc3JjZXMuZCkge1xuXHRcdFx0XHRcdFx0XHRjYW5kaWRhdGUgPSBsb3dlckNhbmRpZGF0ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjYW5kaWRhdGU7XG5cdFx0fTtcblxuXHRcdHZhciBwYXJzZVdzcmNzZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgY2FuZGlkYXRlcztcblx0XHRcdHZhciByZWdXQ2FuZGlkYXRlcyA9IC8oKFteLFxcc10uW15cXHNdKylcXHMrKFxcZCspdykvZztcblx0XHRcdHZhciByZWdNdWx0aXBsZSA9IC9cXHMvO1xuXHRcdFx0dmFyIGFkZENhbmRpZGF0ZSA9IGZ1bmN0aW9uIGFkZENhbmRpZGF0ZShtYXRjaCwgY2FuZGlkYXRlLCB1cmwsIHdEZXNjcmlwdG9yKSB7XG5cdFx0XHRcdGNhbmRpZGF0ZXMucHVzaCh7XG5cdFx0XHRcdFx0YzogY2FuZGlkYXRlLFxuXHRcdFx0XHRcdHU6IHVybCxcblx0XHRcdFx0XHR3OiB3RGVzY3JpcHRvciAqIDFcblx0XHRcdFx0fSk7XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG5cdFx0XHRcdGNhbmRpZGF0ZXMgPSBbXTtcblx0XHRcdFx0aW5wdXQgPSBpbnB1dC50cmltKCk7XG5cdFx0XHRcdGlucHV0LnJlcGxhY2UocmVnSERlc2MsICcnKS5yZXBsYWNlKHJlZ1dDYW5kaWRhdGVzLCBhZGRDYW5kaWRhdGUpO1xuXG5cdFx0XHRcdGlmICghY2FuZGlkYXRlcy5sZW5ndGggJiYgaW5wdXQgJiYgIXJlZ011bHRpcGxlLnRlc3QoaW5wdXQpKSB7XG5cdFx0XHRcdFx0Y2FuZGlkYXRlcy5wdXNoKHtcblx0XHRcdFx0XHRcdGM6IGlucHV0LFxuXHRcdFx0XHRcdFx0dTogaW5wdXQsXG5cdFx0XHRcdFx0XHR3OiA5OVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGNhbmRpZGF0ZXM7XG5cdFx0XHR9O1xuXHRcdH0oKTtcblxuXHRcdHZhciBydW5NYXRjaE1lZGlhID0gZnVuY3Rpb24gcnVuTWF0Y2hNZWRpYSgpIHtcblx0XHRcdGlmIChydW5NYXRjaE1lZGlhLmluaXQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRydW5NYXRjaE1lZGlhLmluaXQgPSB0cnVlO1xuXHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgdGltZXI7XG5cdFx0XHRcdHZhciBtYXRjaE1lZGlhRWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsYXp5bWF0Y2htZWRpYScpO1xuXHRcdFx0XHR2YXIgcnVuID0gZnVuY3Rpb24gcnVuKCkge1xuXHRcdFx0XHRcdHZhciBpLCBsZW47XG5cdFx0XHRcdFx0Zm9yIChpID0gMCwgbGVuID0gbWF0Y2hNZWRpYUVsZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0XHRwb2x5ZmlsbChtYXRjaE1lZGlhRWxlbXNbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lcik7XG5cdFx0XHRcdFx0dGltZXIgPSBzZXRUaW1lb3V0KHJ1biwgNjYpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSgpKTtcblx0XHR9O1xuXG5cdFx0dmFyIGNyZWF0ZVNyY3NldCA9IGZ1bmN0aW9uIGNyZWF0ZVNyY3NldChlbGVtLCBpc0ltYWdlKSB7XG5cdFx0XHR2YXIgcGFyc2VkU2V0O1xuXHRcdFx0dmFyIHNyY1NldCA9IGVsZW0uZ2V0QXR0cmlidXRlKCdzcmNzZXQnKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShjb25maWcuc3Jjc2V0QXR0cik7XG5cblx0XHRcdGlmICghc3JjU2V0ICYmIGlzSW1hZ2UpIHtcblx0XHRcdFx0c3JjU2V0ID0gIWVsZW0uX2xhenlwb2x5ZmlsbCA/IGVsZW0uZ2V0QXR0cmlidXRlKGNvbmZpZy5zcmNBdHRyKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSgnc3JjJykgOiBlbGVtLl9sYXp5cG9seWZpbGwuX3NldDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFlbGVtLl9sYXp5cG9seWZpbGwgfHwgZWxlbS5fbGF6eXBvbHlmaWxsLl9zZXQgIT0gc3JjU2V0KSB7XG5cblx0XHRcdFx0cGFyc2VkU2V0ID0gcGFyc2VXc3Jjc2V0KHNyY1NldCB8fCAnJyk7XG5cdFx0XHRcdGlmIChpc0ltYWdlICYmIGVsZW0ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdHBhcnNlZFNldC5pc1BpY3R1cmUgPSBlbGVtLnBhcmVudE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PSAnUElDVFVSRSc7XG5cblx0XHRcdFx0XHRpZiAocGFyc2VkU2V0LmlzUGljdHVyZSkge1xuXHRcdFx0XHRcdFx0aWYgKHdpbmRvdy5tYXRjaE1lZGlhKSB7XG5cdFx0XHRcdFx0XHRcdGxhenlTaXplcy5hQyhlbGVtLCAnbGF6eW1hdGNobWVkaWEnKTtcblx0XHRcdFx0XHRcdFx0cnVuTWF0Y2hNZWRpYSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHBhcnNlZFNldC5fc2V0ID0gc3JjU2V0O1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbSwgJ19sYXp5cG9seWZpbGwnLCB7XG5cdFx0XHRcdFx0dmFsdWU6IHBhcnNlZFNldCxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGdldFggPSBmdW5jdGlvbiBnZXRYKGVsZW0pIHtcblx0XHRcdHZhciBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXHRcdFx0dmFyIG9wdGltdW0gPSBsYXp5U2l6ZXMuZ2V0WCAmJiBsYXp5U2l6ZXMuZ2V0WChlbGVtKTtcblx0XHRcdHJldHVybiBNYXRoLm1pbihvcHRpbXVtIHx8IGRwciwgMi41LCBkcHIpO1xuXHRcdH07XG5cblx0XHR2YXIgX21hdGNoZXNNZWRpYSA9IGZ1bmN0aW9uIG1hdGNoZXNNZWRpYShtZWRpYSkge1xuXHRcdFx0aWYgKHdpbmRvdy5tYXRjaE1lZGlhKSB7XG5cdFx0XHRcdF9tYXRjaGVzTWVkaWEgPSBmdW5jdGlvbiBtYXRjaGVzTWVkaWEobWVkaWEpIHtcblx0XHRcdFx0XHRyZXR1cm4gIW1lZGlhIHx8IChtYXRjaE1lZGlhKG1lZGlhKSB8fCB7fSkubWF0Y2hlcztcblx0XHRcdFx0fTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAhbWVkaWE7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBfbWF0Y2hlc01lZGlhKG1lZGlhKTtcblx0XHR9O1xuXG5cdFx0dmFyIGdldENhbmRpZGF0ZSA9IGZ1bmN0aW9uIGdldENhbmRpZGF0ZShlbGVtKSB7XG5cdFx0XHR2YXIgc291cmNlcywgaSwgbGVuLCBtZWRpYSwgc291cmNlLCBzcmNlcywgc3JjLCB3aWR0aDtcblxuXHRcdFx0c291cmNlID0gZWxlbTtcblx0XHRcdGNyZWF0ZVNyY3NldChzb3VyY2UsIHRydWUpO1xuXHRcdFx0c3JjZXMgPSBzb3VyY2UuX2xhenlwb2x5ZmlsbDtcblxuXHRcdFx0aWYgKHNyY2VzLmlzUGljdHVyZSkge1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBzb3VyY2VzID0gZWxlbS5wYXJlbnROb2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKSwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGlmIChjb25maWcuc3VwcG9ydHNUeXBlKHNvdXJjZXNbaV0uZ2V0QXR0cmlidXRlKCd0eXBlJyksIGVsZW0pICYmIF9tYXRjaGVzTWVkaWEoc291cmNlc1tpXS5nZXRBdHRyaWJ1dGUoJ21lZGlhJykpKSB7XG5cdFx0XHRcdFx0XHRzb3VyY2UgPSBzb3VyY2VzW2ldO1xuXHRcdFx0XHRcdFx0Y3JlYXRlU3Jjc2V0KHNvdXJjZSk7XG5cdFx0XHRcdFx0XHRzcmNlcyA9IHNvdXJjZS5fbGF6eXBvbHlmaWxsO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzcmNlcy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdHdpZHRoID0gc291cmNlLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSB8fCAnJztcblx0XHRcdFx0d2lkdGggPSByZWdQeExlbmd0aC50ZXN0KHdpZHRoKSAmJiBwYXJzZUludCh3aWR0aCwgMTApIHx8IGxhenlTaXplcy5nVyhlbGVtLCBlbGVtLnBhcmVudE5vZGUpO1xuXHRcdFx0XHRzcmNlcy5kID0gZ2V0WChlbGVtKTtcblx0XHRcdFx0aWYgKCFzcmNlcy5zcmMgfHwgIXNyY2VzLncgfHwgc3JjZXMudyA8IHdpZHRoKSB7XG5cdFx0XHRcdFx0c3JjZXMudyA9IHdpZHRoO1xuXHRcdFx0XHRcdHNyYyA9IHJlZHVjZUNhbmRpZGF0ZShzcmNlcy5zb3J0KGFzY2VuZGluZ1NvcnQpKTtcblx0XHRcdFx0XHRzcmNlcy5zcmMgPSBzcmM7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3JjID0gc3JjZXMuc3JjO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzcmMgPSBzcmNlc1swXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNyYztcblx0XHR9O1xuXG5cdFx0dmFyIHAgPSBmdW5jdGlvbiBwKGVsZW0pIHtcblx0XHRcdGlmIChzdXBwb3J0U3Jjc2V0ICYmIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLnBhcmVudE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKSAhPSAnUElDVFVSRScpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGNhbmRpZGF0ZSA9IGdldENhbmRpZGF0ZShlbGVtKTtcblxuXHRcdFx0aWYgKGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUudSAmJiBlbGVtLl9sYXp5cG9seWZpbGwuY3VyICE9IGNhbmRpZGF0ZS51KSB7XG5cdFx0XHRcdGVsZW0uX2xhenlwb2x5ZmlsbC5jdXIgPSBjYW5kaWRhdGUudTtcblx0XHRcdFx0Y2FuZGlkYXRlLmNhY2hlZCA9IHRydWU7XG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKGNvbmZpZy5zcmNBdHRyLCBjYW5kaWRhdGUudSk7XG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzcmMnLCBjYW5kaWRhdGUudSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAucGFyc2UgPSBwYXJzZVdzcmNzZXQ7XG5cblx0XHRyZXR1cm4gcDtcblx0fSgpO1xuXG5cdGlmIChjb25maWcubG9hZGVkQ2xhc3MgJiYgY29uZmlnLmxvYWRpbmdDbGFzcykge1xuXHRcdChmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgc2VscyA9IFtdO1xuXHRcdFx0WydpbWdbc2l6ZXMkPVwicHhcIl1bc3Jjc2V0XS4nLCAncGljdHVyZSA+IGltZzpub3QoW3NyY3NldF0pLiddLmZvckVhY2goZnVuY3Rpb24gKHNlbCkge1xuXHRcdFx0XHRzZWxzLnB1c2goc2VsICsgY29uZmlnLmxvYWRlZENsYXNzKTtcblx0XHRcdFx0c2Vscy5wdXNoKHNlbCArIGNvbmZpZy5sb2FkaW5nQ2xhc3MpO1xuXHRcdFx0fSk7XG5cdFx0XHRjb25maWcucGYoe1xuXHRcdFx0XHRlbGVtZW50czogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxzLmpvaW4oJywgJykpXG5cdFx0XHR9KTtcblx0XHR9KSgpO1xuXHR9XG59KTtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKG1vZHVsZSkpKVxuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbi8qXG5UaGlzIHBsdWdpbiBleHRlbmRzIGxhenlTaXplcyB0byBsYXp5TG9hZDpcbmJhY2tncm91bmQgaW1hZ2VzLCB2aWRlb3MvcG9zdGVycyBhbmQgc2NyaXB0c1xuXG5CYWNrZ3JvdW5kLUltYWdlOlxuRm9yIGJhY2tncm91bmQgaW1hZ2VzLCB1c2UgZGF0YS1iZyBhdHRyaWJ1dGU6XG48ZGl2IGNsYXNzPVwibGF6eWxvYWRcIiBkYXRhLWJnPVwiYmctaW1nLmpwZ1wiPjwvZGl2PlxuXG4gVmlkZW86XG4gRm9yIHZpZGVvL2F1ZGlvIHVzZSBkYXRhLXBvc3RlciBhbmQgcHJlbG9hZD1cIm5vbmVcIjpcbiA8dmlkZW8gY2xhc3M9XCJsYXp5bG9hZFwiIGRhdGEtcG9zdGVyPVwicG9zdGVyLmpwZ1wiIHByZWxvYWQ9XCJub25lXCI+XG4gPCEtLSBzb3VyY2VzIC0tPlxuIDwvdmlkZW8+XG5cbiBTY3JpcHRzOlxuIEZvciBzY3JpcHRzIHVzZSBkYXRhLXNjcmlwdDpcbiA8ZGl2IGNsYXNzPVwibGF6eWxvYWRcIiBkYXRhLXNjcmlwdD1cIm1vZHVsZS1uYW1lLmpzXCI+PC9kaXY+XG5cblxuIFNjcmlwdCBtb2R1bGVzIHVzaW5nIHJlcXVpcmU6XG4gRm9yIG1vZHVsZXMgdXNpbmcgcmVxdWlyZSB1c2UgZGF0YS1yZXF1aXJlOlxuIDxkaXYgY2xhc3M9XCJsYXp5bG9hZFwiIGRhdGEtcmVxdWlyZT1cIm1vZHVsZS1uYW1lXCI+PC9kaXY+XG4qL1xuXG4oZnVuY3Rpb24gKHdpbmRvdywgZmFjdG9yeSkge1xuXHR2YXIgZ2xvYmFsSW5zdGFsbCA9IGZ1bmN0aW9uIGdsb2JhbEluc3RhbGwoKSB7XG5cdFx0ZmFjdG9yeSh3aW5kb3cubGF6eVNpemVzKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGF6eXVudmVpbHJlYWQnLCBnbG9iYWxJbnN0YWxsLCB0cnVlKTtcblx0fTtcblxuXHRmYWN0b3J5ID0gZmFjdG9yeS5iaW5kKG51bGwsIHdpbmRvdywgd2luZG93LmRvY3VtZW50KTtcblxuXHRpZiAoKCBmYWxzZSA/IHVuZGVmaW5lZCA6IF90eXBlb2YobW9kdWxlKSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xuXHR9IGVsc2UgaWYgKHdpbmRvdy5sYXp5U2l6ZXMpIHtcblx0XHRnbG9iYWxJbnN0YWxsKCk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH1cbn0pKHdpbmRvdywgZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsIGxhenlTaXplcykge1xuXHQvKmpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGJnTG9hZCwgcmVnQmdVcmxFc2NhcGU7XG5cdHZhciB1bmlxdWVVcmxzID0ge307XG5cblx0aWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHRyZWdCZ1VybEVzY2FwZSA9IC9cXCh8XFwpfFxcc3wnLztcblxuXHRcdGJnTG9hZCA9IGZ1bmN0aW9uIGJnTG9hZCh1cmwsIGNiKSB7XG5cdFx0XHR2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cdFx0XHRpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpbWcub25sb2FkID0gbnVsbDtcblx0XHRcdFx0aW1nLm9uZXJyb3IgPSBudWxsO1xuXHRcdFx0XHRpbWcgPSBudWxsO1xuXHRcdFx0XHRjYigpO1xuXHRcdFx0fTtcblx0XHRcdGltZy5vbmVycm9yID0gaW1nLm9ubG9hZDtcblxuXHRcdFx0aW1nLnNyYyA9IHVybDtcblxuXHRcdFx0aWYgKGltZyAmJiBpbWcuY29tcGxldGUgJiYgaW1nLm9ubG9hZCkge1xuXHRcdFx0XHRpbWcub25sb2FkKCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2xhenliZWZvcmV1bnZlaWwnLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0aWYgKGUuZGV0YWlsLmluc3RhbmNlICE9IGxhenlTaXplcykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciB0bXAsIGxvYWQsIGJnLCBwb3N0ZXI7XG5cdFx0XHRpZiAoIWUuZGVmYXVsdFByZXZlbnRlZCkge1xuXG5cdFx0XHRcdGlmIChlLnRhcmdldC5wcmVsb2FkID09ICdub25lJykge1xuXHRcdFx0XHRcdGUudGFyZ2V0LnByZWxvYWQgPSAnYXV0byc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0bXAgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGluaycpO1xuXHRcdFx0XHRpZiAodG1wKSB7XG5cdFx0XHRcdFx0YWRkU3R5bGVTY3JpcHQodG1wLCB0cnVlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGhhbmRsZSBkYXRhLXNjcmlwdFxuXHRcdFx0XHR0bXAgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2NyaXB0Jyk7XG5cdFx0XHRcdGlmICh0bXApIHtcblx0XHRcdFx0XHRhZGRTdHlsZVNjcmlwdCh0bXApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaGFuZGxlIGRhdGEtcmVxdWlyZVxuXHRcdFx0XHR0bXAgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVxdWlyZScpO1xuXHRcdFx0XHRpZiAodG1wKSB7XG5cdFx0XHRcdFx0aWYgKGxhenlTaXplcy5jZmcucmVxdWlyZUpzKSB7XG5cdFx0XHRcdFx0XHRsYXp5U2l6ZXMuY2ZnLnJlcXVpcmVKcyhbdG1wXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGFkZFN0eWxlU2NyaXB0KHRtcCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaGFuZGxlIGRhdGEtYmdcblx0XHRcdFx0YmcgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYmcnKTtcblx0XHRcdFx0aWYgKGJnKSB7XG5cdFx0XHRcdFx0ZS5kZXRhaWwuZmlyZXNMb2FkID0gdHJ1ZTtcblx0XHRcdFx0XHRsb2FkID0gZnVuY3Rpb24gbG9hZCgpIHtcblx0XHRcdFx0XHRcdGUudGFyZ2V0LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9ICd1cmwoJyArIChyZWdCZ1VybEVzY2FwZS50ZXN0KGJnKSA/IEpTT04uc3RyaW5naWZ5KGJnKSA6IGJnKSArICcpJztcblx0XHRcdFx0XHRcdGUuZGV0YWlsLmZpcmVzTG9hZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0bGF6eVNpemVzLmZpcmUoZS50YXJnZXQsICdfbGF6eWxvYWRlZCcsIHt9LCB0cnVlLCB0cnVlKTtcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0YmdMb2FkKGJnLCBsb2FkKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGhhbmRsZSBkYXRhLXBvc3RlclxuXHRcdFx0XHRwb3N0ZXIgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG9zdGVyJyk7XG5cdFx0XHRcdGlmIChwb3N0ZXIpIHtcblx0XHRcdFx0XHRlLmRldGFpbC5maXJlc0xvYWQgPSB0cnVlO1xuXHRcdFx0XHRcdGxvYWQgPSBmdW5jdGlvbiBsb2FkKCkge1xuXHRcdFx0XHRcdFx0ZS50YXJnZXQucG9zdGVyID0gcG9zdGVyO1xuXHRcdFx0XHRcdFx0ZS5kZXRhaWwuZmlyZXNMb2FkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRsYXp5U2l6ZXMuZmlyZShlLnRhcmdldCwgJ19sYXp5bG9hZGVkJywge30sIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRiZ0xvYWQocG9zdGVyLCBsb2FkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sIGZhbHNlKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZFN0eWxlU2NyaXB0KHNyYywgc3R5bGUpIHtcblx0XHRpZiAodW5pcXVlVXJsc1tzcmNdKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChzdHlsZSA/ICdsaW5rJyA6ICdzY3JpcHQnKTtcblx0XHR2YXIgaW5zZXJ0RWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcblxuXHRcdGlmIChzdHlsZSkge1xuXHRcdFx0ZWxlbS5yZWwgPSAnc3R5bGVzaGVldCc7XG5cdFx0XHRlbGVtLmhyZWYgPSBzcmM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc3JjID0gc3JjO1xuXHRcdH1cblx0XHR1bmlxdWVVcmxzW3NyY10gPSB0cnVlO1xuXHRcdHVuaXF1ZVVybHNbZWxlbS5zcmMgfHwgZWxlbS5ocmVmXSA9IHRydWU7XG5cdFx0aW5zZXJ0RWxlbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtLCBpbnNlcnRFbGVtKTtcblx0fVxufSk7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygxKShtb2R1bGUpKSlcblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihtb2R1bGUpIHtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4oZnVuY3Rpb24gKHdpbmRvdywgZmFjdG9yeSkge1xuXHR2YXIgZ2xvYmFsSW5zdGFsbCA9IGZ1bmN0aW9uIGdsb2JhbEluc3RhbGwoKSB7XG5cdFx0ZmFjdG9yeSh3aW5kb3cubGF6eVNpemVzKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGF6eXVudmVpbHJlYWQnLCBnbG9iYWxJbnN0YWxsLCB0cnVlKTtcblx0fTtcblxuXHRmYWN0b3J5ID0gZmFjdG9yeS5iaW5kKG51bGwsIHdpbmRvdywgd2luZG93LmRvY3VtZW50KTtcblxuXHRpZiAoKCBmYWxzZSA/IHVuZGVmaW5lZCA6IF90eXBlb2YobW9kdWxlKSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xuXHR9IGVsc2UgaWYgKHdpbmRvdy5sYXp5U2l6ZXMpIHtcblx0XHRnbG9iYWxJbnN0YWxsKCk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH1cbn0pKHdpbmRvdywgZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsIGxhenlTaXplcykge1xuXHQndXNlIHN0cmljdCc7XG5cblx0aWYgKCF3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciByZWdXaGl0ZSA9IC9cXHMrL2c7XG5cdHZhciByZWdTcGxpdFNldCA9IC9cXHMqXFx8XFxzK3xcXHMrXFx8XFxzKi9nO1xuXHR2YXIgcmVnU291cmNlID0gL14oLis/KSg/OlxccytcXFtcXHMqKC4rPylcXHMqXFxdKT8kLztcblx0dmFyIHJlZ0JnVXJsRXNjYXBlID0gL1xcKHxcXCl8Jy87XG5cdHZhciBhbGxvd2VkQmFja2dyb3VuZFNpemUgPSB7IGNvbnRhaW46IDEsIGNvdmVyOiAxIH07XG5cdHZhciBwcm94eVdpZHRoID0gZnVuY3Rpb24gcHJveHlXaWR0aChlbGVtKSB7XG5cdFx0dmFyIHdpZHRoID0gbGF6eVNpemVzLmdXKGVsZW0sIGVsZW0ucGFyZW50Tm9kZSk7XG5cblx0XHRpZiAoIWVsZW0uX2xhenlzaXplc1dpZHRoIHx8IHdpZHRoID4gZWxlbS5fbGF6eXNpemVzV2lkdGgpIHtcblx0XHRcdGVsZW0uX2xhenlzaXplc1dpZHRoID0gd2lkdGg7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtLl9sYXp5c2l6ZXNXaWR0aDtcblx0fTtcblx0dmFyIGdldEJnU2l6ZSA9IGZ1bmN0aW9uIGdldEJnU2l6ZShlbGVtKSB7XG5cdFx0dmFyIGJnU2l6ZTtcblxuXHRcdGJnU2l6ZSA9IChnZXRDb21wdXRlZFN0eWxlKGVsZW0pIHx8IHsgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZSgpIHt9IH0pLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQtc2l6ZScpO1xuXG5cdFx0aWYgKCFhbGxvd2VkQmFja2dyb3VuZFNpemVbYmdTaXplXSAmJiBhbGxvd2VkQmFja2dyb3VuZFNpemVbZWxlbS5zdHlsZS5iYWNrZ3JvdW5kU2l6ZV0pIHtcblx0XHRcdGJnU2l6ZSA9IGVsZW0uc3R5bGUuYmFja2dyb3VuZFNpemU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJnU2l6ZTtcblx0fTtcblx0dmFyIGNyZWF0ZVBpY3R1cmUgPSBmdW5jdGlvbiBjcmVhdGVQaWN0dXJlKHNldHMsIGVsZW0sIGltZykge1xuXHRcdHZhciBwaWN0dXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncGljdHVyZScpO1xuXHRcdHZhciBzaXplcyA9IGVsZW0uZ2V0QXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zaXplc0F0dHIpO1xuXHRcdHZhciByYXRpbyA9IGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXJhdGlvJyk7XG5cdFx0dmFyIG9wdGltdW14ID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3B0aW11bXgnKTtcblxuXHRcdGlmIChlbGVtLl9sYXp5YmdzZXQgJiYgZWxlbS5fbGF6eWJnc2V0LnBhcmVudE5vZGUgPT0gZWxlbSkge1xuXHRcdFx0ZWxlbS5yZW1vdmVDaGlsZChlbGVtLl9sYXp5YmdzZXQpO1xuXHRcdH1cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbWcsICdfbGF6eWJnc2V0Jywge1xuXHRcdFx0dmFsdWU6IGVsZW0sXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtLCAnX2xhenliZ3NldCcsIHtcblx0XHRcdHZhbHVlOiBwaWN0dXJlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblxuXHRcdHNldHMgPSBzZXRzLnJlcGxhY2UocmVnV2hpdGUsICcgJykuc3BsaXQocmVnU3BsaXRTZXQpO1xuXG5cdFx0cGljdHVyZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdGltZy5jbGFzc05hbWUgPSBsYXp5U2l6ZXNDb25maWcubGF6eUNsYXNzO1xuXG5cdFx0aWYgKHNldHMubGVuZ3RoID09IDEgJiYgIXNpemVzKSB7XG5cdFx0XHRzaXplcyA9ICdhdXRvJztcblx0XHR9XG5cblx0XHRzZXRzLmZvckVhY2goZnVuY3Rpb24gKHNldCkge1xuXHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0dmFyIHNvdXJjZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xuXG5cdFx0XHRpZiAoc2l6ZXMgJiYgc2l6ZXMgIT0gJ2F1dG8nKSB7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgc2l6ZXMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobWF0Y2ggPSBzZXQubWF0Y2gocmVnU291cmNlKSkge1xuXHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zcmNzZXRBdHRyLCBtYXRjaFsxXSk7XG5cdFx0XHRcdGlmIChtYXRjaFsyXSkge1xuXHRcdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbGF6eVNpemVzQ29uZmlnLmN1c3RvbU1lZGlhW21hdGNoWzJdXSB8fCBtYXRjaFsyXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHBpY3R1cmUuYXBwZW5kQ2hpbGQoc291cmNlKTtcblx0XHR9KTtcblxuXHRcdGlmIChzaXplcykge1xuXHRcdFx0aW1nLnNldEF0dHJpYnV0ZShsYXp5U2l6ZXNDb25maWcuc2l6ZXNBdHRyLCBzaXplcyk7XG5cdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZShsYXp5U2l6ZXNDb25maWcuc2l6ZXNBdHRyKTtcblx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCdzaXplcycpO1xuXHRcdH1cblx0XHRpZiAob3B0aW11bXgpIHtcblx0XHRcdGltZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3B0aW11bXgnLCBvcHRpbXVteCk7XG5cdFx0fVxuXHRcdGlmIChyYXRpbykge1xuXHRcdFx0aW1nLnNldEF0dHJpYnV0ZSgnZGF0YS1yYXRpbycsIHJhdGlvKTtcblx0XHR9XG5cblx0XHRwaWN0dXJlLmFwcGVuZENoaWxkKGltZyk7XG5cblx0XHRlbGVtLmFwcGVuZENoaWxkKHBpY3R1cmUpO1xuXHR9O1xuXG5cdHZhciBwcm94eUxvYWQgPSBmdW5jdGlvbiBwcm94eUxvYWQoZSkge1xuXHRcdGlmICghZS50YXJnZXQuX2xhenliZ3NldCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBpbWFnZSA9IGUudGFyZ2V0O1xuXHRcdHZhciBlbGVtID0gaW1hZ2UuX2xhenliZ3NldDtcblx0XHR2YXIgYmcgPSBpbWFnZS5jdXJyZW50U3JjIHx8IGltYWdlLnNyYztcblxuXHRcdGlmIChiZykge1xuXHRcdFx0ZWxlbS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAndXJsKCcgKyAocmVnQmdVcmxFc2NhcGUudGVzdChiZykgPyBKU09OLnN0cmluZ2lmeShiZykgOiBiZykgKyAnKSc7XG5cdFx0fVxuXG5cdFx0aWYgKGltYWdlLl9sYXp5YmdzZXRMb2FkaW5nKSB7XG5cdFx0XHRsYXp5U2l6ZXMuZmlyZShlbGVtLCAnX2xhenlsb2FkZWQnLCB7fSwgZmFsc2UsIHRydWUpO1xuXHRcdFx0ZGVsZXRlIGltYWdlLl9sYXp5YmdzZXRMb2FkaW5nO1xuXHRcdH1cblx0fTtcblxuXHRhZGRFdmVudExpc3RlbmVyKCdsYXp5YmVmb3JldW52ZWlsJywgZnVuY3Rpb24gKGUpIHtcblx0XHR2YXIgc2V0LCBpbWFnZSwgZWxlbTtcblxuXHRcdGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQgfHwgIShzZXQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYmdzZXQnKSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRlbGVtID0gZS50YXJnZXQ7XG5cdFx0aW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuXHRcdGltYWdlLmFsdCA9ICcnO1xuXG5cdFx0aW1hZ2UuX2xhenliZ3NldExvYWRpbmcgPSB0cnVlO1xuXHRcdGUuZGV0YWlsLmZpcmVzTG9hZCA9IHRydWU7XG5cblx0XHRjcmVhdGVQaWN0dXJlKHNldCwgZWxlbSwgaW1hZ2UpO1xuXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRsYXp5U2l6ZXMubG9hZGVyLnVudmVpbChpbWFnZSk7XG5cblx0XHRcdGxhenlTaXplcy5yQUYoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRsYXp5U2l6ZXMuZmlyZShpbWFnZSwgJ19sYXp5bG9hZGVkJywge30sIHRydWUsIHRydWUpO1xuXHRcdFx0XHRpZiAoaW1hZ2UuY29tcGxldGUpIHtcblx0XHRcdFx0XHRwcm94eUxvYWQoeyB0YXJnZXQ6IGltYWdlIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fSk7XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHByb3h5TG9hZCwgdHJ1ZSk7XG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenliZWZvcmVzaXplcycsIGZ1bmN0aW9uIChlKSB7XG5cdFx0aWYgKGUuZGV0YWlsLmluc3RhbmNlICE9IGxhenlTaXplcykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoZS50YXJnZXQuX2xhenliZ3NldCAmJiBlLmRldGFpbC5kYXRhQXR0cikge1xuXHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldC5fbGF6eWJnc2V0O1xuXHRcdFx0dmFyIGJnU2l6ZSA9IGdldEJnU2l6ZShlbGVtKTtcblxuXHRcdFx0aWYgKGFsbG93ZWRCYWNrZ3JvdW5kU2l6ZVtiZ1NpemVdKSB7XG5cdFx0XHRcdGUudGFyZ2V0Ll9sYXp5c2l6ZXNQYXJlbnRGaXQgPSBiZ1NpemU7XG5cblx0XHRcdFx0bGF6eVNpemVzLnJBRihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0ZS50YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLXBhcmVudC1maXQnLCBiZ1NpemUpO1xuXHRcdFx0XHRcdGlmIChlLnRhcmdldC5fbGF6eXNpemVzUGFyZW50Rml0KSB7XG5cdFx0XHRcdFx0XHRkZWxldGUgZS50YXJnZXQuX2xhenlzaXplc1BhcmVudEZpdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwgdHJ1ZSk7XG5cblx0ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenliZWZvcmVzaXplcycsIGZ1bmN0aW9uIChlKSB7XG5cdFx0aWYgKGUuZGVmYXVsdFByZXZlbnRlZCB8fCAhZS50YXJnZXQuX2xhenliZ3NldCB8fCBlLmRldGFpbC5pbnN0YW5jZSAhPSBsYXp5U2l6ZXMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZS5kZXRhaWwud2lkdGggPSBwcm94eVdpZHRoKGUudGFyZ2V0Ll9sYXp5YmdzZXQpO1xuXHR9KTtcbn0pO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oMSkobW9kdWxlKSkpXG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oalF1ZXJ5LCBtb2R1bGUpIHtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4oZnVuY3Rpb24gKHdpbmRvdywgZmFjdG9yeSkge1xuXHR2YXIgZ2xvYmFsSW5zdGFsbCA9IGZ1bmN0aW9uIGdsb2JhbEluc3RhbGwoKSB7XG5cdFx0ZmFjdG9yeSh3aW5kb3cubGF6eVNpemVzKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGF6eXVudmVpbHJlYWQnLCBnbG9iYWxJbnN0YWxsLCB0cnVlKTtcblx0fTtcblxuXHRmYWN0b3J5ID0gZmFjdG9yeS5iaW5kKG51bGwsIHdpbmRvdywgd2luZG93LmRvY3VtZW50KTtcblxuXHRpZiAoKCBmYWxzZSA/IHVuZGVmaW5lZCA6IF90eXBlb2YobW9kdWxlKSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oMikpO1xuXHR9IGVsc2UgaWYgKHdpbmRvdy5sYXp5U2l6ZXMpIHtcblx0XHRnbG9iYWxJbnN0YWxsKCk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH1cbn0pKHdpbmRvdywgZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsIGxhenlTaXplcykge1xuXHQndXNlIHN0cmljdCc7XG5cblx0aWYgKCF3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciByZWdEZXNjcmlwdG9ycyA9IC9cXHMrKFxcZCspKHd8aClcXHMrKFxcZCspKHd8aCkvO1xuXHR2YXIgcmVnQ3NzRml0ID0gL3BhcmVudC1maXRbXCInXSpcXHMqOlxccypbXCInXSooY29udGFpbnxjb3Zlcnx3aWR0aCkvO1xuXHR2YXIgcmVnQ3NzT2JqZWN0ID0gL3BhcmVudC1jb250YWluZXJbXCInXSpcXHMqOlxccypbXCInXSooLis/KSg/PShcXHN8JHwsfCd8XCJ8OykpLztcblx0dmFyIHJlZ1BpY3R1cmUgPSAvXnBpY3R1cmUkL2k7XG5cblx0dmFyIGdldENTUyA9IGZ1bmN0aW9uIGdldENTUyhlbGVtKSB7XG5cdFx0cmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxlbSwgbnVsbCkgfHwge307XG5cdH07XG5cblx0dmFyIHBhcmVudEZpdCA9IHtcblxuXHRcdGdldFBhcmVudDogZnVuY3Rpb24gZ2V0UGFyZW50KGVsZW1lbnQsIHBhcmVudFNlbCkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW1lbnQ7XG5cdFx0XHR2YXIgcGFyZW50Tm9kZSA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCghcGFyZW50U2VsIHx8IHBhcmVudFNlbCA9PSAncHJldicpICYmIHBhcmVudE5vZGUgJiYgcmVnUGljdHVyZS50ZXN0KHBhcmVudE5vZGUubm9kZU5hbWUgfHwgJycpKSB7XG5cdFx0XHRcdHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwYXJlbnRTZWwgIT0gJ3NlbGYnKSB7XG5cdFx0XHRcdGlmIChwYXJlbnRTZWwgPT0gJ3ByZXYnKSB7XG5cdFx0XHRcdFx0cGFyZW50ID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHBhcmVudFNlbCAmJiAocGFyZW50Tm9kZS5jbG9zZXN0IHx8IHdpbmRvdy5qUXVlcnkpKSB7XG5cdFx0XHRcdFx0cGFyZW50ID0gKHBhcmVudE5vZGUuY2xvc2VzdCA/IHBhcmVudE5vZGUuY2xvc2VzdChwYXJlbnRTZWwpIDogalF1ZXJ5KHBhcmVudE5vZGUpLmNsb3Nlc3QocGFyZW50U2VsKVswXSkgfHwgcGFyZW50Tm9kZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwYXJlbnQgPSBwYXJlbnROb2RlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwYXJlbnQ7XG5cdFx0fSxcblxuXHRcdGdldEZpdDogZnVuY3Rpb24gZ2V0Rml0KGVsZW1lbnQpIHtcblx0XHRcdHZhciB0bXBNYXRjaCwgcGFyZW50T2JqO1xuXHRcdFx0dmFyIGNzcyA9IGdldENTUyhlbGVtZW50KTtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzLmNvbnRlbnQgfHwgY3NzLmZvbnRGYW1pbHk7XG5cdFx0XHR2YXIgb2JqID0ge1xuXHRcdFx0XHRmaXQ6IGVsZW1lbnQuX2xhenlzaXplc1BhcmVudEZpdCB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJlbnQtZml0Jylcblx0XHRcdH07XG5cblx0XHRcdGlmICghb2JqLmZpdCAmJiBjb250ZW50ICYmICh0bXBNYXRjaCA9IGNvbnRlbnQubWF0Y2gocmVnQ3NzRml0KSkpIHtcblx0XHRcdFx0b2JqLmZpdCA9IHRtcE1hdGNoWzFdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob2JqLmZpdCkge1xuXHRcdFx0XHRwYXJlbnRPYmogPSBlbGVtZW50Ll9sYXp5c2l6ZXNQYXJlbnRDb250YWluZXIgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50LWNvbnRhaW5lcicpO1xuXG5cdFx0XHRcdGlmICghcGFyZW50T2JqICYmIGNvbnRlbnQgJiYgKHRtcE1hdGNoID0gY29udGVudC5tYXRjaChyZWdDc3NPYmplY3QpKSkge1xuXHRcdFx0XHRcdHBhcmVudE9iaiA9IHRtcE1hdGNoWzFdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0b2JqLnBhcmVudCA9IHBhcmVudEZpdC5nZXRQYXJlbnQoZWxlbWVudCwgcGFyZW50T2JqKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9iai5maXQgPSBjc3Mub2JqZWN0Rml0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH0sXG5cblx0XHRnZXRJbWFnZVJhdGlvOiBmdW5jdGlvbiBnZXRJbWFnZVJhdGlvKGVsZW1lbnQpIHtcblx0XHRcdHZhciBpLCBzcmNzZXQsIG1lZGlhLCByYXRpbywgbWF0Y2g7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gcGFyZW50ICYmIHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpID8gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NvdXJjZSwgaW1nJykgOiBbZWxlbWVudF07XG5cblx0XHRcdGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRlbGVtZW50ID0gZWxlbWVudHNbaV07XG5cdFx0XHRcdHNyY3NldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zcmNzZXRBdHRyKSB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnc3Jjc2V0JykgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGZzcmNzZXQnKSB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1yaXNyY3NldCcpIHx8ICcnO1xuXHRcdFx0XHRtZWRpYSA9IGVsZW1lbnQuX2xzTWVkaWEgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ21lZGlhJyk7XG5cdFx0XHRcdG1lZGlhID0gbGF6eVNpemVzQ29uZmlnLmN1c3RvbU1lZGlhW2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW1lZGlhJykgfHwgbWVkaWFdIHx8IG1lZGlhO1xuXG5cdFx0XHRcdGlmIChzcmNzZXQgJiYgKCFtZWRpYSB8fCAod2luZG93Lm1hdGNoTWVkaWEgJiYgbWF0Y2hNZWRpYShtZWRpYSkgfHwge30pLm1hdGNoZXMpKSB7XG5cdFx0XHRcdFx0cmF0aW8gPSBwYXJzZUZsb2F0KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFzcGVjdHJhdGlvJykpO1xuXG5cdFx0XHRcdFx0aWYgKCFyYXRpbyAmJiAobWF0Y2ggPSBzcmNzZXQubWF0Y2gocmVnRGVzY3JpcHRvcnMpKSkge1xuXHRcdFx0XHRcdFx0aWYgKG1hdGNoWzJdID09ICd3Jykge1xuXHRcdFx0XHRcdFx0XHRyYXRpbyA9IG1hdGNoWzFdIC8gbWF0Y2hbM107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyYXRpbyA9IG1hdGNoWzNdIC8gbWF0Y2hbMV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByYXRpbztcblx0XHR9LFxuXG5cdFx0Y2FsY3VsYXRlU2l6ZTogZnVuY3Rpb24gY2FsY3VsYXRlU2l6ZShlbGVtZW50LCB3aWR0aCkge1xuXHRcdFx0dmFyIGRpc3BsYXlSYXRpbywgaGVpZ2h0LCBpbWFnZVJhdGlvLCByZXRXaWR0aDtcblx0XHRcdHZhciBmaXRPYmogPSB0aGlzLmdldEZpdChlbGVtZW50KTtcblx0XHRcdHZhciBmaXQgPSBmaXRPYmouZml0O1xuXHRcdFx0dmFyIGZpdEVsZW0gPSBmaXRPYmoucGFyZW50O1xuXG5cdFx0XHRpZiAoZml0ICE9ICd3aWR0aCcgJiYgKGZpdCAhPSAnY29udGFpbicgJiYgZml0ICE9ICdjb3ZlcicgfHwgIShpbWFnZVJhdGlvID0gdGhpcy5nZXRJbWFnZVJhdGlvKGVsZW1lbnQpKSkpIHtcblx0XHRcdFx0cmV0dXJuIHdpZHRoO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZml0RWxlbSkge1xuXHRcdFx0XHR3aWR0aCA9IGZpdEVsZW0uY2xpZW50V2lkdGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmaXRFbGVtID0gZWxlbWVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0V2lkdGggPSB3aWR0aDtcblxuXHRcdFx0aWYgKGZpdCA9PSAnd2lkdGgnKSB7XG5cdFx0XHRcdHJldFdpZHRoID0gd2lkdGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWlnaHQgPSBmaXRFbGVtLmNsaWVudEhlaWdodDtcblxuXHRcdFx0XHRpZiAoaGVpZ2h0ID4gNDAgJiYgKGRpc3BsYXlSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0KSAmJiAoZml0ID09ICdjb3ZlcicgJiYgZGlzcGxheVJhdGlvIDwgaW1hZ2VSYXRpbyB8fCBmaXQgPT0gJ2NvbnRhaW4nICYmIGRpc3BsYXlSYXRpbyA+IGltYWdlUmF0aW8pKSB7XG5cdFx0XHRcdFx0cmV0V2lkdGggPSB3aWR0aCAqIChpbWFnZVJhdGlvIC8gZGlzcGxheVJhdGlvKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0V2lkdGg7XG5cdFx0fVxuXHR9O1xuXG5cdGxhenlTaXplcy5wYXJlbnRGaXQgPSBwYXJlbnRGaXQ7XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbGF6eWJlZm9yZXNpemVzJywgZnVuY3Rpb24gKGUpIHtcblx0XHRpZiAoZS5kZWZhdWx0UHJldmVudGVkIHx8IGUuZGV0YWlsLmluc3RhbmNlICE9IGxhenlTaXplcykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG5cdFx0ZS5kZXRhaWwud2lkdGggPSBwYXJlbnRGaXQuY2FsY3VsYXRlU2l6ZShlbGVtZW50LCBlLmRldGFpbC53aWR0aCk7XG5cdH0pO1xufSk7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygwKSwgX193ZWJwYWNrX3JlcXVpcmVfXygxKShtb2R1bGUpKSlcblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbigkKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRhYkFjY29yZGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVEFCIEFDQ09SRElPTiBDTEFTU1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbnZhciBfdmVyZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX3ZlcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZlcmdlKTtcblxudmFyIF91dGlsaXRpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcclxuICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBUYWJBY2NvcmRpb24uXHJcbiAqXHJcbiAqIEZpbmRzIHRyaWdnZXJzIGFuZCBjb250ZW50IHdpdGhpbiBjb250YWluZXJcclxuICogQWRkIGV2ZW50IGxpc3RlbmVyIHRvIHRyaWdnZXJzXHJcbiAqIFRyaWdnZXIgd2lsbCBmaW5kIGNvbnRlbnQgZWxlbWVudCBiYXNlZCBvbiAnaHJlZj1cIjwjY29udGVudD5cIicgYW5kIGFkZCAnLmlzLWFjdGl2ZSdcclxuICogQ29udGVudCBlbGVtZW50IG11c3QgaGF2ZSBhbiBJRCB0aGF0IG1hdGNoZXMgSUQgZm91bmQgaW4gaXQncyB0cmlnZ2VyJ3MgaHJlZlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29udGFpbmVyQ2xhc3MgLy8gdGFiIGFjY29yZGlvbiBjb250YWluZXIncyBjbGFzcyBlLmkuICcudGFiLWFjY29yZGlvbi1jb250YWluZXInXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmlnZ2VyQ2xhc3MgLy8gdHJpZ2dlcnMnIGNsYXNzICwgdHJpZ2dlcnMgbXVzdCBiZSA8YT4gdGFnIHdpdGggaHJlZiB0byBjb3JyZXNwb25kaW5nIGNvbnRlbnQncyBJRFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29udGVudENsYXNzIC8vIGNvbnRlbnQgY2xhc3NcclxuICogQHBhcmFtIHtCb29sZWFufSBjbG9zZU9uQ2xpY2sgLy8gdGFicyB3aWxsIGFsd2F5cyBjbG9zZSB3aGVuIGNsaWNrZWQsIG90aGVyd2lzZSB0aGV5IHdpbGwgb25seSBjbG9zZSB3aGVuIGNsaWNrZWQgb24gbW9iaWxlXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYXV0b09wZW5PbkRlc2t0b3AgLy8gZmlyc3QgdGFiIHdpbGwgYmUgb3BlbmVkIHdoZW4gcmVzaXppbmcgdG8gZGVza3RvcCBpZiBub25lIGFyZSBhY3RpdmVcclxuICogQHBhcmFtIHtCb29sZWFufSBvcGVuRmlyc3RUYWJPbkRlc2t0b3AgLy8gZmlyc3QgdGFiIHdpbGwgYmUgb3BlbiBvbiBkZXNrdG9wXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGVlcExpbmtpbmdcclxuICovXG52YXIgVGFiQWNjb3JkaW9uID0gZnVuY3Rpb24gKCkge1xuXHRmdW5jdGlvbiBUYWJBY2NvcmRpb24oY29udGFpbmVyQ2xhc3MsIHRyaWdnZXJDbGFzcywgY29udGVudENsYXNzLCBjbG9zZU9uQ2xpY2ssIGF1dG9PcGVuT25EZXNrdG9wLCBvcGVuRmlyc3RUYWJPbkRlc2t0b3AsIGRlZXBMaW5raW5nKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYkFjY29yZGlvbik7XG5cblx0XHR0aGlzLl9zZWxlY3RvcnMgPSB7XG5cdFx0XHRjb250YWluZXJDbGFzczogY29udGFpbmVyQ2xhc3MsXG5cdFx0XHR0cmlnZ2VyQ2xhc3M6IHRyaWdnZXJDbGFzcyxcblx0XHRcdGNvbnRlbnRDbGFzczogY29udGVudENsYXNzXG5cdFx0fTtcblx0XHR0aGlzLl9hdXRvT3Blbk9uRGVza3RvcCA9IGF1dG9PcGVuT25EZXNrdG9wIHx8IGZhbHNlO1xuXHRcdHRoaXMuX2Nsb3NlT25DbGljayA9IGNsb3NlT25DbGljayB8fCBmYWxzZTtcblx0XHR0aGlzLl9vcGVuRmlyc3RUYWJPbkRlc2t0b3AgPSBvcGVuRmlyc3RUYWJPbkRlc2t0b3AgfHwgZmFsc2U7XG5cdFx0dGhpcy5fZGVlcExpbmtpbmcgPSBkZWVwTGlua2luZyB8fCBmYWxzZTtcblx0XHR0aGlzLl9pbml0KCk7XG5cdH1cblxuXHRfY3JlYXRlQ2xhc3MoVGFiQWNjb3JkaW9uLCBbe1xuXHRcdGtleTogJ19pbml0Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG5cdFx0XHR2YXIgY29udGFpbmVyID0gJCh0aGlzLl9zZWxlY3RvcnMuY29udGFpbmVyQ2xhc3MpO1xuXG5cdFx0XHQvLyBiYWlsIGlmIGNvbnRhaW5lciBpcyBub3QgcHJlc2VudFxuXHRcdFx0aWYgKGNvbnRhaW5lci5sZW5ndGggPCAxKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHRyaWdnZXJzID0gY29udGFpbmVyLmZpbmQodGhpcy5fc2VsZWN0b3JzLnRyaWdnZXJDbGFzcyk7XG5cdFx0XHR2YXIgY29udGVudHMgPSBjb250YWluZXIuZmluZCh0aGlzLl9zZWxlY3RvcnMuY29udGVudENsYXNzKTtcblx0XHRcdHZhciBsb2NhdGlvbkhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcblxuXHRcdFx0dHJpZ2dlcnMub24oJ2NsaWNrJywge1xuXHRcdFx0XHRhbGxUcmlnZ2VyczogdHJpZ2dlcnMsXG5cdFx0XHRcdGFsbENvbnRlbnQ6IGNvbnRlbnRzLFxuXHRcdFx0XHRjbG9zZU9uQ2xpY2s6IHRoaXMuX2Nsb3NlT25DbGljayxcblx0XHRcdFx0ZGVlcExpbmtpbmc6IHRoaXMuX2RlZXBMaW5raW5nXG5cdFx0XHR9LCBvcGVuVGFiKTtcblxuXHRcdFx0aWYgKHRoaXMuX2F1dG9PcGVuT25EZXNrdG9wKSB7XG5cdFx0XHRcdGF1dG9PcGVuT25EZXNrdG9wKHRyaWdnZXJzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX29wZW5GaXJzdFRhYk9uRGVza3RvcCAmJiBfdXRpbGl0aWVzLm1vYmlsZVdpZHRoIDwgX3ZlcmdlMi5kZWZhdWx0LnZpZXdwb3J0VygpICYmICFsb2NhdGlvbkhhc2gpIHtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dHJpZ2dlcnMuZXEoMCkudHJpZ2dlcignY2xpY2snKTtcblx0XHRcdFx0fSwgMjAwKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX2RlZXBMaW5raW5nKSB7XG5cdFx0XHRcdG9wZW5EZWVwTGlua2VkVGFiKHRyaWdnZXJzKTtcblx0XHRcdH1cblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gVGFiQWNjb3JkaW9uO1xufSgpO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXZlbnRzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBPcGVuIGEgc2luZ2xlIHRhYiwgY2xvc2Ugb3RoZXJzXG5cblxuZnVuY3Rpb24gb3BlblRhYihlKSB7XG5cdGlmIChlKSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9XG5cblx0dmFyICR0aGlzID0gJCh0aGlzKTtcblx0dmFyIGlkID0gJHRoaXMuYXR0cignaHJlZicpO1xuXHR2YXIgdGFyZ2V0ID0gJChpZCk7XG5cdHZhciBidXR0b25zID0gJCgnKltocmVmPVwiJyArIGlkICsgJ1wiXScpOyAvL1VwZGF0ZSBkZXNrdG9wIGFuZCBtb2JpbGUgdGFiIGFjY29yZGlvbiBidXR0b25zXG5cdHZhciBhbGxUcmlnZ2VycyA9IGUuZGF0YS5hbGxUcmlnZ2Vycztcblx0dmFyIGFsbENvbnRlbnQgPSBlLmRhdGEuYWxsQ29udGVudDtcblx0dmFyIGNsb3NlT25DbGljayA9IGUuZGF0YS5jbG9zZU9uQ2xpY2s7XG5cdHZhciBidXR0b25BY3RpdmUgPSBidXR0b25zLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcblxuXHRpZiAoYnV0dG9uQWN0aXZlICYmIGNsb3NlT25DbGljayB8fCBidXR0b25BY3RpdmUgJiYgX3ZlcmdlMi5kZWZhdWx0LnZpZXdwb3J0VygpIDwgX3V0aWxpdGllcy5tb2JpbGVXaWR0aCkge1xuXHRcdGNsb3NlQWxsVGFicyhhbGxUcmlnZ2VycywgYWxsQ29udGVudCk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y2xvc2VBbGxUYWJzKGFsbFRyaWdnZXJzLCBhbGxDb250ZW50KTtcblxuXHRidXR0b25zLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hcmlhRXhwYW5kZWQoKTtcblxuXHRvcGVuQ29udGVudCh0YXJnZXQpO1xuXG5cdGlmIChlLmRhdGEuZGVlcExpbmtpbmcpIHtcblx0XHRpZiAoaGlzdG9yeS5wdXNoU3RhdGUpIHtcblx0XHRcdGhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGlkKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSBpZDtcblx0XHR9XG5cdH1cbn1cblxuLy8gQ2xvc2UgYWxsIHRhYnNcbmZ1bmN0aW9uIGNsb3NlQWxsVGFicyh0cmlnZ2VycywgY29udGVudCkge1xuXHR0cmlnZ2Vycy5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJykuYXJpYU5vdEV4cGFuZGVkKCk7XG5cdGNvbnRlbnQucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xufVxuXG4vLyBPcGVuIHRhYidzIGNvbnRlbnRcbmZ1bmN0aW9uIG9wZW5Db250ZW50KGNvbnRlbnQpIHtcblx0Y29udGVudC5hZGRDbGFzcygnaXMtYWN0aXZlJykuZm9jdXMoKTtcbn1cblxuLy8gSWYgbm8gYWNjb3JkaW9uIGFyZSBvcGVuIG9uIHJlc2l6ZSB0byBkZXNrdG9wLCBvcGVuIHRoZSBmaXJzdCBvbmVcbmZ1bmN0aW9uIGF1dG9PcGVuT25EZXNrdG9wKHRyaWdnZXJzKSB7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoMCwgX3V0aWxpdGllcy5kZWJvdW5jZSkoZnVuY3Rpb24gKCkge1xuXHRcdGlmIChfdmVyZ2UyLmRlZmF1bHQudmlld3BvcnRXKCkgPj0gX3V0aWxpdGllcy5tb2JpbGVXaWR0aCAmJiAhdHJpZ2dlcnMuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG5cdFx0XHR2YXIgZmlyc3RUcmlnZ2VyID0gdHJpZ2dlcnMuZXEoMCk7XG5cdFx0XHRmaXJzdFRyaWdnZXIudHJpZ2dlcignY2xpY2snKTtcblx0XHR9XG5cdH0sIDUwMCkpO1xufVxuXG4vLyBPcGVuIGRlZXBsaW5rZWQgdGFiIGlmIGhhc2ggaXMgcHJlc2VudFxuZnVuY3Rpb24gb3BlbkRlZXBMaW5rZWRUYWIodHJpZ2dlcnMpIHtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGxvY2F0aW9uSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdHZhciBhY3RpdmVUcmlnZ2VySW5kZXggPSB2b2lkIDA7XG5cblx0XHRpZiAoIWxvY2F0aW9uSGFzaCkgcmV0dXJuO1xuXG5cdFx0JC5lYWNoKHRyaWdnZXJzLCBmdW5jdGlvbiAoaW5kZXgpIHtcblx0XHRcdHZhciBocmVmID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblxuXHRcdFx0aWYgKGhyZWYgPT09IGxvY2F0aW9uSGFzaCkge1xuXHRcdFx0XHRhY3RpdmVUcmlnZ2VySW5kZXggPSBpbmRleDtcblx0XHRcdH07XG5cdFx0fSk7XG5cblx0XHR2YXIgYWN0aXZlVHJpZ2dlciA9IHRyaWdnZXJzLmVxKGFjdGl2ZVRyaWdnZXJJbmRleCk7XG5cdFx0YWN0aXZlVHJpZ2dlci50cmlnZ2VyKCdjbGljaycpO1xuXHRcdCQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcblx0XHRcdHNjcm9sbFRvcDogYWN0aXZlVHJpZ2dlci5vZmZzZXQoKS50b3Bcblx0XHR9KTtcblx0fSk7XG59XG5cbmV4cG9ydHMuVGFiQWNjb3JkaW9uID0gVGFiQWNjb3JkaW9uO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oMCkpKVxuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfdGFiQWNjb3JkaW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cbm5ldyBfdGFiQWNjb3JkaW9uLlRhYkFjY29yZGlvbignLmpzLWN1c3RvbS10YWJzJywgJy5qcy10YWItdHJpZ2dlcicsICcuanMtdGFiLWNvbnRlbnQnLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7IC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFBST0RVQ1QgUEFHRSBKU1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5uZXcgX3RhYkFjY29yZGlvbi5UYWJBY2NvcmRpb24oJy5qcy1wcm9kdWN0LWFjY29yZGlvbicsICcuanMtcHJvZHVjdC1hY2NvcmRpb25fX2xpbmsnLCAnLmpzLXByb2R1Y3QtYWNjb3JkaW9uX19jb250ZW50JywgdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG5uZXcgX3RhYkFjY29yZGlvbi5UYWJBY2NvcmRpb24oJy5qcy1mYXFzLWFjY29yZGlvbicsICcuanMtZmFxcy1hY2NvcmRpb25fX2xpbmsnLCAnLmpzLWZhcXMtYWNjb3JkaW9uX19jb250ZW50JywgdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG5uZXcgX3RhYkFjY29yZGlvbi5UYWJBY2NvcmRpb24oJy5qcy1wcm9kdWN0LWZhcScsICcuanMtcHJvZHVjdC1mYXFfX2xpbmsnLCAnLmpzLXByb2R1Y3QtZmFxX19jb250ZW50JywgdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oJCkge1xuXG4vLyBiaW5kIGEgY2xpY2sgZXZlbnQgdG8gdGhlICdza2lwJyBsaW5rXG4kKCcuYy1za2lwLW5hdicpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuXHQvLyBzdHJpcCB0aGUgbGVhZGluZyBoYXNoIGFuZCBkZWNsYXJlXG5cdC8vIHRoZSBjb250ZW50IHdlJ3JlIHNraXBwaW5nIHRvXG5cdHZhciBza2lwVG8gPSAnIycgKyB0aGlzLmhyZWYuc3BsaXQoJyMnKVsxXTtcblxuXHQvLyBTZXR0aW5nICd0YWJpbmRleCcgdG8gLTEgdGFrZXMgYW4gZWxlbWVudCBvdXQgb2Ygbm9ybWFsXG5cdC8vIHRhYiBmbG93IGJ1dCBhbGxvd3MgaXQgdG8gYmUgZm9jdXNlZCB2aWEgamF2YXNjcmlwdFxuXHQkKHNraXBUbykuYXR0cigndGFiaW5kZXgnLCAtMSkub24oJ2JsdXIgZm9jdXNvdXQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gd2hlbiBmb2N1cyBsZWF2ZXMgdGhpcyBlbGVtZW50LFxuXHRcdC8vIHJlbW92ZSB0aGUgdGFiaW5kZXggYXR0cmlidXRlXG5cdFx0JCh0aGlzKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuXHR9KS5mb2N1cygpOyAvLyBmb2N1cyBvbiB0aGUgY29udGVudCBjb250YWluZXJcbn0pO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oMCkpKVxuXG4vKioqLyB9KSxcbi8qIDE3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKCQpIHtcblxudmFyIF92ZXJnZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfdmVyZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmVyZ2UpO1xuXG52YXIgX3V0aWxpdGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZGV0ZWN0RWRnZSA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIFNldCB1cCBlZGdlIGRldGVjdGlvbiBmb3Igc3ViIG1lbnVzXG53aW5kb3cubmF2RWRnZURldGVjdCA9IG5ldyBfZGV0ZWN0RWRnZS5EZXRlY3RFZGdlKCcuc3ViLW1lbnUtbGV2ZWwtMScsIDE1KTsgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gTkFWSUdBVElPTlxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgbmF2RWRnZURldGVjdCA9IHdpbmRvdy5uYXZFZGdlRGV0ZWN0O1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBEZWNsYXJlIFZhcmlhYmxlc1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxudmFyIG5hdmlnYXRpb24gPSAkKCcubmF2aWdhdGlvbicpO1xudmFyIG5hdk1haW4gPSAkKCcjbmF2LW1haW4nKTtcbnZhciBpc1BhcmVudFRyaWdnZXIgPSAkKCcuaXMtcGFyZW50LXRyaWdnZXInKTtcbnZhciBzdWJNZW51ID0gJCgnLnN1Yi1tZW51Jyk7XG52YXIgbW9iaWxlQmFja0J1dHRvbiA9ICQoJy5qcy1tZW51LWJhY2snKTtcbnZhciBtb2JpbGVUcmlnZ2VyID0gJCgnLmpzLW1lbnUtdHJpZ2dlcicpO1xudmFyIHRyaWdnZXJUZXh0ID0gJCgnLmMtdHJpZ2dlcl9fdGV4dCcpO1xudmFyIG1vZGFsVHJpZ2dlciA9ICQoJy5qcy1tb2RhbC10cmlnZ2VyJyk7XG52YXIgbW9kYWwgPSAkKCcuanMtbW9kYWwnKTtcbnZhciBib2R5ID0gJCgnYm9keScpO1xudmFyICR3aW5kb3cgPSAkKHdpbmRvdyk7XG52YXIgd2luZG93V2lkdGggPSAkd2luZG93LndpZHRoKCk7XG52YXIgY3VycmVudE5hdkRlcHRoID0gMDtcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQXJpYSBGdW5jdGlvbnNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXHJcbiAqIFNldCBNb2JpbGUgQXJpYVxyXG4gKi9cbmZ1bmN0aW9uIG1vYmlsZVRyaWdnZXJBcmlhKCkge1xuXHR2YXIgaGlkZGVuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuXHR2YXIgZXhwYW5kZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cdHZhciBoYXNwb3B1cCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcblxuXHRtb2JpbGVUcmlnZ2VyLmF0dHIoe1xuXHRcdCdhcmlhLWhpZGRlbic6IGhpZGRlbixcblx0XHQnYXJpYS1leHBhbmRlZCc6IGV4cGFuZGVkLFxuXHRcdCdhcmlhLWhhc3BvcHVwJzogaGFzcG9wdXBcblx0fSk7XG59XG5cbi8qKlxyXG4gKiBBZGQgQXJpYSBBdHRyaWJ1dGVzXHJcbiAqIFRoaXMgaXMgcnVuIG9uIHBhZ2UgbG9hZCB0byBzZXR1cCBhcmlhLlxyXG4gKi9cbmZ1bmN0aW9uIGFkZEFyaWEoKSB7XG5cdC8vIEJ1dHRvblxuXHRtb2JpbGVUcmlnZ2VyQXJpYSh0cnVlLCBmYWxzZSwgdHJ1ZSk7XG5cblx0Ly8gTmF2aWdhdGlvblxuXHRuYXZpZ2F0aW9uLmFyaWFIaWRkZW5GYWxzZSgpO1xufVxuXG4vKipcclxuICogQWRkIEFyaWEgb24gTW9iaWxlXHJcbiAqIFRoaXMgaXMgcnVuIG9uIHBhZ2UgbG9hZCB3aGVuIG9uIG1vYmlsZSB2aWV3LlxyXG4gKi9cbmZ1bmN0aW9uIGFkZE1vYmlsZUFyaWEoKSB7XG5cdC8vIEJ1dHRvblxuXHRtb2JpbGVUcmlnZ2VyQXJpYShmYWxzZSwgZmFsc2UsIHRydWUpO1xuXG5cdC8vIE5hdmlnYXRpb25cblx0bmF2aWdhdGlvbi5hcmlhSGlkZGVuVHJ1ZSgpO1xufVxuXG4vKipcclxuICogVG9nZ2xlIEFyaWEgQXR0cmlidXRlc1xyXG4gKiBUaGlzIGlzIHJ1biB3aGVuIG1lbnUgYnV0dG9uIGlzIGNsaWNrZWQuXHJcbiAqL1xuZnVuY3Rpb24gdG9nZ2xlTW9iaWxlQXJpYSgpIHtcblx0Ly8gQnV0dG9uXG5cdG1vYmlsZVRyaWdnZXJBcmlhKGZhbHNlLCB0cnVlLCBmYWxzZSk7XG5cblx0Ly8gTmF2aWdhdGlvblxuXHRuYXZpZ2F0aW9uLmFyaWFIaWRkZW5GYWxzZSgpO1xufVxuXG4vKipcclxuICogT3BlbiBBcmlhIHN0YXRlcyB0byBzdWItbWVudSBhbmQgcGFyZW50XHJcbiAqL1xuZnVuY3Rpb24gb3BlblN1Yk1lbnVBcmlhKHRyaWdnZXIpIHtcblx0dHJpZ2dlci5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cdHRyaWdnZXIubmV4dCgnLnN1Yi1tZW51JykuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSk7XG59XG5cbi8qKlxyXG4gKiBDbG9zZWQgQXJpYSBzdGF0ZXMgdG8gc3ViLW1lbnUgYW5kIHBhcmVudFxyXG4gKi9cbmZ1bmN0aW9uIGNsb3NlU3ViTWVudUFyaWEoKSB7XG5cdHZhciBwYXJlbnRUcmlnZ2VyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBpc1BhcmVudFRyaWdnZXI7XG5cdHZhciBtZW51ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBzdWJNZW51O1xuXG5cdHBhcmVudFRyaWdnZXIuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcblx0bWVudS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFdmVudCBGdW5jdGlvbnNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXHJcbiAqIENsb3NlIE1haW4gTmF2IE1lbnVzXHJcbiAqL1xuZnVuY3Rpb24gY2xvc2VNZW51cygpIHtcblx0dmFyIHBhcmVudFRyaWdnZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGlzUGFyZW50VHJpZ2dlcjtcblx0dmFyIG1lbnUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICQoJy5uYXZpZ2F0aW9uIC5zdWItbWVudScpO1xuXG5cdHBhcmVudFRyaWdnZXIucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXHRwYXJlbnRUcmlnZ2VyLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblx0bWVudS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cdGNsb3NlU3ViTWVudUFyaWEocGFyZW50VHJpZ2dlciwgbWVudSk7XG59XG5cbi8qKlxyXG4gKiBDbG9zZSBTaWJsaW5nIE1vZGFsc1xyXG4gKi9cbmZ1bmN0aW9uIGNsb3NlU2libGluZ01vZGFscyh0aGlzVHJpZ2dlciwgdGhpc01vZGFsKSB7XG5cdG1vZGFsLm5vdCh0aGlzTW9kYWwpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblx0bW9kYWxUcmlnZ2VyLm5vdCh0aGlzVHJpZ2dlcikucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXHRtb2RhbC5ub3QodGhpc01vZGFsKS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXHRtb2RhbFRyaWdnZXIubm90KHRoaXNUcmlnZ2VyKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xufVxuXG4vKipcclxuICogQ2xvc2UgQWxsIE1vZGFsc1xyXG4gKi9cbmZ1bmN0aW9uIGNsb3NlTW9kYWxzKCkge1xuXHRtb2RhbFRyaWdnZXIucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXHRtb2RhbC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cdGNsb3NlU3ViTWVudUFyaWEobW9kYWxUcmlnZ2VyLCBtb2RhbCk7XG59XG5cbi8qKlxyXG4gKiBDbG9zZSBNb2JpbGUgTmF2XHJcbiAqL1xuZnVuY3Rpb24gY2xvc2VNb2JpbGVOYXYoKSB7XG5cdGlmICh3aW5kb3dXaWR0aCA8IF91dGlsaXRpZXMubW9iaWxlV2lkdGgpIHtcblx0XHRtb2JpbGVUcmlnZ2VyLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblx0XHRuYXZpZ2F0aW9uLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblx0XHRhZGRNb2JpbGVBcmlhKCk7XG5cdFx0Y3VycmVudE5hdkRlcHRoID0gMDtcblx0XHRzbGlkZU5hdihjdXJyZW50TmF2RGVwdGgpO1xuXHR9XG59XG5cbi8qKlxyXG4gKiBNYWluIHRvZ2dsZSBmb3IgYWxsIHJldmVhbHNcclxuICovXG5mdW5jdGlvbiB0b2dnbGVOYXZFbGVtZW50KCkge1xuXHR2YXIgbWVudVRyaWdnZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGlzUGFyZW50VHJpZ2dlcjtcblx0dmFyIG1lbnUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcuc3ViLW1lbnUnO1xuXG5cdG1lbnVUcmlnZ2VyLm9uKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdHZhciBjdXJyZW50VHJpZ2dlciA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XG5cdFx0dmFyIGN1cnJlbnRNZW51ID0gY3VycmVudFRyaWdnZXIubmV4dChtZW51KTtcblx0XHR2YXIgc2libGluZ3MgPSBjdXJyZW50VHJpZ2dlci5wYXJlbnQoKS5zaWJsaW5ncygpO1xuXHRcdHZhciBzaWJsaW5nVHJpZ2dlcnMgPSBjdXJyZW50VHJpZ2dlci5wYXJlbnQoKS5zaWJsaW5ncygpLmNoaWxkcmVuKCcuaXMtcGFyZW50LXRyaWdnZXInKTtcblx0XHR2YXIgc2libGluZ01lbnVzID0gc2libGluZ1RyaWdnZXJzLm5leHQobWVudSk7XG5cdFx0dmFyIGRlcHRoID0gY3VycmVudFRyaWdnZXIuZGF0YSgnbGV2ZWwnKTtcblxuXHRcdC8vIE9wZW4sIENsb3NlIHRyaWdnZXIgYW5kIG1lbnUuXG5cdFx0aWYgKF92ZXJnZTIuZGVmYXVsdC52aWV3cG9ydFcoKSA8IF91dGlsaXRpZXMubW9iaWxlV2lkdGgpIHtcblx0XHRcdGlmIChjdXJyZW50VHJpZ2dlci5oYXNDbGFzcygnanMtbW9kYWwtdHJpZ2dlcicpKSB7XG5cdFx0XHRcdGN1cnJlbnRUcmlnZ2VyLnRvZ2dsZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuXHRcdFx0XHQvLyBPcGVuIG1lZ2EgbmF2IG1vZGFscyBmcm9tIGZsb2F0aW5nIG5hdlxuXHRcdFx0XHRpZiAoY3VycmVudFRyaWdnZXIuYXR0cignZGF0YS1tYWluLW5hdi10cmlnZ2VyJykpIHtcblx0XHRcdFx0XHRjbG9zZVNpYmxpbmdNb2RhbHMoY3VycmVudFRyaWdnZXIsIGN1cnJlbnRNZW51KTtcblxuXHRcdFx0XHRcdHZhciBuYXZNb2RhbCA9ICQoJ1tkYXRhLW1haW4tbmF2LW1vZGFsPVwiJyArIGN1cnJlbnRUcmlnZ2VyLmF0dHIoJ2RhdGEtbWFpbi1uYXYtdHJpZ2dlcicpICsgJ1wiXScpO1xuXG5cdFx0XHRcdFx0bmF2TW9kYWwudG9nZ2xlQ2xhc3MoJ2lzLWFjdGl2ZScpLnRvZ2dsZUFyaWFIaWRkZW4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gZml4IGJ1ZyB3aGVuIGNsaWNraW5nIGZvcndhcmQsIGJhY2sgYW5kIHRoZW4gc2FtZSB0cmlnZ2VyXG5cdFx0XHRcdC8vIGlzLWFjdGl2ZSB3YXMgYmVpbmcgcmVtb3ZlZCBhbmQgY2xvc2luZyB0aGUgbWVudS5cblx0XHRcdFx0Y3VycmVudFRyaWdnZXIuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXHRcdFx0XHRjdXJyZW50TWVudS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGRlc2t0b3AgdHJpZ2dlcnMgYW5kIG1lbnVzLlxuXHRcdFx0Y3VycmVudFRyaWdnZXIudG9nZ2xlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXHRcdFx0Y3VycmVudE1lbnUudG9nZ2xlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXHRcdH1cblxuXHRcdC8vIENvbmRpdGlvbmFsIHRvIHRhcmdldCBldmVudHNcblx0XHRpZiAoY3VycmVudFRyaWdnZXIuaGFzQ2xhc3MoJ2pzLW1vZGFsLXRyaWdnZXInKSkge1xuXHRcdFx0aWYgKCFjdXJyZW50VHJpZ2dlci5oYXNDbGFzcygnaXMtYWN0aXZlJykgfHwgX3ZlcmdlMi5kZWZhdWx0LnZpZXdwb3J0VygpID4gX3V0aWxpdGllcy5tb2JpbGVXaWR0aCkge1xuXHRcdFx0XHRjbG9zZVNpYmxpbmdNb2RhbHMoY3VycmVudFRyaWdnZXIsIGN1cnJlbnRNZW51KTtcblx0XHRcdH1cblxuXHRcdFx0Y2xvc2VNZW51cygpO1xuXHRcdFx0Y2xvc2VNb2JpbGVOYXYoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xvc2VNb2RhbHMoKTtcblx0XHRcdGNsb3NlU3ViTWVudUFyaWEoc2libGluZ1RyaWdnZXJzLCBzaWJsaW5nTWVudXMpO1xuXHRcdFx0c2libGluZ3MucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXHRcdFx0c2libGluZ1RyaWdnZXJzLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblx0XHRcdHNpYmxpbmdNZW51cy5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cdFx0XHRjdXJyZW50VHJpZ2dlci5wYXJlbnQoKS50b2dnbGVDbGFzcygnaXMtYWN0aXZlJyk7XG5cdFx0fVxuXG5cdFx0Ly8gU2xpZGUgTW9iaWxlIE5hdlxuXHRcdGlmIChkZXB0aCAmJiBfdmVyZ2UyLmRlZmF1bHQudmlld3BvcnRXKCkgPCBfdXRpbGl0aWVzLm1vYmlsZVdpZHRoKSB7XG5cdFx0XHRjdXJyZW50TmF2RGVwdGggPSBkZXB0aDtcblx0XHRcdHNsaWRlTmF2KGN1cnJlbnROYXZEZXB0aCk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29uZGl0aW9uYWwgZm9yIGJvZHkgY2xhc3Nlc1xuXHRcdGlmIChjdXJyZW50VHJpZ2dlci5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcblx0XHRcdGJvZHkuYWRkQ2xhc3MoJ25hdi1hY3RpdmUnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ym9keS5yZW1vdmVDbGFzcygnbmF2LWFjdGl2ZScpO1xuXHRcdH1cblxuXHRcdC8vIENvbmRpdGlvbmFsIGZvciBhcmlhIGF0dHJcblx0XHRpZiAoY3VycmVudFRyaWdnZXIuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG5cdFx0XHRvcGVuU3ViTWVudUFyaWEoY3VycmVudFRyaWdnZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbG9zZVN1Yk1lbnVBcmlhKGN1cnJlbnRUcmlnZ2VyKTtcblx0XHR9XG5cblx0XHQvLyBTY3JvbGwgVG9wXG5cdFx0bmF2aWdhdGlvbi5zY3JvbGxUb3AoMCk7XG5cblx0XHQvLyBDYWxsIEVkZ2UgRGV0ZWN0b3IuXG5cdFx0bmF2RWRnZURldGVjdC5jaGVja0VsZW1lbnRzKCk7XG5cdH0pO1xufVxuXG4vKipcclxuICogU2xpZGUgVXRpbGl0aWVzXHJcbiAqL1xuXG4vLyBTbGlkZSBuYXYgYnkgZ2l2ZW4gZGVwdGhcbmZ1bmN0aW9uIHNsaWRlTmF2KGRlcHRoKSB7XG5cdG5hdk1haW4uY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCgnICsgZGVwdGggKiAtMTAwICsgJyUpJyk7XG5cdGRpc3BsYXlCYWNrQnV0dG9uKCk7XG59XG5cbi8vIFNob3cgb3IgSGlkZSBCYWNrIEJ1dHRvbiBiYXNlZCBvbiBkZXB0aFxuZnVuY3Rpb24gZGlzcGxheUJhY2tCdXR0b24oKSB7XG5cdGlmIChjdXJyZW50TmF2RGVwdGggPiAwKSB7XG5cdFx0bW9iaWxlQmFja0J1dHRvbi5zaG93KCk7XG5cdH0gZWxzZSB7XG5cdFx0bW9iaWxlQmFja0J1dHRvbi5oaWRlKCk7XG5cdH1cbn1cblxuLyoqXHJcbiAqIENsb3NlIEFsbCBVdGlsaXR5XHJcbiAqL1xuZnVuY3Rpb24gY2xvc2VBbGwoKSB7XG5cdGN1cnJlbnROYXZEZXB0aCA9IDA7XG5cdHNsaWRlTmF2KGN1cnJlbnROYXZEZXB0aCk7XG5cdGNsb3NlTWVudXMoKTtcblx0Y2xvc2VNb2RhbHMoKTtcblx0Ym9keS5yZW1vdmVDbGFzcygnbmF2LWFjdGl2ZScpO1xuXHRtb2JpbGVUcmlnZ2VyLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblx0bmF2aWdhdGlvbi5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG59XG5cbi8qKlxyXG4gKiBDbG9zZSBldmVyeXRoaW5nIHdoZW4gY2xpY2sgaXMgb2ZmIG5hdiBlbGVtZW50c1xyXG4gKi9cbmZ1bmN0aW9uIG91dHNpZGVDbGljaygpIHtcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuXHRcdHJldHVybiAhZS50YXJnZXQuY2xvc2VzdCgnLmpzLW5hdicpID8gY2xvc2VBbGwoKSA6IG51bGw7XG5cdH0pO1xufVxuXG4vLyBDbG9zZSBtZW51IGlmIEVzYyBrZXkgaXMgcHVzaGVkXG5mdW5jdGlvbiBjbG9zZU1lbnVzT25Fc2MoKSB7XG5cdGJvZHkub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xuXHRcdGlmIChlLndoaWNoID09PSAyNykge1xuXHRcdFx0aWYgKGJvZHkuaGFzQ2xhc3MoJ25hdi1hY3RpdmUnKSkge1xuXHRcdFx0XHRjbG9zZUFsbCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxyXG4gKiBXYXRjaCBmb3IgY2xpY2tzXHJcbiAqL1xuZnVuY3Rpb24gcnVuRXZlbnRXYXRjaGVycygpIHtcblx0dG9nZ2xlTmF2RWxlbWVudCgpO1xuXHR0b2dnbGVOYXZFbGVtZW50KG1vZGFsVHJpZ2dlciwgJy5qcy1tb2RhbCcpO1xuXHRvdXRzaWRlQ2xpY2soKTtcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gTW9iaWxlIHNwZWNpZmljIGZ1bmN0aW9uc1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcclxuICogVG9nZ2xlIE1vYmlsZSBOYXZcclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cclxuICovXG5mdW5jdGlvbiB0b2dnbGVNb2JpbGVOYXZpZ2F0aW9uKGV2ZW50KSB7XG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0bW9iaWxlVHJpZ2dlci50b2dnbGVDbGFzcygnaXMtYWN0aXZlJyk7XG5cdG5hdmlnYXRpb24udG9nZ2xlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG5cdGlmIChtb2JpbGVUcmlnZ2VyLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuXHRcdHRvZ2dsZU1vYmlsZUFyaWEoKTtcblx0XHRjbG9zZU1vZGFscygpO1xuXHRcdGJvZHkuYWRkQ2xhc3MoJ25hdi1hY3RpdmUnKTtcblx0fSBlbHNlIHtcblx0XHRhZGRNb2JpbGVBcmlhKCk7XG5cdFx0Y2xvc2VBbGwoKTtcblx0fVxuXG5cdCgwLCBfdXRpbGl0aWVzLnRyaWdnZXJVcGRhdGVUZXh0KSh0cmlnZ2VyVGV4dCk7XG59XG5cbi8vIFRvZ2dsZSBtb2JpbGUgbmF2IGV2ZW50XG5tb2JpbGVUcmlnZ2VyLm9uKCdjbGljaycsIHRvZ2dsZU1vYmlsZU5hdmlnYXRpb24pO1xuXG4vKipcclxuICogQmFjayBidXR0b24gZXZlbnRcclxuICovXG5mdW5jdGlvbiBiYWNrQnV0dG9uKCkge1xuXHRtb2JpbGVCYWNrQnV0dG9uLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcblx0XHQvLyBNYWtlIHN1cmUgdGhlIGN1cnJlbnQgc3ViIGxldmVsIGlzIGRlYWN0aXZhdGVkXG5cdFx0Ly8gdG9nZ2xlTmF2RWxlbWVudCB3aWxsIHRvZ2dsZSB0aGUgaXMtYWN0aXZlIGNsYXNzLlxuXHRcdCQoJy5zdWItbWVudS1sZXZlbC0nICsgY3VycmVudE5hdkRlcHRoKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cblx0XHRjdXJyZW50TmF2RGVwdGgtLTtcblx0XHRzbGlkZU5hdihjdXJyZW50TmF2RGVwdGgpO1xuXHR9KTtcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUnVuIEZ1bmN0aW9uc1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuYWRkQXJpYSgpO1xucnVuRXZlbnRXYXRjaGVycygpO1xuYmFja0J1dHRvbigpO1xuY2xvc2VNZW51c09uRXNjKCk7XG5cbi8vIElmIG1vYmlsZSB1cGRhdGUgYXJpYS5cbmlmIChfdmVyZ2UyLmRlZmF1bHQudmlld3BvcnRXKCkgPCBfdXRpbGl0aWVzLm1vYmlsZVdpZHRoKSB7XG5cdGFkZE1vYmlsZUFyaWEoKTtcbn1cblxuLy8gQ2hlY2sgZm9yIHJlc2l6ZSB0byB1cGRhdGUgYXJpYS5cbiR3aW5kb3cub24oJ3Jlc2l6ZScsICgwLCBfdXRpbGl0aWVzLmRlYm91bmNlKShmdW5jdGlvbiAoKSB7XG5cdGlmIChfdmVyZ2UyLmRlZmF1bHQudmlld3BvcnRXKCkgPj0gX3V0aWxpdGllcy5tb2JpbGVXaWR0aCkge1xuXHRcdGFkZE1vYmlsZUFyaWEoKTtcblx0XHQoMCwgX3V0aWxpdGllcy50cmlnZ2VyVXBkYXRlVGV4dCkodHJpZ2dlclRleHQpO1xuXHRcdGNsb3NlQWxsKCk7XG5cdH1cbn0sIDUwMCkpO1xuXG4vLyBBZGQgZnVuY3Rpb24gdG8gd2luZG93IGZvciB1c2UgZnJvbSBvdGhlciBzY3JpcHRzLlxud2luZG93Lm5hdkNsb3NlQWxsID0gZnVuY3Rpb24gKCkge1xuXHRjbG9zZUFsbCgpO1xufTtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDApKSlcblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbigkKSB7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDVVNUT01cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gZm9vdGVyIG1lbnVzXG52YXIgZm9vdFRyaWdnZXJPbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9vdGVyLW5hdi0xJyk7XG52YXIgZm9vdFRyaWdnZXJUd28gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9vdGVyLW5hdi0yJyk7XG52YXIgZm9vdFRyaWdnZXJUaHJlZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb290ZXItbmF2LTMnKTtcbnZhciB0cmlnZ2VycyA9IFtmb290VHJpZ2dlck9uZSwgZm9vdFRyaWdnZXJUd28sIGZvb3RUcmlnZ2VyVGhyZWVdO1xuXG50cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG5cdHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuXHRcdGlmICh0cmlnZ2VyLmNsYXNzTGlzdC5jb250YWlucygnaXMtYWN0aXZlJykpIHtcblx0XHRcdHRyaWdnZXIuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuXHRcdFx0dHJpZ2dlci5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcblx0XHR9KTtcblxuXHRcdHRyaWdnZXIuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XG5cdH0pO1xufSk7XG5cbi8vIFByb2R1Y3QgUGFnZSBhY2NvcmRpb24gRHJvcGRvd25cbnZhciBhY2NvcmRpb25UcmlnZ2VycyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWRpc2Nsb3N1cmUtdGl0bGUnKSkpO1xuXG5hY2NvcmRpb25UcmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG5cdHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuXHRcdGlmICh0cmlnZ2VyLmNsYXNzTGlzdC5jb250YWlucygnaXMtYWN0aXZlJykpIHtcblx0XHRcdCQodHJpZ2dlcikucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmFyaWFOb3RFeHBhbmRlZCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGFjY29yZGlvblRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcblx0XHRcdCQodHJpZ2dlcikucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmFyaWFOb3RFeHBhbmRlZCgpO1xuXHRcdH0pO1xuXG5cdFx0JCh0cmlnZ2VyKS5hZGRDbGFzcygnaXMtYWN0aXZlJykudG9nZ2xlQXJpYUV4cGFuZGVkKCk7XG5cdH0pO1xufSk7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygwKSkpXG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oJCkge1xuXG4vKipcclxuICogQ1NTMyBCb3ggRGVjb3JhdGlvbiBCcmVha1xyXG4gKiBQb2x5ZmlsbCBmb3IgSUUgYW5kIEVER0VcclxuICovXG5cbi8qKlxyXG4gKiBCb3ggRGVjb3JhdGlvbiBCcmVha1xyXG4gKiBGdW5jdGlvbiB3aWxsIHNwbGl0IGlubmVyIHRleHQgaW50byBzcGFuIHRhZ3MsIHNlcGFyYXRlZCBieSA8YnI+LlxyXG4gKiBVc2VkIGJ5IHRoZSAnYy1xdW90ZScgYmxvY2suXHJcbiAqIEBwYXJhbSBOb2RlIGVsIEhUTUwgZWxlbWVudCB3aXRoIHRleHQgdG8gYmUgcHJvY2Vzc2VkLlxyXG4gKi9cbmZ1bmN0aW9uIGJveERlY29yYXRpb25CcmVhayhlbCkge1xuXHR2YXIgJGVsID0gJChlbCk7XG5cdHZhciAkcGFyZW50ID0gJGVsLnBhcmVudCgpO1xuXHR2YXIgc3RyaW5ncyA9ICQoZWwpLmh0bWwoKS5zcGxpdCgnPGJyPicpO1xuXG5cdCRlbC5yZW1vdmUoKTtcblxuXHQkLmVhY2goc3RyaW5ncywgZnVuY3Rpb24gKGksIHN0cmluZykge1xuXHRcdC8vIFJlbW92ZSBicmVha3Ncblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFxuLywgJycpO1xuXHRcdCRwYXJlbnQuYXBwZW5kKCQoJzxzcGFuPicpLnRleHQoc3RyaW5nKSk7XG5cblx0XHQvLyBSZWFkZCB0aGUgPGJyPiB0YWdzXG5cdFx0aWYgKGkgPCBzdHJpbmdzLmxlbmd0aCAtIDEpIHtcblx0XHRcdCRwYXJlbnQuYXBwZW5kKCc8YnI+Jyk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLyoqXHJcbiAqIEhhcyBCb3ggRGVjb3JhdGlvbiBCcmVha1xyXG4gKi9cbmZ1bmN0aW9uIGhhc0JveERlY29yYXRpb25CcmVhaygpIHtcblx0Ly8gV2UgaGF2ZSB0byB1c2UgdGhpcywgYmVjYXVzZSBJRSBkb2Vzbid0IHVuZGVyc3RhbmQgJ0NTUy5zdXBwb3J0cydcblx0aWYgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9UcmlkZW50L2cpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBDU1Muc3VwcG9ydHMoJyggYm94LWRlY29yYXRpb24tYnJlYWs6IGNsb25lICkgb3IgKCAtd2Via2l0LWJveC1kZWNvcmF0aW9uLWJyZWFrOiBjbG9uZSApJyk7XG59O1xuXG5pZiAoIWhhc0JveERlY29yYXRpb25CcmVhaygpKSB7XG5cdGJveERlY29yYXRpb25CcmVhayhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtYm94LWRlY28nKSk7XG59XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygwKSkpXG5cbi8qKiovIH0pLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSGVybyBTbGlkZXJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciBIZXJvU2xpZGVyID0gZnVuY3Rpb24gKCkge1xuXHRmdW5jdGlvbiBIZXJvU2xpZGVyKHNsaWRlU2VsZWN0b3IsIHNsaWRlRGVsYXkpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGVyb1NsaWRlcik7XG5cblx0XHR0aGlzLnNsaWRlU2VsZWN0b3IgPSBzbGlkZVNlbGVjdG9yO1xuXHRcdHRoaXMuc2xpZGVEZWxheSA9IHNsaWRlRGVsYXkgfHwgNDAwMDsgLy8gRGVmYXVsdHMgdG8gNDAwMG1zXG5cdFx0dGhpcy5zbGlkZXMgPSB0aGlzLmNvbGxlY3RTbGlkZXMoKTtcblx0XHR0aGlzLmN1cnJlbnRTbGlkZUluZGV4ID0gMDtcblx0XHR0aGlzLmN1cnJlbnRTbGlkZUVsZW1lbnQ7XG5cdFx0dGhpcy5fc2xpZGVMb29wO1xuXHRcdHRoaXMuX2lzUnVubmluZztcblxuXHRcdC8vIEluaXRcblx0XHR0aGlzLm1haW4oKTtcblx0fVxuXG5cdC8qKlxyXG4gICogTWFpblxyXG4gICovXG5cblxuXHRfY3JlYXRlQ2xhc3MoSGVyb1NsaWRlciwgW3tcblx0XHRrZXk6ICdtYWluJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gbWFpbigpIHtcblx0XHRcdC8vIEJhaWwgaWYgMSBvciBsZXNzIHNsaWRlcyBhcmUgZm91bmQuXG5cdFx0XHRpZiAodGhpcy5zbGlkZXMgPD0gMSkgcmV0dXJuO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGluaXRpYWwgc2xpZGUuXG5cdFx0XHR0aGlzLmN1cnJlbnRTbGlkZUVsZW1lbnQgPSB0aGlzLmFjdGl2YXRlU2xpZGUodGhpcy5jdXJyZW50U2xpZGVJbmRleCk7XG5cblx0XHRcdC8vIFN0YXJ0IGxvb3Bpbmcgb3ZlciB0aGUgc2xpZGVzLlxuXHRcdFx0dGhpcy5zdGFydExvb3AoKTtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBTdGFydCBMb29wXHJcbiAgICovXG5cblx0fSwge1xuXHRcdGtleTogJ3N0YXJ0TG9vcCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHN0YXJ0TG9vcCgpIHtcblx0XHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHRcdHRoaXMuX2lzUnVubmluZyA9IHRydWU7XG5cblx0XHRcdHRoaXMuX3NsaWRlTG9vcCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0X3RoaXMubmV4dFNsaWRlKCk7XG5cdFx0XHR9LCB0aGlzLnNsaWRlRGVsYXkpO1xuXHRcdH1cblxuXHRcdC8qKlxyXG4gICAqIFN0b3AgTG9vcFxyXG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICdzdG9wTG9vcCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHN0b3BMb29wKCkge1xuXHRcdFx0dGhpcy5faXNSdW5uaW5nID0gZmFsc2U7XG5cblx0XHRcdGNsZWFySW50ZXJ2YWwodGhpcy5fc2xpZGVMb29wKTtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBUb2dnbGUgTG9vcFxyXG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICd0b2dnbGVMb29wJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlTG9vcCgpIHtcblx0XHRcdHRoaXMuX2lzUnVubmluZyA/IHRoaXMuc3RvcExvb3AoKSA6IHRoaXMuc3RhcnRMb29wKCk7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogTmV4dCBTbGlkZVxyXG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICduZXh0U2xpZGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBuZXh0U2xpZGUoKSB7XG5cdFx0XHQvLyBEZWFjdGl2YXRlIGN1cnJlbnQgc2xpZGUuXG5cdFx0XHR0aGlzLmRlYWN0aXZhdGVTbGlkZSh0aGlzLmN1cnJlbnRTbGlkZUluZGV4KTtcblxuXHRcdFx0Ly8gR28gYmFjayB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzbGlkZSBhcnJheSBpZiBvbiBsYXN0IGl0ZW0sXG5cdFx0XHQvLyBvdGhlcndpc2UgaW5jcmVtZW50IHRoZSBzbGlkZSBpbmRleC5cblx0XHRcdGlmICh0aGlzLmN1cnJlbnRTbGlkZUluZGV4ID09PSB0aGlzLnNsaWRlcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdHRoaXMuY3VycmVudFNsaWRlSW5kZXggPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5jdXJyZW50U2xpZGVJbmRleCsrO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmN1cnJlbnRTbGlkZUVsZW1lbnQgPSB0aGlzLmFjdGl2YXRlU2xpZGUodGhpcy5jdXJyZW50U2xpZGVJbmRleCk7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQWN0aXZhdGUgU2xpZGVcclxuICAgKi9cblxuXHR9LCB7XG5cdFx0a2V5OiAnYWN0aXZhdGVTbGlkZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFjdGl2YXRlU2xpZGUoc2xpZGVOdW1iZXIpIHtcblx0XHRcdHZhciBuZXdBY3RpdmVTbGlkZSA9IHRoaXMuc2xpZGVzW3NsaWRlTnVtYmVyXTtcblx0XHRcdG5ld0FjdGl2ZVNsaWRlLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZS1zbGlkZScpO1xuXG5cdFx0XHRyZXR1cm4gbmV3QWN0aXZlU2xpZGU7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogRGVhY3RpdmF0ZSBTbGlkZVxyXG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICdkZWFjdGl2YXRlU2xpZGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBkZWFjdGl2YXRlU2xpZGUoc2xpZGVOdW1iZXIpIHtcblx0XHRcdHRoaXMuc2xpZGVzW3NsaWRlTnVtYmVyXS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUtc2xpZGUnKTtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBDb2xsZWN0IFNsaWRlc1xyXG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICdjb2xsZWN0U2xpZGVzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY29sbGVjdFNsaWRlcygpIHtcblx0XHRcdHJldHVybiBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5zbGlkZVNlbGVjdG9yKSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEhlcm9TbGlkZXI7XG59KCk7XG5cbndpbmRvdy5oZXJvU2xpZGVyID0gbmV3IEhlcm9TbGlkZXIoJy5qcy1ob21lcGFnZS1zbGlkZScsIDQwMDApO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSG9tZSBQYWdlIEhlcm8gQ29udHJvbHNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG52YXIgaGVyb1NsaWRlclBhdXNlUGxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1oZXJvLXNsaWRlci1jb250cm9sJyk7XG5cbmlmIChoZXJvU2xpZGVyUGF1c2VQbGF5KSB7XG5cdHZhciBidXR0b25UZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWhlcm8tc2xpZGVyLWNvbnRyb2xfX3RleHQnKTtcblxuXHRoZXJvU2xpZGVyUGF1c2VQbGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcblx0XHR3aW5kb3cuaGVyb1NsaWRlci50b2dnbGVMb29wKCk7IC8vIENhbGwgc2xpZGVyJ3MgdG9nZ2xlIG1ldGhvZFxuXG5cdFx0aGVyb1NsaWRlclBhdXNlUGxheS5jbGFzc0xpc3QudG9nZ2xlKCdpcy1wbGF5aW5nJyk7XG5cblx0XHRidXR0b25UZXh0LnRleHRDb250ZW50ID0gYnV0dG9uVGV4dC50ZXh0Q29udGVudCA9PT0gJ1BhdXNlJyA/ICdQbGF5JyA6ICdQYXVzZSc7XG5cdH0pO1xufVxuXG4vKioqLyB9KSxcbi8qIDIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKCQpIHtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEJ1dHRvbiBFZmZlY3RzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5bXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idXR0b24nKSkpLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuXHRyZXR1cm4gYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhvdmVyRWZmZWN0KTtcbn0pO1xuXG5mdW5jdGlvbiBob3ZlckVmZmVjdChlKSB7XG5cdHZhciB4ID0gZS5wYWdlWCAtICQoZS50YXJnZXQpLm9mZnNldCgpLmxlZnQ7XG5cdHZhciB5ID0gZS5wYWdlWSAtICQoZS50YXJnZXQpLm9mZnNldCgpLnRvcDtcblxuXHRlLnRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS14JywgeCArICdweCcpO1xuXHRlLnRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS15JywgeSArICdweCcpO1xufVxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oMCkpKVxuXG4vKioqLyB9KSxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk1vZGFscyA9IHVuZGVmaW5lZDtcblxudmFyIF91dGlsaXRpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH0gLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gTW9kYWxzXG4vLyBBdXRob3I6IFBhdWwgQWxsZW5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG52YXIgTW9kYWxzID0gZXhwb3J0cy5Nb2RhbHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHR2YXIgZGVmYXVsdHMgPSB7XG5cdFx0bW9kYWxEYXRhQXR0cjogJ2RhdGEtbW9kYWwnLFxuXHRcdGFkZEJvZHlDbGFzczogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIEJ1aWxkTW9kYWxzKG9wdGlvbnMpIHtcblx0XHR2YXIgcHVibGljQVBJcyA9IHt9O1xuXHRcdHZhciBzZXR0aW5ncyA9IHZvaWQgMDtcblx0XHR2YXIgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblxuXHRcdC8qKlxyXG4gICAqIFByaXZhdGUgTWV0aG9kc1xyXG4gICAqL1xuXHRcdGZ1bmN0aW9uIHJ1bk1vZGFscygpIHtcblx0XHRcdHZhciBtb2RhbHMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1snICsgc2V0dGluZ3MubW9kYWxEYXRhQXR0ciArICddJykpKTtcblxuXHRcdFx0aWYgKG1vZGFscy5sZW5ndGggPD0gMCkgcmV0dXJuIGZhbHNlOyAvLyBObyBtb2RhbHMgZm91bmRcblxuXHRcdFx0bW9kYWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGFsKSB7XG5cdFx0XHRcdHZhciBtb2RhbElkID0gbW9kYWwuZ2V0QXR0cmlidXRlKHNldHRpbmdzLm1vZGFsRGF0YUF0dHIpO1xuXHRcdFx0XHRwdWJsaWNBUElzLm1vZGFsc1ttb2RhbElkXSA9IG1vZGFsO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEhhbmRsZSBjbGljayBldmVudHNcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcblx0XHRcdFx0aGFuZGxlQ2xvc2UoZSk7XG5cdFx0XHRcdGhhbmRsZU9wZW4oZSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdGlmIChlLndoaWNoID09PSAyNykge1xuXHRcdFx0XHRcdGlmIChzZXR0aW5ncy5hZGRCb2R5Q2xhc3MpIGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWwtYWN0aXZlJyk7XG5cdFx0XHRcdFx0cHVibGljQVBJcy5jbG9zZUFsbE1vZGFscygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBIYW5kbGUgT3BlblxyXG4gICAqL1xuXHRcdGZ1bmN0aW9uIGhhbmRsZU9wZW4oZSkge1xuXHRcdFx0Ly8gRmlyc3QsIGNoZWNrIGZvciBhbiBhbmNob3IgdGFnXG5cdFx0XHR2YXIgYW5jaG9yID0gZS50YXJnZXQuY2xvc2VzdCgnYScpO1xuXHRcdFx0aWYgKCFhbmNob3IpIHJldHVybjtcblxuXHRcdFx0Ly8gLmhyZWYgaXMgbmVlZGVkIGZvciA8YT4gdGFncyBpbnNpZGUgYW4gU1ZHLlxuXHRcdFx0Ly8gQ2hlY2sgaWYgd2UgY2FuIGdldCBvbmUgb3IgdGhlIG90aGVyLlxuXHRcdFx0dmFyIGFuY2hvckhhc2ggPSBhbmNob3IuaGFzaCB8fCBhbmNob3IuaHJlZi5iYXNlVmFsO1xuXG5cdFx0XHQvLyBCYWlsIGlmIHRoZSBoYXNoIGlzIG5vdCBmb3JtYXR0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoIWlzVGFyZ2V0VXJsKGFuY2hvckhhc2gpKSByZXR1cm47XG5cblx0XHRcdC8vIFByZXBhcmUgdGhlIGhhc2ggdG8gYmUgY2hlY2tlZFxuXHRcdFx0dmFyIGhhc2hUYXJnZXQgPSBhbmNob3JIYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG5cblx0XHRcdGlmIChjaGVja0Zvck1vZGFsSWQoaGFzaFRhcmdldCkpIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRwdWJsaWNBUElzLm9wZW5Nb2RhbChoYXNoVGFyZ2V0KTtcblx0XHRcdFx0aWYgKHNldHRpbmdzLmFkZEJvZHlDbGFzcykgYm9keS5jbGFzc0xpc3QuYWRkKCdtb2RhbC1hY3RpdmUnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBIYW5kbGUgQ2xvc2VcclxuICAgKi9cblx0XHRmdW5jdGlvbiBoYW5kbGVDbG9zZShlKSB7XG5cdFx0XHRpZiAoIXB1YmxpY0FQSXMuYWN0aXZlTW9kYWwpIHJldHVybjsgLy8gUmV0dXJuIGlmIHRoZXJlIGlzIG5vdCBhbiBhY3RpdmUgbW9kYWxcblxuXHRcdFx0aWYgKGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1jbG9zZS1tb2RhbCcpIHx8IC8vIGNsaWNrIG9uIGNsb3NlIHRyaWdnZXJcblx0XHRcdCFlLnRhcmdldC5jbG9zZXN0KCdbJyArIHNldHRpbmdzLm1vZGFsRGF0YUF0dHIgKyAnXScpIC8vIGNsaWNrcyBvZmYgbW9kYWxcblx0XHRcdCkge1xuXHRcdFx0XHRcdGlmIChzZXR0aW5ncy5hZGRCb2R5Q2xhc3MpIGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWwtYWN0aXZlJyk7XG5cdFx0XHRcdFx0cHVibGljQVBJcy5jbG9zZUFsbE1vZGFscygpO1xuXHRcdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogQ2hlY2sgaWYgdXJsIGlzIGEgdGFyZ2V0IHVybCB3aXRoIHRoZSAjXHJcbiAgICovXG5cdFx0ZnVuY3Rpb24gaXNUYXJnZXRVcmwodXJsKSB7XG5cdFx0XHR2YXIgdGVzdCA9IG5ldyBSZWdFeHAoL14jL2dtKTtcblx0XHRcdHJldHVybiB0ZXN0LnRlc3QodXJsKTtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBDaGVjayBpZiBNb2RhbCBpcyBpbiB0aGUgbGlzdCBvZiByZWdpc3RlcmVkIE1vZGFsc1xyXG4gICAqL1xuXHRcdGZ1bmN0aW9uIGNoZWNrRm9yTW9kYWxJZChpZCkge1xuXHRcdFx0cmV0dXJuIHB1YmxpY0FQSXMubW9kYWxzLmhhc093blByb3BlcnR5KGlkKTtcblx0XHR9XG5cblx0XHQvKipcclxuICAgKiBQdWJsaWMgQVBJc1xyXG4gICAqL1xuXHRcdHB1YmxpY0FQSXMubW9kYWxzID0ge307XG5cblx0XHRwdWJsaWNBUElzLmFjdGl2ZU1vZGFsID0gbnVsbDtcblxuXHRcdHB1YmxpY0FQSXMub3Blbk1vZGFsID0gZnVuY3Rpb24gKG1vZGFsSWQpIHtcblx0XHRcdHB1YmxpY0FQSXMubW9kYWxzW21vZGFsSWRdLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuXHRcdFx0cHVibGljQVBJcy5tb2RhbHNbbW9kYWxJZF0uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG5cdFx0XHRwdWJsaWNBUElzLmFjdGl2ZU1vZGFsID0gcHVibGljQVBJcy5tb2RhbHNbbW9kYWxJZF07XG5cdFx0fTtcblxuXHRcdHB1YmxpY0FQSXMuY2xvc2VBbGxNb2RhbHMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRmb3IgKHZhciBtb2RhbCBpbiBwdWJsaWNBUElzLm1vZGFscykge1xuXHRcdFx0XHRwdWJsaWNBUElzLm1vZGFsc1ttb2RhbF0uY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG5cdFx0XHRcdHB1YmxpY0FQSXMubW9kYWxzW21vZGFsXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cdFx0XHR9XG5cblx0XHRcdHB1YmxpY0FQSXMuYWN0aXZlTW9kYWwgPSBudWxsO1xuXHRcdH07XG5cblx0XHRwdWJsaWNBUElzLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHRcdFx0c2V0dGluZ3MgPSAoMCwgX3V0aWxpdGllcy5leHRlbmQpKGRlZmF1bHRzLCBvcHRpb25zIHx8IHt9KTtcblx0XHRcdHJ1bk1vZGFscygpO1xuXHRcdH07XG5cblx0XHRwdWJsaWNBUElzLmluaXQob3B0aW9ucyk7XG5cblx0XHRyZXR1cm4gcHVibGljQVBJcztcblx0fVxuXG5cdHJldHVybiBCdWlsZE1vZGFscztcbn0od2luZG93LCBkb2N1bWVudCk7XG5cbndpbmRvdy5iYXNlTW9kYWxzID0gbmV3IE1vZGFscygpO1xuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGpRdWVyeSkge1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFWFRFTkRcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXHJcbiAqIEFjY2Vzc2liaWxpdHlcclxuICovXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0dG9nZ2xlQXJpYUhpZGRlbjogZnVuY3Rpb24gdG9nZ2xlQXJpYUhpZGRlbigpIHtcblx0XHRpZiAoIXRoaXMuYXR0cignYXJpYS1oaWRkZW4nKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBoaWRkZW4gPSB0aGlzLmF0dHIoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJyB8fCBmYWxzZTtcblx0XHRyZXR1cm4gdGhpcy5hdHRyKCdhcmlhLWhpZGRlbicsICFoaWRkZW4pO1xuXHR9LFxuXHRhcmlhSGlkZGVuVHJ1ZTogZnVuY3Rpb24gYXJpYUhpZGRlblRydWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXHR9LFxuXHRhcmlhSGlkZGVuRmFsc2U6IGZ1bmN0aW9uIGFyaWFIaWRkZW5GYWxzZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXHR9LFxuXHR0b2dnbGVBcmlhRXhwYW5kZWQ6IGZ1bmN0aW9uIHRvZ2dsZUFyaWFFeHBhbmRlZCgpIHtcblx0XHRpZiAoIXRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGhpZGRlbiA9IHRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcpID09PSAndHJ1ZScgfHwgZmFsc2U7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcsICFoaWRkZW4pO1xuXHR9LFxuXHRhcmlhRXhwYW5kZWQ6IGZ1bmN0aW9uIGFyaWFFeHBhbmRlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcblx0fSxcblx0YXJpYU5vdEV4cGFuZGVkOiBmdW5jdGlvbiBhcmlhTm90RXhwYW5kZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuXHR9XG59KTtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDApKSlcblxuLyoqKi8gfSksXG4vKiAyNCAqLyxcbi8qIDI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuXG4vKioqLyB9KSxcbi8qIDI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbl9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG4vLyBMYXp5c2l6ZXNcbl9fd2VicGFja19yZXF1aXJlX18oMik7IC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FGYXJrYXMvbGF6eXNpemVzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJTkRFWFxuLy9cbi8vIEVudHJ5IHBvaW50IGZpbGUgZm9yIHdlYnBhY2suXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIFNDU1Ncbl9fd2VicGFja19yZXF1aXJlX18oMTMpOyAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hRmFya2FzL2xhenlzaXplcyNwYXJlbnQtZml0LWV4dGVuc2lvblxuX193ZWJwYWNrX3JlcXVpcmVfXygxMik7IC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FGYXJrYXMvbGF6eXNpemVzI2Jnc2V0LXBsdWdpbi0tLWxhenktcmVzcG9uc2l2ZS1iYWNrZ3JvdW5kLWltYWdlXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDExKTsgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYUZhcmthcy9sYXp5c2l6ZXMvdHJlZS9naC1wYWdlcy9wbHVnaW5zL3VudmVpbGhvb2tzXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTsgLy8gSUUgMTEuIE9ubHkgdW5jb21tZW50IGFuZCB1c2UgZm9yIHN1cHBvcnQgaW4gSUUuXG5cbi8vIGpRdWVyeSBFeHRlbmRcblxuXG4vLyBNb2RhbHNcblxuXG4vLyBCdXR0b25zXG5cblxuLy8gSG9tZXBhZ2UgSGVybyBTbGlkZXJcblxuXG4vLyBEZXRlY3QgRWRnZSBVdGlsXG5cblxuLy8gUG9seWZpbGxzXG5cblxuLy8gTmF2aWdhdGlvblxuXG5cbi8vIFRhYiBhY2NvcmRpb25cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pOyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjYpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcclxuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG4iLCIoZnVuY3Rpb24od2luZG93LCBmYWN0b3J5KSB7XG5cdHZhciBsYXp5U2l6ZXMgPSBmYWN0b3J5KHdpbmRvdywgd2luZG93LmRvY3VtZW50KTtcblx0d2luZG93LmxhenlTaXplcyA9IGxhenlTaXplcztcblx0aWYodHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBsYXp5U2l6ZXM7XG5cdH1cbn0od2luZG93LCBmdW5jdGlvbiBsKHdpbmRvdywgZG9jdW1lbnQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKmpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXHRpZighZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSl7cmV0dXJuO31cblxuXHR2YXIgbGF6eXNpemVzLCBsYXp5U2l6ZXNDb25maWc7XG5cblx0dmFyIGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblx0dmFyIERhdGUgPSB3aW5kb3cuRGF0ZTtcblxuXHR2YXIgc3VwcG9ydFBpY3R1cmUgPSB3aW5kb3cuSFRNTFBpY3R1cmVFbGVtZW50O1xuXG5cdHZhciBfYWRkRXZlbnRMaXN0ZW5lciA9ICdhZGRFdmVudExpc3RlbmVyJztcblxuXHR2YXIgX2dldEF0dHJpYnV0ZSA9ICdnZXRBdHRyaWJ1dGUnO1xuXG5cdHZhciBhZGRFdmVudExpc3RlbmVyID0gd2luZG93W19hZGRFdmVudExpc3RlbmVyXTtcblxuXHR2YXIgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0O1xuXG5cdHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHNldFRpbWVvdXQ7XG5cblx0dmFyIHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjaztcblxuXHR2YXIgcmVnUGljdHVyZSA9IC9ecGljdHVyZSQvaTtcblxuXHR2YXIgbG9hZEV2ZW50cyA9IFsnbG9hZCcsICdlcnJvcicsICdsYXp5aW5jbHVkZWQnLCAnX2xhenlsb2FkZWQnXTtcblxuXHR2YXIgcmVnQ2xhc3NDYWNoZSA9IHt9O1xuXG5cdHZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cblx0dmFyIGhhc0NsYXNzID0gZnVuY3Rpb24oZWxlLCBjbHMpIHtcblx0XHRpZighcmVnQ2xhc3NDYWNoZVtjbHNdKXtcblx0XHRcdHJlZ0NsYXNzQ2FjaGVbY2xzXSA9IG5ldyBSZWdFeHAoJyhcXFxcc3xeKScrY2xzKycoXFxcXHN8JCknKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlZ0NsYXNzQ2FjaGVbY2xzXS50ZXN0KGVsZVtfZ2V0QXR0cmlidXRlXSgnY2xhc3MnKSB8fCAnJykgJiYgcmVnQ2xhc3NDYWNoZVtjbHNdO1xuXHR9O1xuXG5cdHZhciBhZGRDbGFzcyA9IGZ1bmN0aW9uKGVsZSwgY2xzKSB7XG5cdFx0aWYgKCFoYXNDbGFzcyhlbGUsIGNscykpe1xuXHRcdFx0ZWxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlW19nZXRBdHRyaWJ1dGVdKCdjbGFzcycpIHx8ICcnKS50cmltKCkgKyAnICcgKyBjbHMpO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihlbGUsIGNscykge1xuXHRcdHZhciByZWc7XG5cdFx0aWYgKChyZWcgPSBoYXNDbGFzcyhlbGUsY2xzKSkpIHtcblx0XHRcdGVsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGVsZVtfZ2V0QXR0cmlidXRlXSgnY2xhc3MnKSB8fCAnJykucmVwbGFjZShyZWcsICcgJykpO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgYWRkUmVtb3ZlTG9hZEV2ZW50cyA9IGZ1bmN0aW9uKGRvbSwgZm4sIGFkZCl7XG5cdFx0dmFyIGFjdGlvbiA9IGFkZCA/IF9hZGRFdmVudExpc3RlbmVyIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuXHRcdGlmKGFkZCl7XG5cdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGRvbSwgZm4pO1xuXHRcdH1cblx0XHRsb2FkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24oZXZ0KXtcblx0XHRcdGRvbVthY3Rpb25dKGV2dCwgZm4pO1xuXHRcdH0pO1xuXHR9O1xuXG5cdHZhciB0cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbihlbGVtLCBuYW1lLCBkZXRhaWwsIG5vQnViYmxlcywgbm9DYW5jZWxhYmxlKXtcblx0XHR2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcblxuXHRcdGlmKCFkZXRhaWwpe1xuXHRcdFx0ZGV0YWlsID0ge307XG5cdFx0fVxuXG5cdFx0ZGV0YWlsLmluc3RhbmNlID0gbGF6eXNpemVzO1xuXG5cdFx0ZXZlbnQuaW5pdEN1c3RvbUV2ZW50KG5hbWUsICFub0J1YmJsZXMsICFub0NhbmNlbGFibGUsIGRldGFpbCk7XG5cblx0XHRlbGVtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdHJldHVybiBldmVudDtcblx0fTtcblxuXHR2YXIgdXBkYXRlUG9seWZpbGwgPSBmdW5jdGlvbiAoZWwsIGZ1bGwpe1xuXHRcdHZhciBwb2x5ZmlsbDtcblx0XHRpZiggIXN1cHBvcnRQaWN0dXJlICYmICggcG9seWZpbGwgPSAod2luZG93LnBpY3R1cmVmaWxsIHx8IGxhenlTaXplc0NvbmZpZy5wZikgKSApe1xuXHRcdFx0cG9seWZpbGwoe3JlZXZhbHVhdGU6IHRydWUsIGVsZW1lbnRzOiBbZWxdfSk7XG5cdFx0fSBlbHNlIGlmKGZ1bGwgJiYgZnVsbC5zcmMpe1xuXHRcdFx0ZWwuc3JjID0gZnVsbC5zcmM7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBnZXRDU1MgPSBmdW5jdGlvbiAoZWxlbSwgc3R5bGUpe1xuXHRcdHJldHVybiAoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtLCBudWxsKSB8fCB7fSlbc3R5bGVdO1xuXHR9O1xuXG5cdHZhciBnZXRXaWR0aCA9IGZ1bmN0aW9uKGVsZW0sIHBhcmVudCwgd2lkdGgpe1xuXHRcdHdpZHRoID0gd2lkdGggfHwgZWxlbS5vZmZzZXRXaWR0aDtcblxuXHRcdHdoaWxlKHdpZHRoIDwgbGF6eVNpemVzQ29uZmlnLm1pblNpemUgJiYgcGFyZW50ICYmICFlbGVtLl9sYXp5c2l6ZXNXaWR0aCl7XG5cdFx0XHR3aWR0aCA9ICBwYXJlbnQub2Zmc2V0V2lkdGg7XG5cdFx0XHRwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gd2lkdGg7XG5cdH07XG5cblx0dmFyIHJBRiA9IChmdW5jdGlvbigpe1xuXHRcdHZhciBydW5uaW5nLCB3YWl0aW5nO1xuXHRcdHZhciBmaXJzdEZucyA9IFtdO1xuXHRcdHZhciBzZWNvbmRGbnMgPSBbXTtcblx0XHR2YXIgZm5zID0gZmlyc3RGbnM7XG5cblx0XHR2YXIgcnVuID0gZnVuY3Rpb24oKXtcblx0XHRcdHZhciBydW5GbnMgPSBmbnM7XG5cblx0XHRcdGZucyA9IGZpcnN0Rm5zLmxlbmd0aCA/IHNlY29uZEZucyA6IGZpcnN0Rm5zO1xuXG5cdFx0XHRydW5uaW5nID0gdHJ1ZTtcblx0XHRcdHdhaXRpbmcgPSBmYWxzZTtcblxuXHRcdFx0d2hpbGUocnVuRm5zLmxlbmd0aCl7XG5cdFx0XHRcdHJ1bkZucy5zaGlmdCgpKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJ1bm5pbmcgPSBmYWxzZTtcblx0XHR9O1xuXG5cdFx0dmFyIHJhZkJhdGNoID0gZnVuY3Rpb24oZm4sIHF1ZXVlKXtcblx0XHRcdGlmKHJ1bm5pbmcgJiYgIXF1ZXVlKXtcblx0XHRcdFx0Zm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZucy5wdXNoKGZuKTtcblxuXHRcdFx0XHRpZighd2FpdGluZyl7XG5cdFx0XHRcdFx0d2FpdGluZyA9IHRydWU7XG5cdFx0XHRcdFx0KGRvY3VtZW50LmhpZGRlbiA/IHNldFRpbWVvdXQgOiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpKHJ1bik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmFmQmF0Y2guX2xzRmx1c2ggPSBydW47XG5cblx0XHRyZXR1cm4gcmFmQmF0Y2g7XG5cdH0pKCk7XG5cblx0dmFyIHJBRkl0ID0gZnVuY3Rpb24oZm4sIHNpbXBsZSl7XG5cdFx0cmV0dXJuIHNpbXBsZSA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0ckFGKGZuKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzO1xuXHRcdFx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0XHRcdFx0ckFGKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0Zm4uYXBwbHkodGhhdCwgYXJncyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdDtcblx0fTtcblxuXHR2YXIgdGhyb3R0bGUgPSBmdW5jdGlvbihmbil7XG5cdFx0dmFyIHJ1bm5pbmc7XG5cdFx0dmFyIGxhc3RUaW1lID0gMDtcblx0XHR2YXIgZ0RlbGF5ID0gbGF6eVNpemVzQ29uZmlnLnRocm90dGxlRGVsYXk7XG5cdFx0dmFyIHJJQ1RpbWVvdXQgPSBsYXp5U2l6ZXNDb25maWcucmljVGltZW91dDtcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24oKXtcblx0XHRcdHJ1bm5pbmcgPSBmYWxzZTtcblx0XHRcdGxhc3RUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRcdGZuKCk7XG5cdFx0fTtcblx0XHR2YXIgaWRsZUNhbGxiYWNrID0gcmVxdWVzdElkbGVDYWxsYmFjayAmJiBySUNUaW1lb3V0ID4gNDkgP1xuXHRcdFx0ZnVuY3Rpb24oKXtcblx0XHRcdFx0cmVxdWVzdElkbGVDYWxsYmFjayhydW4sIHt0aW1lb3V0OiBySUNUaW1lb3V0fSk7XG5cblx0XHRcdFx0aWYocklDVGltZW91dCAhPT0gbGF6eVNpemVzQ29uZmlnLnJpY1RpbWVvdXQpe1xuXHRcdFx0XHRcdHJJQ1RpbWVvdXQgPSBsYXp5U2l6ZXNDb25maWcucmljVGltZW91dDtcblx0XHRcdFx0fVxuXHRcdFx0fSA6XG5cdFx0XHRyQUZJdChmdW5jdGlvbigpe1xuXHRcdFx0XHRzZXRUaW1lb3V0KHJ1bik7XG5cdFx0XHR9LCB0cnVlKVxuXHRcdDtcblxuXHRcdHJldHVybiBmdW5jdGlvbihpc1ByaW9yaXR5KXtcblx0XHRcdHZhciBkZWxheTtcblxuXHRcdFx0aWYoKGlzUHJpb3JpdHkgPSBpc1ByaW9yaXR5ID09PSB0cnVlKSl7XG5cdFx0XHRcdHJJQ1RpbWVvdXQgPSAzMztcblx0XHRcdH1cblxuXHRcdFx0aWYocnVubmluZyl7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cnVubmluZyA9ICB0cnVlO1xuXG5cdFx0XHRkZWxheSA9IGdEZWxheSAtIChEYXRlLm5vdygpIC0gbGFzdFRpbWUpO1xuXG5cdFx0XHRpZihkZWxheSA8IDApe1xuXHRcdFx0XHRkZWxheSA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmKGlzUHJpb3JpdHkgfHwgZGVsYXkgPCA5KXtcblx0XHRcdFx0aWRsZUNhbGxiYWNrKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGlkbGVDYWxsYmFjaywgZGVsYXkpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cblx0Ly9iYXNlZCBvbiBodHRwOi8vbW9kZXJuamF2YXNjcmlwdC5ibG9nc3BvdC5kZS8yMDEzLzA4L2J1aWxkaW5nLWJldHRlci1kZWJvdW5jZS5odG1sXG5cdHZhciBkZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMpIHtcblx0XHR2YXIgdGltZW91dCwgdGltZXN0YW1wO1xuXHRcdHZhciB3YWl0ID0gOTk7XG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aW1lb3V0ID0gbnVsbDtcblx0XHRcdGZ1bmMoKTtcblx0XHR9O1xuXHRcdHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGxhc3QgPSBEYXRlLm5vdygpIC0gdGltZXN0YW1wO1xuXG5cdFx0XHRpZiAobGFzdCA8IHdhaXQpIHtcblx0XHRcdFx0c2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0KHJlcXVlc3RJZGxlQ2FsbGJhY2sgfHwgcnVuKShydW4pO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuXG5cdFx0XHRpZiAoIXRpbWVvdXQpIHtcblx0XHRcdFx0dGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cblx0KGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByb3A7XG5cblx0XHR2YXIgbGF6eVNpemVzRGVmYXVsdHMgPSB7XG5cdFx0XHRsYXp5Q2xhc3M6ICdsYXp5bG9hZCcsXG5cdFx0XHRsb2FkZWRDbGFzczogJ2xhenlsb2FkZWQnLFxuXHRcdFx0bG9hZGluZ0NsYXNzOiAnbGF6eWxvYWRpbmcnLFxuXHRcdFx0cHJlbG9hZENsYXNzOiAnbGF6eXByZWxvYWQnLFxuXHRcdFx0ZXJyb3JDbGFzczogJ2xhenllcnJvcicsXG5cdFx0XHQvL3N0cmljdENsYXNzOiAnbGF6eXN0cmljdCcsXG5cdFx0XHRhdXRvc2l6ZXNDbGFzczogJ2xhenlhdXRvc2l6ZXMnLFxuXHRcdFx0c3JjQXR0cjogJ2RhdGEtc3JjJyxcblx0XHRcdHNyY3NldEF0dHI6ICdkYXRhLXNyY3NldCcsXG5cdFx0XHRzaXplc0F0dHI6ICdkYXRhLXNpemVzJyxcblx0XHRcdC8vcHJlbG9hZEFmdGVyTG9hZDogZmFsc2UsXG5cdFx0XHRtaW5TaXplOiA0MCxcblx0XHRcdGN1c3RvbU1lZGlhOiB7fSxcblx0XHRcdGluaXQ6IHRydWUsXG5cdFx0XHRleHBGYWN0b3I6IDEuNSxcblx0XHRcdGhGYWM6IDAuOCxcblx0XHRcdGxvYWRNb2RlOiAyLFxuXHRcdFx0bG9hZEhpZGRlbjogdHJ1ZSxcblx0XHRcdHJpY1RpbWVvdXQ6IDAsXG5cdFx0XHR0aHJvdHRsZURlbGF5OiAxMjUsXG5cdFx0fTtcblxuXHRcdGxhenlTaXplc0NvbmZpZyA9IHdpbmRvdy5sYXp5U2l6ZXNDb25maWcgfHwgd2luZG93LmxhenlzaXplc0NvbmZpZyB8fCB7fTtcblxuXHRcdGZvcihwcm9wIGluIGxhenlTaXplc0RlZmF1bHRzKXtcblx0XHRcdGlmKCEocHJvcCBpbiBsYXp5U2l6ZXNDb25maWcpKXtcblx0XHRcdFx0bGF6eVNpemVzQ29uZmlnW3Byb3BdID0gbGF6eVNpemVzRGVmYXVsdHNbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0d2luZG93LmxhenlTaXplc0NvbmZpZyA9IGxhenlTaXplc0NvbmZpZztcblxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdGlmKGxhenlTaXplc0NvbmZpZy5pbml0KXtcblx0XHRcdFx0aW5pdCgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KSgpO1xuXG5cdHZhciBsb2FkZXIgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgcHJlbG9hZEVsZW1zLCBpc0NvbXBsZXRlZCwgcmVzZXRQcmVsb2FkaW5nVGltZXIsIGxvYWRNb2RlLCBzdGFydGVkO1xuXG5cdFx0dmFyIGVMdlcsIGVsdkgsIGVMdG9wLCBlTGxlZnQsIGVMcmlnaHQsIGVMYm90dG9tO1xuXG5cdFx0dmFyIGRlZmF1bHRFeHBhbmQsIHByZWxvYWRFeHBhbmQsIGhGYWM7XG5cblx0XHR2YXIgcmVnSW1nID0gL15pbWckL2k7XG5cdFx0dmFyIHJlZ0lmcmFtZSA9IC9eaWZyYW1lJC9pO1xuXG5cdFx0dmFyIHN1cHBvcnRTY3JvbGwgPSAoJ29uc2Nyb2xsJyBpbiB3aW5kb3cpICYmICEoL2dsZWJvdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSk7XG5cblx0XHR2YXIgc2hyaW5rRXhwYW5kID0gMDtcblx0XHR2YXIgY3VycmVudEV4cGFuZCA9IDA7XG5cblx0XHR2YXIgaXNMb2FkaW5nID0gMDtcblx0XHR2YXIgbG93UnVucyA9IC0xO1xuXG5cdFx0dmFyIHJlc2V0UHJlbG9hZGluZyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0aXNMb2FkaW5nLS07XG5cdFx0XHRpZihlICYmIGUudGFyZ2V0KXtcblx0XHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhlLnRhcmdldCwgcmVzZXRQcmVsb2FkaW5nKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIWUgfHwgaXNMb2FkaW5nIDwgMCB8fCAhZS50YXJnZXQpe1xuXHRcdFx0XHRpc0xvYWRpbmcgPSAwO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgaXNOZXN0ZWRWaXNpYmxlID0gZnVuY3Rpb24oZWxlbSwgZWxlbUV4cGFuZCl7XG5cdFx0XHR2YXIgb3V0ZXJSZWN0O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW07XG5cdFx0XHR2YXIgdmlzaWJsZSA9IGdldENTUyhkb2N1bWVudC5ib2R5LCAndmlzaWJpbGl0eScpID09ICdoaWRkZW4nIHx8IGdldENTUyhlbGVtLCAndmlzaWJpbGl0eScpICE9ICdoaWRkZW4nO1xuXG5cdFx0XHRlTHRvcCAtPSBlbGVtRXhwYW5kO1xuXHRcdFx0ZUxib3R0b20gKz0gZWxlbUV4cGFuZDtcblx0XHRcdGVMbGVmdCAtPSBlbGVtRXhwYW5kO1xuXHRcdFx0ZUxyaWdodCArPSBlbGVtRXhwYW5kO1xuXG5cdFx0XHR3aGlsZSh2aXNpYmxlICYmIChwYXJlbnQgPSBwYXJlbnQub2Zmc2V0UGFyZW50KSAmJiBwYXJlbnQgIT0gZG9jdW1lbnQuYm9keSAmJiBwYXJlbnQgIT0gZG9jRWxlbSl7XG5cdFx0XHRcdHZpc2libGUgPSAoKGdldENTUyhwYXJlbnQsICdvcGFjaXR5JykgfHwgMSkgPiAwKTtcblxuXHRcdFx0XHRpZih2aXNpYmxlICYmIGdldENTUyhwYXJlbnQsICdvdmVyZmxvdycpICE9ICd2aXNpYmxlJyl7XG5cdFx0XHRcdFx0b3V0ZXJSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdHZpc2libGUgPSBlTHJpZ2h0ID4gb3V0ZXJSZWN0LmxlZnQgJiZcblx0XHRcdFx0XHRcdGVMbGVmdCA8IG91dGVyUmVjdC5yaWdodCAmJlxuXHRcdFx0XHRcdFx0ZUxib3R0b20gPiBvdXRlclJlY3QudG9wIC0gMSAmJlxuXHRcdFx0XHRcdFx0ZUx0b3AgPCBvdXRlclJlY3QuYm90dG9tICsgMVxuXHRcdFx0XHRcdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmlzaWJsZTtcblx0XHR9O1xuXG5cdFx0dmFyIGNoZWNrRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlTGxlbiwgaSwgcmVjdCwgYXV0b0xvYWRFbGVtLCBsb2FkZWRTb21ldGhpbmcsIGVsZW1FeHBhbmQsIGVsZW1OZWdhdGl2ZUV4cGFuZCwgZWxlbUV4cGFuZFZhbCwgYmVmb3JlRXhwYW5kVmFsO1xuXG5cdFx0XHR2YXIgbGF6eWxvYWRFbGVtcyA9IGxhenlzaXplcy5lbGVtZW50cztcblxuXHRcdFx0aWYoKGxvYWRNb2RlID0gbGF6eVNpemVzQ29uZmlnLmxvYWRNb2RlKSAmJiBpc0xvYWRpbmcgPCA4ICYmIChlTGxlbiA9IGxhenlsb2FkRWxlbXMubGVuZ3RoKSl7XG5cblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0bG93UnVucysrO1xuXG5cdFx0XHRcdGlmKHByZWxvYWRFeHBhbmQgPT0gbnVsbCl7XG5cdFx0XHRcdFx0aWYoISgnZXhwYW5kJyBpbiBsYXp5U2l6ZXNDb25maWcpKXtcblx0XHRcdFx0XHRcdGxhenlTaXplc0NvbmZpZy5leHBhbmQgPSBkb2NFbGVtLmNsaWVudEhlaWdodCA+IDUwMCAmJiBkb2NFbGVtLmNsaWVudFdpZHRoID4gNTAwID8gNTAwIDogMzcwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGRlZmF1bHRFeHBhbmQgPSBsYXp5U2l6ZXNDb25maWcuZXhwYW5kO1xuXHRcdFx0XHRcdHByZWxvYWRFeHBhbmQgPSBkZWZhdWx0RXhwYW5kICogbGF6eVNpemVzQ29uZmlnLmV4cEZhY3Rvcjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGN1cnJlbnRFeHBhbmQgPCBwcmVsb2FkRXhwYW5kICYmIGlzTG9hZGluZyA8IDEgJiYgbG93UnVucyA+IDIgJiYgbG9hZE1vZGUgPiAyICYmICFkb2N1bWVudC5oaWRkZW4pe1xuXHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBwcmVsb2FkRXhwYW5kO1xuXHRcdFx0XHRcdGxvd1J1bnMgPSAwO1xuXHRcdFx0XHR9IGVsc2UgaWYobG9hZE1vZGUgPiAxICYmIGxvd1J1bnMgPiAxICYmIGlzTG9hZGluZyA8IDYpe1xuXHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBkZWZhdWx0RXhwYW5kO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBzaHJpbmtFeHBhbmQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IoOyBpIDwgZUxsZW47IGkrKyl7XG5cblx0XHRcdFx0XHRpZighbGF6eWxvYWRFbGVtc1tpXSB8fCBsYXp5bG9hZEVsZW1zW2ldLl9sYXp5UmFjZSl7Y29udGludWU7fVxuXG5cdFx0XHRcdFx0aWYoIXN1cHBvcnRTY3JvbGwpe3VudmVpbEVsZW1lbnQobGF6eWxvYWRFbGVtc1tpXSk7Y29udGludWU7fVxuXG5cdFx0XHRcdFx0aWYoIShlbGVtRXhwYW5kVmFsID0gbGF6eWxvYWRFbGVtc1tpXVtfZ2V0QXR0cmlidXRlXSgnZGF0YS1leHBhbmQnKSkgfHwgIShlbGVtRXhwYW5kID0gZWxlbUV4cGFuZFZhbCAqIDEpKXtcblx0XHRcdFx0XHRcdGVsZW1FeHBhbmQgPSBjdXJyZW50RXhwYW5kO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGJlZm9yZUV4cGFuZFZhbCAhPT0gZWxlbUV4cGFuZCl7XG5cdFx0XHRcdFx0XHRlTHZXID0gaW5uZXJXaWR0aCArIChlbGVtRXhwYW5kICogaEZhYyk7XG5cdFx0XHRcdFx0XHRlbHZIID0gaW5uZXJIZWlnaHQgKyBlbGVtRXhwYW5kO1xuXHRcdFx0XHRcdFx0ZWxlbU5lZ2F0aXZlRXhwYW5kID0gZWxlbUV4cGFuZCAqIC0xO1xuXHRcdFx0XHRcdFx0YmVmb3JlRXhwYW5kVmFsID0gZWxlbUV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZWN0ID0gbGF6eWxvYWRFbGVtc1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0XHRcdGlmICgoZUxib3R0b20gPSByZWN0LmJvdHRvbSkgPj0gZWxlbU5lZ2F0aXZlRXhwYW5kICYmXG5cdFx0XHRcdFx0XHQoZUx0b3AgPSByZWN0LnRvcCkgPD0gZWx2SCAmJlxuXHRcdFx0XHRcdFx0KGVMcmlnaHQgPSByZWN0LnJpZ2h0KSA+PSBlbGVtTmVnYXRpdmVFeHBhbmQgKiBoRmFjICYmXG5cdFx0XHRcdFx0XHQoZUxsZWZ0ID0gcmVjdC5sZWZ0KSA8PSBlTHZXICYmXG5cdFx0XHRcdFx0XHQoZUxib3R0b20gfHwgZUxyaWdodCB8fCBlTGxlZnQgfHwgZUx0b3ApICYmXG5cdFx0XHRcdFx0XHQobGF6eVNpemVzQ29uZmlnLmxvYWRIaWRkZW4gfHwgZ2V0Q1NTKGxhenlsb2FkRWxlbXNbaV0sICd2aXNpYmlsaXR5JykgIT0gJ2hpZGRlbicpICYmXG5cdFx0XHRcdFx0XHQoKGlzQ29tcGxldGVkICYmIGlzTG9hZGluZyA8IDMgJiYgIWVsZW1FeHBhbmRWYWwgJiYgKGxvYWRNb2RlIDwgMyB8fCBsb3dSdW5zIDwgNCkpIHx8IGlzTmVzdGVkVmlzaWJsZShsYXp5bG9hZEVsZW1zW2ldLCBlbGVtRXhwYW5kKSkpe1xuXHRcdFx0XHRcdFx0dW52ZWlsRWxlbWVudChsYXp5bG9hZEVsZW1zW2ldKTtcblx0XHRcdFx0XHRcdGxvYWRlZFNvbWV0aGluZyA9IHRydWU7XG5cdFx0XHRcdFx0XHRpZihpc0xvYWRpbmcgPiA5KXticmVhazt9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKCFsb2FkZWRTb21ldGhpbmcgJiYgaXNDb21wbGV0ZWQgJiYgIWF1dG9Mb2FkRWxlbSAmJlxuXHRcdFx0XHRcdFx0aXNMb2FkaW5nIDwgNCAmJiBsb3dSdW5zIDwgNCAmJiBsb2FkTW9kZSA+IDIgJiZcblx0XHRcdFx0XHRcdChwcmVsb2FkRWxlbXNbMF0gfHwgbGF6eVNpemVzQ29uZmlnLnByZWxvYWRBZnRlckxvYWQpICYmXG5cdFx0XHRcdFx0XHQocHJlbG9hZEVsZW1zWzBdIHx8ICghZWxlbUV4cGFuZFZhbCAmJiAoKGVMYm90dG9tIHx8IGVMcmlnaHQgfHwgZUxsZWZ0IHx8IGVMdG9wKSB8fCBsYXp5bG9hZEVsZW1zW2ldW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NvbmZpZy5zaXplc0F0dHIpICE9ICdhdXRvJykpKSl7XG5cdFx0XHRcdFx0XHRhdXRvTG9hZEVsZW0gPSBwcmVsb2FkRWxlbXNbMF0gfHwgbGF6eWxvYWRFbGVtc1tpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihhdXRvTG9hZEVsZW0gJiYgIWxvYWRlZFNvbWV0aGluZyl7XG5cdFx0XHRcdFx0dW52ZWlsRWxlbWVudChhdXRvTG9hZEVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciB0aHJvdHRsZWRDaGVja0VsZW1lbnRzID0gdGhyb3R0bGUoY2hlY2tFbGVtZW50cyk7XG5cblx0XHR2YXIgc3dpdGNoTG9hZGluZ0NsYXNzID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRhZGRDbGFzcyhlLnRhcmdldCwgbGF6eVNpemVzQ29uZmlnLmxvYWRlZENsYXNzKTtcblx0XHRcdHJlbW92ZUNsYXNzKGUudGFyZ2V0LCBsYXp5U2l6ZXNDb25maWcubG9hZGluZ0NsYXNzKTtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZS50YXJnZXQsIHJhZlN3aXRjaExvYWRpbmdDbGFzcyk7XG5cdFx0XHR0cmlnZ2VyRXZlbnQoZS50YXJnZXQsICdsYXp5bG9hZGVkJyk7XG5cdFx0fTtcblx0XHR2YXIgcmFmZWRTd2l0Y2hMb2FkaW5nQ2xhc3MgPSByQUZJdChzd2l0Y2hMb2FkaW5nQ2xhc3MpO1xuXHRcdHZhciByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MgPSBmdW5jdGlvbihlKXtcblx0XHRcdHJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzKHt0YXJnZXQ6IGUudGFyZ2V0fSk7XG5cdFx0fTtcblxuXHRcdHZhciBjaGFuZ2VJZnJhbWVTcmMgPSBmdW5jdGlvbihlbGVtLCBzcmMpe1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZWxlbS5jb250ZW50V2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3JjKTtcblx0XHRcdH0gY2F0Y2goZSl7XG5cdFx0XHRcdGVsZW0uc3JjID0gc3JjO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgaGFuZGxlU291cmNlcyA9IGZ1bmN0aW9uKHNvdXJjZSl7XG5cdFx0XHR2YXIgY3VzdG9tTWVkaWE7XG5cblx0XHRcdHZhciBzb3VyY2VTcmNzZXQgPSBzb3VyY2VbX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ29uZmlnLnNyY3NldEF0dHIpO1xuXG5cdFx0XHRpZiggKGN1c3RvbU1lZGlhID0gbGF6eVNpemVzQ29uZmlnLmN1c3RvbU1lZGlhW3NvdXJjZVtfZ2V0QXR0cmlidXRlXSgnZGF0YS1tZWRpYScpIHx8IHNvdXJjZVtfZ2V0QXR0cmlidXRlXSgnbWVkaWEnKV0pICl7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgY3VzdG9tTWVkaWEpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihzb3VyY2VTcmNzZXQpe1xuXHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBzb3VyY2VTcmNzZXQpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgbGF6eVVudmVpbCA9IHJBRkl0KGZ1bmN0aW9uIChlbGVtLCBkZXRhaWwsIGlzQXV0bywgc2l6ZXMsIGlzSW1nKXtcblx0XHRcdHZhciBzcmMsIHNyY3NldCwgcGFyZW50LCBpc1BpY3R1cmUsIGV2ZW50LCBmaXJlc0xvYWQ7XG5cblx0XHRcdGlmKCEoZXZlbnQgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenliZWZvcmV1bnZlaWwnLCBkZXRhaWwpKS5kZWZhdWx0UHJldmVudGVkKXtcblxuXHRcdFx0XHRpZihzaXplcyl7XG5cdFx0XHRcdFx0aWYoaXNBdXRvKXtcblx0XHRcdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NvbmZpZy5hdXRvc2l6ZXNDbGFzcyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzaXplcycsIHNpemVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcmNzZXQgPSBlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NvbmZpZy5zcmNzZXRBdHRyKTtcblx0XHRcdFx0c3JjID0gZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDb25maWcuc3JjQXR0cik7XG5cblx0XHRcdFx0aWYoaXNJbWcpIHtcblx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0aXNQaWN0dXJlID0gcGFyZW50ICYmIHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmlyZXNMb2FkID0gZGV0YWlsLmZpcmVzTG9hZCB8fCAoKCdzcmMnIGluIGVsZW0pICYmIChzcmNzZXQgfHwgc3JjIHx8IGlzUGljdHVyZSkpO1xuXG5cdFx0XHRcdGV2ZW50ID0ge3RhcmdldDogZWxlbX07XG5cblx0XHRcdFx0aWYoZmlyZXNMb2FkKXtcblx0XHRcdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGVsZW0sIHJlc2V0UHJlbG9hZGluZywgdHJ1ZSk7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHJlc2V0UHJlbG9hZGluZ1RpbWVyKTtcblx0XHRcdFx0XHRyZXNldFByZWxvYWRpbmdUaW1lciA9IHNldFRpbWVvdXQocmVzZXRQcmVsb2FkaW5nLCAyNTAwKTtcblxuXHRcdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NvbmZpZy5sb2FkaW5nQ2xhc3MpO1xuXHRcdFx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZWxlbSwgcmFmU3dpdGNoTG9hZGluZ0NsYXNzLCB0cnVlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGlzUGljdHVyZSl7XG5cdFx0XHRcdFx0Zm9yRWFjaC5jYWxsKHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJyksIGhhbmRsZVNvdXJjZXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoc3Jjc2V0KXtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc3Jjc2V0Jywgc3Jjc2V0KTtcblx0XHRcdFx0fSBlbHNlIGlmKHNyYyAmJiAhaXNQaWN0dXJlKXtcblx0XHRcdFx0XHRpZihyZWdJZnJhbWUudGVzdChlbGVtLm5vZGVOYW1lKSl7XG5cdFx0XHRcdFx0XHRjaGFuZ2VJZnJhbWVTcmMoZWxlbSwgc3JjKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxlbS5zcmMgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoaXNJbWcgJiYgKHNyY3NldCB8fCBpc1BpY3R1cmUpKXtcblx0XHRcdFx0XHR1cGRhdGVQb2x5ZmlsbChlbGVtLCB7c3JjOiBzcmN9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihlbGVtLl9sYXp5UmFjZSl7XG5cdFx0XHRcdGRlbGV0ZSBlbGVtLl9sYXp5UmFjZTtcblx0XHRcdH1cblx0XHRcdHJlbW92ZUNsYXNzKGVsZW0sIGxhenlTaXplc0NvbmZpZy5sYXp5Q2xhc3MpO1xuXG5cdFx0XHRyQUYoZnVuY3Rpb24oKXtcblx0XHRcdFx0aWYoICFmaXJlc0xvYWQgfHwgKGVsZW0uY29tcGxldGUgJiYgZWxlbS5uYXR1cmFsV2lkdGggPiAxKSl7XG5cdFx0XHRcdFx0aWYoZmlyZXNMb2FkKXtcblx0XHRcdFx0XHRcdHJlc2V0UHJlbG9hZGluZyhldmVudCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzd2l0Y2hMb2FkaW5nQ2xhc3MoZXZlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0cnVlKTtcblx0XHR9KTtcblxuXHRcdHZhciB1bnZlaWxFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW0pe1xuXHRcdFx0dmFyIGRldGFpbDtcblxuXHRcdFx0dmFyIGlzSW1nID0gcmVnSW1nLnRlc3QoZWxlbS5ub2RlTmFtZSk7XG5cblx0XHRcdC8vYWxsb3cgdXNpbmcgc2l6ZXM9XCJhdXRvXCIsIGJ1dCBkb24ndCB1c2UuIGl0J3MgaW52YWxpZC4gVXNlIGRhdGEtc2l6ZXM9XCJhdXRvXCIgb3IgYSB2YWxpZCB2YWx1ZSBmb3Igc2l6ZXMgaW5zdGVhZCAoaS5lLjogc2l6ZXM9XCI4MHZ3XCIpXG5cdFx0XHR2YXIgc2l6ZXMgPSBpc0ltZyAmJiAoZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDb25maWcuc2l6ZXNBdHRyKSB8fCBlbGVtW19nZXRBdHRyaWJ1dGVdKCdzaXplcycpKTtcblx0XHRcdHZhciBpc0F1dG8gPSBzaXplcyA9PSAnYXV0byc7XG5cblx0XHRcdGlmKCAoaXNBdXRvIHx8ICFpc0NvbXBsZXRlZCkgJiYgaXNJbWcgJiYgKGVsZW1bX2dldEF0dHJpYnV0ZV0oJ3NyYycpIHx8IGVsZW0uc3Jjc2V0KSAmJiAhZWxlbS5jb21wbGV0ZSAmJiAhaGFzQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ29uZmlnLmVycm9yQ2xhc3MpICYmIGhhc0NsYXNzKGVsZW0sIGxhenlTaXplc0NvbmZpZy5sYXp5Q2xhc3MpKXtyZXR1cm47fVxuXG5cdFx0XHRkZXRhaWwgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenl1bnZlaWxyZWFkJykuZGV0YWlsO1xuXG5cdFx0XHRpZihpc0F1dG8pe1xuXHRcdFx0XHQgYXV0b1NpemVyLnVwZGF0ZUVsZW0oZWxlbSwgdHJ1ZSwgZWxlbS5vZmZzZXRXaWR0aCk7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uX2xhenlSYWNlID0gdHJ1ZTtcblx0XHRcdGlzTG9hZGluZysrO1xuXG5cdFx0XHRsYXp5VW52ZWlsKGVsZW0sIGRldGFpbCwgaXNBdXRvLCBzaXplcywgaXNJbWcpO1xuXHRcdH07XG5cblx0XHR2YXIgb25sb2FkID0gZnVuY3Rpb24oKXtcblx0XHRcdGlmKGlzQ29tcGxldGVkKXtyZXR1cm47fVxuXHRcdFx0aWYoRGF0ZS5ub3coKSAtIHN0YXJ0ZWQgPCA5OTkpe1xuXHRcdFx0XHRzZXRUaW1lb3V0KG9ubG9hZCwgOTk5KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGFmdGVyU2Nyb2xsID0gZGVib3VuY2UoZnVuY3Rpb24oKXtcblx0XHRcdFx0bGF6eVNpemVzQ29uZmlnLmxvYWRNb2RlID0gMztcblx0XHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlzQ29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0bGF6eVNpemVzQ29uZmlnLmxvYWRNb2RlID0gMztcblxuXHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXG5cdFx0XHRhZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRpZihsYXp5U2l6ZXNDb25maWcubG9hZE1vZGUgPT0gMyl7XG5cdFx0XHRcdFx0bGF6eVNpemVzQ29uZmlnLmxvYWRNb2RlID0gMjtcblx0XHRcdFx0fVxuXHRcdFx0XHRhZnRlclNjcm9sbCgpO1xuXHRcdFx0fSwgdHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRzdGFydGVkID0gRGF0ZS5ub3coKTtcblxuXHRcdFx0XHRsYXp5c2l6ZXMuZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NvbmZpZy5sYXp5Q2xhc3MpO1xuXHRcdFx0XHRwcmVsb2FkRWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NvbmZpZy5sYXp5Q2xhc3MgKyAnICcgKyBsYXp5U2l6ZXNDb25maWcucHJlbG9hZENsYXNzKTtcblx0XHRcdFx0aEZhYyA9IGxhenlTaXplc0NvbmZpZy5oRmFjO1xuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXG5cdFx0XHRcdGlmKHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKXtcblx0XHRcdFx0XHRuZXcgTXV0YXRpb25PYnNlcnZlciggdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyApLm9ic2VydmUoIGRvY0VsZW0sIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUsIGF0dHJpYnV0ZXM6IHRydWV9ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jRWxlbVtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTU5vZGVJbnNlcnRlZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXHRcdFx0XHRcdGRvY0VsZW1bX2FkZEV2ZW50TGlzdGVuZXJdKCdET01BdHRyTW9kaWZpZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0XHRzZXRJbnRlcnZhbCh0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCA5OTkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXG5cdFx0XHRcdC8vLCAnZnVsbHNjcmVlbmNoYW5nZSdcblx0XHRcdFx0Wydmb2N1cycsICdtb3VzZW92ZXInLCAnY2xpY2snLCAnbG9hZCcsICd0cmFuc2l0aW9uZW5kJywgJ2FuaW1hdGlvbmVuZCcsICd3ZWJraXRBbmltYXRpb25FbmQnXS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpe1xuXHRcdFx0XHRcdGRvY3VtZW50W19hZGRFdmVudExpc3RlbmVyXShuYW1lLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYoKC9kJHxeYy8udGVzdChkb2N1bWVudC5yZWFkeVN0YXRlKSkpe1xuXHRcdFx0XHRcdG9ubG9hZCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbmxvYWQpO1xuXHRcdFx0XHRcdGRvY3VtZW50W19hZGRFdmVudExpc3RlbmVyXSgnRE9NQ29udGVudExvYWRlZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMpO1xuXHRcdFx0XHRcdHNldFRpbWVvdXQob25sb2FkLCAyMDAwMCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihsYXp5c2l6ZXMuZWxlbWVudHMubGVuZ3RoKXtcblx0XHRcdFx0XHRjaGVja0VsZW1lbnRzKCk7XG5cdFx0XHRcdFx0ckFGLl9sc0ZsdXNoKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tFbGVtczogdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyxcblx0XHRcdHVudmVpbDogdW52ZWlsRWxlbWVudFxuXHRcdH07XG5cdH0pKCk7XG5cblxuXHR2YXIgYXV0b1NpemVyID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGF1dG9zaXplc0VsZW1zO1xuXG5cdFx0dmFyIHNpemVFbGVtZW50ID0gckFGSXQoZnVuY3Rpb24oZWxlbSwgcGFyZW50LCBldmVudCwgd2lkdGgpe1xuXHRcdFx0dmFyIHNvdXJjZXMsIGksIGxlbjtcblx0XHRcdGVsZW0uX2xhenlzaXplc1dpZHRoID0gd2lkdGg7XG5cdFx0XHR3aWR0aCArPSAncHgnO1xuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCB3aWR0aCk7XG5cblx0XHRcdGlmKHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpKXtcblx0XHRcdFx0c291cmNlcyA9IHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJyk7XG5cdFx0XHRcdGZvcihpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0c291cmNlc1tpXS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgd2lkdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFldmVudC5kZXRhaWwuZGF0YUF0dHIpe1xuXHRcdFx0XHR1cGRhdGVQb2x5ZmlsbChlbGVtLCBldmVudC5kZXRhaWwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHZhciBnZXRTaXplRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhQXR0ciwgd2lkdGgpe1xuXHRcdFx0dmFyIGV2ZW50O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYocGFyZW50KXtcblx0XHRcdFx0d2lkdGggPSBnZXRXaWR0aChlbGVtLCBwYXJlbnQsIHdpZHRoKTtcblx0XHRcdFx0ZXZlbnQgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenliZWZvcmVzaXplcycsIHt3aWR0aDogd2lkdGgsIGRhdGFBdHRyOiAhIWRhdGFBdHRyfSk7XG5cblx0XHRcdFx0aWYoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpe1xuXHRcdFx0XHRcdHdpZHRoID0gZXZlbnQuZGV0YWlsLndpZHRoO1xuXG5cdFx0XHRcdFx0aWYod2lkdGggJiYgd2lkdGggIT09IGVsZW0uX2xhenlzaXplc1dpZHRoKXtcblx0XHRcdFx0XHRcdHNpemVFbGVtZW50KGVsZW0sIHBhcmVudCwgZXZlbnQsIHdpZHRoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIHVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGk7XG5cdFx0XHR2YXIgbGVuID0gYXV0b3NpemVzRWxlbXMubGVuZ3RoO1xuXHRcdFx0aWYobGVuKXtcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0Zm9yKDsgaSA8IGxlbjsgaSsrKXtcblx0XHRcdFx0XHRnZXRTaXplRWxlbWVudChhdXRvc2l6ZXNFbGVtc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMgPSBkZWJvdW5jZSh1cGRhdGVFbGVtZW50c1NpemVzKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRfOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRhdXRvc2l6ZXNFbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobGF6eVNpemVzQ29uZmlnLmF1dG9zaXplc0NsYXNzKTtcblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyk7XG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tFbGVtczogZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyxcblx0XHRcdHVwZGF0ZUVsZW06IGdldFNpemVFbGVtZW50XG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0aWYoIWluaXQuaSl7XG5cdFx0XHRpbml0LmkgPSB0cnVlO1xuXHRcdFx0YXV0b1NpemVyLl8oKTtcblx0XHRcdGxvYWRlci5fKCk7XG5cdFx0fVxuXHR9O1xuXG5cdGxhenlzaXplcyA9IHtcblx0XHRjZmc6IGxhenlTaXplc0NvbmZpZyxcblx0XHRhdXRvU2l6ZXI6IGF1dG9TaXplcixcblx0XHRsb2FkZXI6IGxvYWRlcixcblx0XHRpbml0OiBpbml0LFxuXHRcdHVQOiB1cGRhdGVQb2x5ZmlsbCxcblx0XHRhQzogYWRkQ2xhc3MsXG5cdFx0ckM6IHJlbW92ZUNsYXNzLFxuXHRcdGhDOiBoYXNDbGFzcyxcblx0XHRmaXJlOiB0cmlnZ2VyRXZlbnQsXG5cdFx0Z1c6IGdldFdpZHRoLFxuXHRcdHJBRjogckFGLFxuXHR9O1xuXG5cdHJldHVybiBsYXp5c2l6ZXM7XG59XG4pKTtcbiIsIihmdW5jdGlvbih3aW5kb3csIGZhY3RvcnkpIHtcblx0dmFyIGdsb2JhbEluc3RhbGwgPSBmdW5jdGlvbigpe1xuXHRcdGZhY3Rvcnkod2luZG93LmxhenlTaXplcyk7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH07XG5cblx0ZmFjdG9yeSA9IGZhY3RvcnkuYmluZChudWxsLCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudCk7XG5cblx0aWYodHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG5cdFx0ZmFjdG9yeShyZXF1aXJlKCdsYXp5c2l6ZXMnKSwgcmVxdWlyZSgnLi4vZml4LWlvcy1zaXplcy9maXgtaW9zLXNpemVzJykpO1xuXHR9IGVsc2UgaWYod2luZG93LmxhenlTaXplcykge1xuXHRcdGdsb2JhbEluc3RhbGwoKTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbGF6eXVudmVpbHJlYWQnLCBnbG9iYWxJbnN0YWxsLCB0cnVlKTtcblx0fVxufSh3aW5kb3csIGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIGxhenlTaXplcykge1xuXHQvKmpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBwb2x5ZmlsbDtcblx0dmFyIGNvbmZpZyA9IChsYXp5U2l6ZXMgJiYgbGF6eVNpemVzLmNmZykgfHwgd2luZG93LmxhenlTaXplc0NvbmZpZztcblx0dmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHR2YXIgc3VwcG9ydFNyY3NldCA9ICgnc2l6ZXMnIGluIGltZykgJiYgKCdzcmNzZXQnIGluIGltZyk7XG5cdHZhciByZWdIRGVzYyA9IC9cXHMrXFxkK2gvZztcblx0dmFyIGZpeEVkZ2VIRGVzY3JpcHRvciA9IChmdW5jdGlvbigpe1xuXHRcdHZhciByZWdEZXNjcmlwdG9ycyA9IC9cXHMrKFxcZCspKHd8aClcXHMrKFxcZCspKHd8aCkvO1xuXHRcdHZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24oZWRnZU1hdGNoKXtcblx0XHRcdHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblx0XHRcdHZhciByZW1vdmVIRGVzY3JpcHRvcnMgPSBmdW5jdGlvbihzb3VyY2Upe1xuXHRcdFx0XHR2YXIgcmF0aW8sIG1hdGNoO1xuXHRcdFx0XHR2YXIgc3Jjc2V0ID0gc291cmNlLmdldEF0dHJpYnV0ZShsYXp5U2l6ZXNDb25maWcuc3Jjc2V0QXR0cik7XG5cdFx0XHRcdGlmKHNyY3NldCl7XG5cdFx0XHRcdFx0aWYoKG1hdGNoID0gc3Jjc2V0Lm1hdGNoKHJlZ0Rlc2NyaXB0b3JzKSkpe1xuXHRcdFx0XHRcdFx0aWYobWF0Y2hbMl0gPT0gJ3cnKXtcblx0XHRcdFx0XHRcdFx0cmF0aW8gPSBtYXRjaFsxXSAvIG1hdGNoWzNdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmF0aW8gPSBtYXRjaFszXSAvIG1hdGNoWzFdO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZihyYXRpbyl7XG5cdFx0XHRcdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYXNwZWN0cmF0aW8nLCByYXRpbyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUobGF6eVNpemVzQ29uZmlnLnNyY3NldEF0dHIsIHNyY3NldC5yZXBsYWNlKHJlZ0hEZXNjLCAnJykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbihlKXtcblx0XHRcdFx0dmFyIHBpY3R1cmUgPSBlLnRhcmdldC5wYXJlbnROb2RlO1xuXG5cdFx0XHRcdGlmKHBpY3R1cmUgJiYgcGljdHVyZS5ub2RlTmFtZSA9PSAnUElDVFVSRScpe1xuXHRcdFx0XHRcdGZvckVhY2guY2FsbChwaWN0dXJlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKSwgcmVtb3ZlSERlc2NyaXB0b3JzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZW1vdmVIRGVzY3JpcHRvcnMoZS50YXJnZXQpO1xuXHRcdFx0fTtcblxuXHRcdFx0dmFyIHRlc3QgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRpZighIWltZy5jdXJyZW50U3JjKXtcblx0XHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdsYXp5YmVmb3JldW52ZWlsJywgaGFuZGxlcik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdGlmKGVkZ2VNYXRjaFsxXSl7XG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenliZWZvcmV1bnZlaWwnLCBoYW5kbGVyKTtcblxuXHRcdFx0XHRpZih0cnVlIHx8IGVkZ2VNYXRjaFsxXSA+IDE0KXtcblx0XHRcdFx0XHRpbWcub25sb2FkID0gdGVzdDtcblx0XHRcdFx0XHRpbWcub25lcnJvciA9IHRlc3Q7XG5cblx0XHRcdFx0XHRpbWcuc3Jjc2V0ID0gJ2RhdGE6LGEgMXcgMWgnO1xuXG5cdFx0XHRcdFx0aWYoaW1nLmNvbXBsZXRlKXtcblx0XHRcdFx0XHRcdHRlc3QoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9KSgpO1xuXG5cblx0aWYoIWNvbmZpZyl7XG5cdFx0Y29uZmlnID0ge307XG5cdFx0d2luZG93LmxhenlTaXplc0NvbmZpZyA9IGNvbmZpZztcblx0fVxuXG5cdGlmKCFjb25maWcuc3VwcG9ydHNUeXBlKXtcblx0XHRjb25maWcuc3VwcG9ydHNUeXBlID0gZnVuY3Rpb24odHlwZS8qLCBlbGVtKi8pe1xuXHRcdFx0cmV0dXJuICF0eXBlO1xuXHRcdH07XG5cdH1cblxuXHRpZih3aW5kb3cucGljdHVyZWZpbGwgfHwgY29uZmlnLnBmKXtyZXR1cm47fVxuXG5cdGlmKHdpbmRvdy5IVE1MUGljdHVyZUVsZW1lbnQgJiYgc3VwcG9ydFNyY3NldCl7XG5cblx0XHRpZihkb2N1bWVudC5tc0VsZW1lbnRzRnJvbVBvaW50KXtcblx0XHRcdGZpeEVkZ2VIRGVzY3JpcHRvcihuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLykpO1xuXHRcdH1cblxuXHRcdGNvbmZpZy5wZiA9IGZ1bmN0aW9uKCl7fTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25maWcucGYgPSBmdW5jdGlvbihvcHRpb25zKXtcblx0XHR2YXIgaSwgbGVuO1xuXHRcdGlmKHdpbmRvdy5waWN0dXJlZmlsbCl7cmV0dXJuO31cblx0XHRmb3IoaSA9IDAsIGxlbiA9IG9wdGlvbnMuZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuXHRcdFx0cG9seWZpbGwob3B0aW9ucy5lbGVtZW50c1tpXSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIHBhcnRpYWwgcG9seWZpbGxcblx0cG9seWZpbGwgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgYXNjZW5kaW5nU29ydCA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0cmV0dXJuIGEudyAtIGIudztcblx0XHR9O1xuXHRcdHZhciByZWdQeExlbmd0aCA9IC9eXFxzKlxcZCtcXC4qXFxkKnB4XFxzKiQvO1xuXHRcdHZhciByZWR1Y2VDYW5kaWRhdGUgPSBmdW5jdGlvbiAoc3JjZXMpIHtcblx0XHRcdHZhciBsb3dlckNhbmRpZGF0ZSwgYm9udXNGYWN0b3I7XG5cdFx0XHR2YXIgbGVuID0gc3JjZXMubGVuZ3RoO1xuXHRcdFx0dmFyIGNhbmRpZGF0ZSA9IHNyY2VzW2xlbiAtMV07XG5cdFx0XHR2YXIgaSA9IDA7XG5cblx0XHRcdGZvcihpOyBpIDwgbGVuO2krKyl7XG5cdFx0XHRcdGNhbmRpZGF0ZSA9IHNyY2VzW2ldO1xuXHRcdFx0XHRjYW5kaWRhdGUuZCA9IGNhbmRpZGF0ZS53IC8gc3JjZXMudztcblxuXHRcdFx0XHRpZihjYW5kaWRhdGUuZCA+PSBzcmNlcy5kKXtcblx0XHRcdFx0XHRpZighY2FuZGlkYXRlLmNhY2hlZCAmJiAobG93ZXJDYW5kaWRhdGUgPSBzcmNlc1tpIC0gMV0pICYmXG5cdFx0XHRcdFx0XHRsb3dlckNhbmRpZGF0ZS5kID4gc3JjZXMuZCAtICgwLjEzICogTWF0aC5wb3coc3JjZXMuZCwgMi4yKSkpe1xuXG5cdFx0XHRcdFx0XHRib251c0ZhY3RvciA9IE1hdGgucG93KGxvd2VyQ2FuZGlkYXRlLmQgLSAwLjYsIDEuNik7XG5cblx0XHRcdFx0XHRcdGlmKGxvd2VyQ2FuZGlkYXRlLmNhY2hlZCkge1xuXHRcdFx0XHRcdFx0XHRsb3dlckNhbmRpZGF0ZS5kICs9IDAuMTUgKiBib251c0ZhY3Rvcjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYobG93ZXJDYW5kaWRhdGUuZCArICgoY2FuZGlkYXRlLmQgLSBzcmNlcy5kKSAqIGJvbnVzRmFjdG9yKSA+IHNyY2VzLmQpe1xuXHRcdFx0XHRcdFx0XHRjYW5kaWRhdGUgPSBsb3dlckNhbmRpZGF0ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjYW5kaWRhdGU7XG5cdFx0fTtcblxuXHRcdHZhciBwYXJzZVdzcmNzZXQgPSAoZnVuY3Rpb24oKXtcblx0XHRcdHZhciBjYW5kaWRhdGVzO1xuXHRcdFx0dmFyIHJlZ1dDYW5kaWRhdGVzID0gLygoW14sXFxzXS5bXlxcc10rKVxccysoXFxkKyl3KS9nO1xuXHRcdFx0dmFyIHJlZ011bHRpcGxlID0gL1xccy87XG5cdFx0XHR2YXIgYWRkQ2FuZGlkYXRlID0gZnVuY3Rpb24obWF0Y2gsIGNhbmRpZGF0ZSwgdXJsLCB3RGVzY3JpcHRvcil7XG5cdFx0XHRcdGNhbmRpZGF0ZXMucHVzaCh7XG5cdFx0XHRcdFx0YzogY2FuZGlkYXRlLFxuXHRcdFx0XHRcdHU6IHVybCxcblx0XHRcdFx0XHR3OiB3RGVzY3JpcHRvciAqIDFcblx0XHRcdFx0fSk7XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oaW5wdXQpe1xuXHRcdFx0XHRjYW5kaWRhdGVzID0gW107XG5cdFx0XHRcdGlucHV0ID0gaW5wdXQudHJpbSgpO1xuXHRcdFx0XHRpbnB1dFxuXHRcdFx0XHRcdC5yZXBsYWNlKHJlZ0hEZXNjLCAnJylcblx0XHRcdFx0XHQucmVwbGFjZShyZWdXQ2FuZGlkYXRlcywgYWRkQ2FuZGlkYXRlKVxuXHRcdFx0XHQ7XG5cblx0XHRcdFx0aWYoIWNhbmRpZGF0ZXMubGVuZ3RoICYmIGlucHV0ICYmICFyZWdNdWx0aXBsZS50ZXN0KGlucHV0KSl7XG5cdFx0XHRcdFx0Y2FuZGlkYXRlcy5wdXNoKHtcblx0XHRcdFx0XHRcdGM6IGlucHV0LFxuXHRcdFx0XHRcdFx0dTogaW5wdXQsXG5cdFx0XHRcdFx0XHR3OiA5OVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGNhbmRpZGF0ZXM7XG5cdFx0XHR9O1xuXHRcdH0pKCk7XG5cblx0XHR2YXIgcnVuTWF0Y2hNZWRpYSA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRpZihydW5NYXRjaE1lZGlhLmluaXQpe3JldHVybjt9XG5cblx0XHRcdHJ1bk1hdGNoTWVkaWEuaW5pdCA9IHRydWU7XG5cdFx0XHRhZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIHRpbWVyO1xuXHRcdFx0XHR2YXIgbWF0Y2hNZWRpYUVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGF6eW1hdGNobWVkaWEnKTtcblx0XHRcdFx0dmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0dmFyIGksIGxlbjtcblx0XHRcdFx0XHRmb3IoaSA9IDAsIGxlbiA9IG1hdGNoTWVkaWFFbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0XHRwb2x5ZmlsbChtYXRjaE1lZGlhRWxlbXNbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGltZXIpO1xuXHRcdFx0XHRcdHRpbWVyID0gc2V0VGltZW91dChydW4sIDY2KTtcblx0XHRcdFx0fTtcblx0XHRcdH0pKCkpO1xuXHRcdH07XG5cblx0XHR2YXIgY3JlYXRlU3Jjc2V0ID0gZnVuY3Rpb24oZWxlbSwgaXNJbWFnZSl7XG5cdFx0XHR2YXIgcGFyc2VkU2V0O1xuXHRcdFx0dmFyIHNyY1NldCA9IGVsZW0uZ2V0QXR0cmlidXRlKCdzcmNzZXQnKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShjb25maWcuc3Jjc2V0QXR0cik7XG5cblx0XHRcdGlmKCFzcmNTZXQgJiYgaXNJbWFnZSl7XG5cdFx0XHRcdHNyY1NldCA9ICFlbGVtLl9sYXp5cG9seWZpbGwgP1xuXHRcdFx0XHRcdChlbGVtLmdldEF0dHJpYnV0ZShjb25maWcuc3JjQXR0cikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoJ3NyYycpKSA6XG5cdFx0XHRcdFx0ZWxlbS5fbGF6eXBvbHlmaWxsLl9zZXRcblx0XHRcdFx0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZighZWxlbS5fbGF6eXBvbHlmaWxsIHx8IGVsZW0uX2xhenlwb2x5ZmlsbC5fc2V0ICE9IHNyY1NldCl7XG5cblx0XHRcdFx0cGFyc2VkU2V0ID0gcGFyc2VXc3Jjc2V0KCBzcmNTZXQgfHwgJycgKTtcblx0XHRcdFx0aWYoaXNJbWFnZSAmJiBlbGVtLnBhcmVudE5vZGUpe1xuXHRcdFx0XHRcdHBhcnNlZFNldC5pc1BpY3R1cmUgPSBlbGVtLnBhcmVudE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PSAnUElDVFVSRSc7XG5cblx0XHRcdFx0XHRpZihwYXJzZWRTZXQuaXNQaWN0dXJlKXtcblx0XHRcdFx0XHRcdGlmKHdpbmRvdy5tYXRjaE1lZGlhKXtcblx0XHRcdFx0XHRcdFx0bGF6eVNpemVzLmFDKGVsZW0sICdsYXp5bWF0Y2htZWRpYScpO1xuXHRcdFx0XHRcdFx0XHRydW5NYXRjaE1lZGlhKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cGFyc2VkU2V0Ll9zZXQgPSBzcmNTZXQ7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtLCAnX2xhenlwb2x5ZmlsbCcsIHtcblx0XHRcdFx0XHR2YWx1ZTogcGFyc2VkU2V0LFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgZ2V0WCA9IGZ1bmN0aW9uKGVsZW0pe1xuXHRcdFx0dmFyIGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG5cdFx0XHR2YXIgb3B0aW11bSA9IGxhenlTaXplcy5nZXRYICYmIGxhenlTaXplcy5nZXRYKGVsZW0pO1xuXHRcdFx0cmV0dXJuIE1hdGgubWluKG9wdGltdW0gfHwgZHByLCAyLjUsIGRwcik7XG5cdFx0fTtcblxuXHRcdHZhciBtYXRjaGVzTWVkaWEgPSBmdW5jdGlvbihtZWRpYSl7XG5cdFx0XHRpZih3aW5kb3cubWF0Y2hNZWRpYSl7XG5cdFx0XHRcdG1hdGNoZXNNZWRpYSA9IGZ1bmN0aW9uKG1lZGlhKXtcblx0XHRcdFx0XHRyZXR1cm4gIW1lZGlhIHx8IChtYXRjaE1lZGlhKG1lZGlhKSB8fCB7fSkubWF0Y2hlcztcblx0XHRcdFx0fTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAhbWVkaWE7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaGVzTWVkaWEobWVkaWEpO1xuXHRcdH07XG5cblx0XHR2YXIgZ2V0Q2FuZGlkYXRlID0gZnVuY3Rpb24oZWxlbSl7XG5cdFx0XHR2YXIgc291cmNlcywgaSwgbGVuLCBtZWRpYSwgc291cmNlLCBzcmNlcywgc3JjLCB3aWR0aDtcblxuXHRcdFx0c291cmNlID0gZWxlbTtcblx0XHRcdGNyZWF0ZVNyY3NldChzb3VyY2UsIHRydWUpO1xuXHRcdFx0c3JjZXMgPSBzb3VyY2UuX2xhenlwb2x5ZmlsbDtcblxuXHRcdFx0aWYoc3JjZXMuaXNQaWN0dXJlKXtcblx0XHRcdFx0Zm9yKGkgPSAwLCBzb3VyY2VzID0gZWxlbS5wYXJlbnROb2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKSwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0aWYoIGNvbmZpZy5zdXBwb3J0c1R5cGUoc291cmNlc1tpXS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSwgZWxlbSkgJiYgbWF0Y2hlc01lZGlhKCBzb3VyY2VzW2ldLmdldEF0dHJpYnV0ZSgnbWVkaWEnKSkgKXtcblx0XHRcdFx0XHRcdHNvdXJjZSA9IHNvdXJjZXNbaV07XG5cdFx0XHRcdFx0XHRjcmVhdGVTcmNzZXQoc291cmNlKTtcblx0XHRcdFx0XHRcdHNyY2VzID0gc291cmNlLl9sYXp5cG9seWZpbGw7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoc3JjZXMubGVuZ3RoID4gMSl7XG5cdFx0XHRcdHdpZHRoID0gc291cmNlLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSB8fCAnJztcblx0XHRcdFx0d2lkdGggPSByZWdQeExlbmd0aC50ZXN0KHdpZHRoKSAmJiBwYXJzZUludCh3aWR0aCwgMTApIHx8IGxhenlTaXplcy5nVyhlbGVtLCBlbGVtLnBhcmVudE5vZGUpO1xuXHRcdFx0XHRzcmNlcy5kID0gZ2V0WChlbGVtKTtcblx0XHRcdFx0aWYoIXNyY2VzLnNyYyB8fCAhc3JjZXMudyB8fCBzcmNlcy53IDwgd2lkdGgpe1xuXHRcdFx0XHRcdHNyY2VzLncgPSB3aWR0aDtcblx0XHRcdFx0XHRzcmMgPSByZWR1Y2VDYW5kaWRhdGUoc3JjZXMuc29ydChhc2NlbmRpbmdTb3J0KSk7XG5cdFx0XHRcdFx0c3JjZXMuc3JjID0gc3JjO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNyYyA9IHNyY2VzLnNyYztcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3JjID0gc3JjZXNbMF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzcmM7XG5cdFx0fTtcblxuXHRcdHZhciBwID0gZnVuY3Rpb24oZWxlbSl7XG5cdFx0XHRpZihzdXBwb3J0U3Jjc2V0ICYmIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLnBhcmVudE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKSAhPSAnUElDVFVSRScpe3JldHVybjt9XG5cdFx0XHR2YXIgY2FuZGlkYXRlID0gZ2V0Q2FuZGlkYXRlKGVsZW0pO1xuXG5cdFx0XHRpZihjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLnUgJiYgZWxlbS5fbGF6eXBvbHlmaWxsLmN1ciAhPSBjYW5kaWRhdGUudSl7XG5cdFx0XHRcdGVsZW0uX2xhenlwb2x5ZmlsbC5jdXIgPSBjYW5kaWRhdGUudTtcblx0XHRcdFx0Y2FuZGlkYXRlLmNhY2hlZCA9IHRydWU7XG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKGNvbmZpZy5zcmNBdHRyLCBjYW5kaWRhdGUudSk7XG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzcmMnLCBjYW5kaWRhdGUudSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAucGFyc2UgPSBwYXJzZVdzcmNzZXQ7XG5cblx0XHRyZXR1cm4gcDtcblx0fSkoKTtcblxuXHRpZihjb25maWcubG9hZGVkQ2xhc3MgJiYgY29uZmlnLmxvYWRpbmdDbGFzcyl7XG5cdFx0KGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgc2VscyA9IFtdO1xuXHRcdFx0WydpbWdbc2l6ZXMkPVwicHhcIl1bc3Jjc2V0XS4nLCAncGljdHVyZSA+IGltZzpub3QoW3NyY3NldF0pLiddLmZvckVhY2goZnVuY3Rpb24oc2VsKXtcblx0XHRcdFx0c2Vscy5wdXNoKHNlbCArIGNvbmZpZy5sb2FkZWRDbGFzcyk7XG5cdFx0XHRcdHNlbHMucHVzaChzZWwgKyBjb25maWcubG9hZGluZ0NsYXNzKTtcblx0XHRcdH0pO1xuXHRcdFx0Y29uZmlnLnBmKHtcblx0XHRcdFx0ZWxlbWVudHM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2Vscy5qb2luKCcsICcpKVxuXHRcdFx0fSk7XG5cdFx0fSkoKTtcblxuXHR9XG59KSk7XG4iLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIFVUSUxJVElFU1xyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4vKipcclxuICogTW9iaWxlIFdpZHRoXHJcbiAqIFRoaXMgbnVtYmVyIGlzIHRoZSB3aWR0aCBpbiB3aGljaCBtb2JpbGUgdmlldyBraWNrcyBpbi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBtb2JpbGVXaWR0aCA9IDk2MDtcclxuXHJcbi8qKlxyXG4gKiBEZWJvdW5jZVxyXG4gKiBGb3IgcmVzaXplIGV2ZW50IHNvIGl0IGRvZXNuJ3QgZmlyZSB0b28gbWFueSB0aW1lcy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcclxuXHRsZXQgdGltZW91dDtcclxuXHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0XHRsZXQgY29udGV4dCA9IHRoaXM7XHJcblx0XHRsZXQgYXJncyA9IGFyZ3VtZW50cztcclxuXHRcdGxldCBsYXRlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aW1lb3V0ID0gbnVsbDtcclxuXHRcdFx0aWYgKCFpbW1lZGlhdGUpIHtcclxuXHRcdFx0XHRmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0Y29uc3QgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcclxuXHJcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XHJcblxyXG5cdFx0dGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xyXG5cclxuXHRcdGlmIChjYWxsTm93KSB7XHJcblx0XHRcdGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyaWdnZXIgVXBkYXRlIFRleHRcclxuICogQHBhcmFtIE9iamVjdCBlbGVtZW50IFRleHQgaW4gdHJpZ2dlciBlbGVtZW50IHRvIHVwZGF0ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyVXBkYXRlVGV4dChlbGVtZW50KSB7XHJcblx0Y29uc3QgdGV4dE9wZW4gPSBlbGVtZW50LmRhdGEoJ29wZW4nKTtcclxuXHRjb25zdCB0ZXh0Q2xvc2UgPSBlbGVtZW50LmRhdGEoJ2Nsb3NlJyk7XHJcblxyXG5cdGlmIChlbGVtZW50LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xyXG5cdFx0ZWxlbWVudC50ZXh0KHRleHRDbG9zZSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdGVsZW1lbnQudGV4dCh0ZXh0T3Blbik7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogU2Nyb2xsIFRvIGVsZW1lbnRcclxuICpcclxuICogQHBhcmFtIE9iamVjdCBqUXVlcnlcclxuICogQGF1dGhvciBQYXVsIEFsbGVuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsVG9FbGVtZW50KGVsZW1lbnQpIHtcclxuXHRjb25zdCBlbGVtZW50T2Zmc2V0VG9wID0gZWxlbWVudC5vZmZzZXQoKS50b3A7XHJcblxyXG5cdCQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuXHRcdHNjcm9sbFRvcDogZWxlbWVudE9mZnNldFRvcFxyXG5cdH0sIDUwMCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTY3JvbGwgdG8gRWxlbWVudCBieSBJRFxyXG4gKlxyXG4gKiBAYXV0aG9yIFBhdWwgQWxsZW5cclxuICogSW50ZW5kZWQgdG8gYmUgdXNlZCBvbiBhbmNob3IgdGFnXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsVG9UYXJnZXQoZSkge1xyXG5cdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRjb25zdCAkdGhpcyA9ICQodGhpcyk7XHJcblx0Y29uc3QgaHJlZiA9ICR0aGlzLmF0dHIoJ2hyZWYnKTtcclxuXHJcblx0aWYoISBocmVmLmluY2x1ZGVzKCcjJykpIHJldHVybjsgLy8gQmFpbCBpZiBocmVmIGlzIG5vdCBhIHRhcmdldFxyXG5cclxuXHRjb25zdCB0YXJnZXQgPSAkKGAke2hyZWZ9YCk7XHJcblxyXG5cdHNjcm9sbFRvRWxlbWVudCh0YXJnZXQpO1xyXG59XHJcblxyXG4vKipcclxuICogRXh0ZW5kXHJcbiAqIE1lcmdlIHR3byBvYmplY3RzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKCkge1xyXG5cdC8vIFZhcmlhYmxlc1xyXG5cdHZhciBleHRlbmRlZCA9IHt9O1xyXG5cdHZhciBkZWVwID0gZmFsc2U7XHJcblx0dmFyIGkgPSAwO1xyXG5cdHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xyXG5cclxuXHQvLyBDaGVjayBpZiBhIGRlZXAgbWVyZ2VcclxuXHRpZiAoIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCggYXJndW1lbnRzWzBdICkgPT09ICdbb2JqZWN0IEJvb2xlYW5dJyApIHtcclxuXHRcdGRlZXAgPSBhcmd1bWVudHNbMF07XHJcblx0XHRpKys7XHJcblx0fVxyXG5cclxuXHQvLyBNZXJnZSB0aGUgb2JqZWN0IGludG8gdGhlIGV4dGVuZGVkIG9iamVjdFxyXG5cdHZhciBtZXJnZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHRcdGZvciAoIHZhciBwcm9wIGluIG9iaiApIHtcclxuXHRcdFx0aWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIG9iaiwgcHJvcCApICkge1xyXG5cdFx0XHRcdC8vIElmIGRlZXAgbWVyZ2UgYW5kIHByb3BlcnR5IGlzIGFuIG9iamVjdCwgbWVyZ2UgcHJvcGVydGllc1xyXG5cdFx0XHRcdGlmICggZGVlcCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqW3Byb3BdKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgKSB7XHJcblx0XHRcdFx0XHRleHRlbmRlZFtwcm9wXSA9IGV4dGVuZCggdHJ1ZSwgZXh0ZW5kZWRbcHJvcF0sIG9ialtwcm9wXSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRleHRlbmRlZFtwcm9wXSA9IG9ialtwcm9wXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvLyBMb29wIHRocm91Z2ggZWFjaCBvYmplY3QgYW5kIGNvbmR1Y3QgYSBtZXJnZVxyXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0dmFyIG9iaiA9IGFyZ3VtZW50c1tpXTtcclxuXHRcdG1lcmdlKG9iaik7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZXh0ZW5kZWQ7XHJcbn07XHJcbiIsIihmdW5jdGlvbih3aW5kb3csIGZhY3RvcnkpIHtcblx0dmFyIGdsb2JhbEluc3RhbGwgPSBmdW5jdGlvbigpe1xuXHRcdGZhY3Rvcnkod2luZG93LmxhenlTaXplcyk7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH07XG5cblx0ZmFjdG9yeSA9IGZhY3RvcnkuYmluZChudWxsLCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudCk7XG5cblx0aWYodHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG5cdFx0ZmFjdG9yeShyZXF1aXJlKCdsYXp5c2l6ZXMnKSk7XG5cdH0gZWxzZSBpZih3aW5kb3cubGF6eVNpemVzKSB7XG5cdFx0Z2xvYmFsSW5zdGFsbCgpO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsYXp5dW52ZWlscmVhZCcsIGdsb2JhbEluc3RhbGwsIHRydWUpO1xuXHR9XG59KHdpbmRvdywgZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgbGF6eVNpemVzKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0aWYoIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKXtyZXR1cm47fVxuXG5cdHZhciByZWdXaGl0ZSA9IC9cXHMrL2c7XG5cdHZhciByZWdTcGxpdFNldCA9IC9cXHMqXFx8XFxzK3xcXHMrXFx8XFxzKi9nO1xuXHR2YXIgcmVnU291cmNlID0gL14oLis/KSg/OlxccytcXFtcXHMqKC4rPylcXHMqXFxdKT8kLztcblx0dmFyIHJlZ0JnVXJsRXNjYXBlID0gL1xcKHxcXCl8Jy87XG5cdHZhciBhbGxvd2VkQmFja2dyb3VuZFNpemUgPSB7Y29udGFpbjogMSwgY292ZXI6IDF9O1xuXHR2YXIgcHJveHlXaWR0aCA9IGZ1bmN0aW9uKGVsZW0pe1xuXHRcdHZhciB3aWR0aCA9IGxhenlTaXplcy5nVyhlbGVtLCBlbGVtLnBhcmVudE5vZGUpO1xuXG5cdFx0aWYoIWVsZW0uX2xhenlzaXplc1dpZHRoIHx8IHdpZHRoID4gZWxlbS5fbGF6eXNpemVzV2lkdGgpe1xuXHRcdFx0ZWxlbS5fbGF6eXNpemVzV2lkdGggPSB3aWR0aDtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW0uX2xhenlzaXplc1dpZHRoO1xuXHR9O1xuXHR2YXIgZ2V0QmdTaXplID0gZnVuY3Rpb24oZWxlbSl7XG5cdFx0dmFyIGJnU2l6ZTtcblxuXHRcdGJnU2l6ZSA9IChnZXRDb21wdXRlZFN0eWxlKGVsZW0pIHx8IHtnZXRQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbigpe319KS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLXNpemUnKTtcblxuXHRcdGlmKCFhbGxvd2VkQmFja2dyb3VuZFNpemVbYmdTaXplXSAmJiBhbGxvd2VkQmFja2dyb3VuZFNpemVbZWxlbS5zdHlsZS5iYWNrZ3JvdW5kU2l6ZV0pe1xuXHRcdFx0YmdTaXplID0gZWxlbS5zdHlsZS5iYWNrZ3JvdW5kU2l6ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYmdTaXplO1xuXHR9O1xuXHR2YXIgY3JlYXRlUGljdHVyZSA9IGZ1bmN0aW9uKHNldHMsIGVsZW0sIGltZyl7XG5cdFx0dmFyIHBpY3R1cmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwaWN0dXJlJyk7XG5cdFx0dmFyIHNpemVzID0gZWxlbS5nZXRBdHRyaWJ1dGUobGF6eVNpemVzQ29uZmlnLnNpemVzQXR0cik7XG5cdFx0dmFyIHJhdGlvID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmF0aW8nKTtcblx0XHR2YXIgb3B0aW11bXggPSBlbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1vcHRpbXVteCcpO1xuXG5cdFx0aWYoZWxlbS5fbGF6eWJnc2V0ICYmIGVsZW0uX2xhenliZ3NldC5wYXJlbnROb2RlID09IGVsZW0pe1xuXHRcdFx0ZWxlbS5yZW1vdmVDaGlsZChlbGVtLl9sYXp5YmdzZXQpO1xuXHRcdH1cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbWcsICdfbGF6eWJnc2V0Jywge1xuXHRcdFx0dmFsdWU6IGVsZW0sXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtLCAnX2xhenliZ3NldCcsIHtcblx0XHRcdHZhbHVlOiBwaWN0dXJlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblxuXHRcdHNldHMgPSBzZXRzLnJlcGxhY2UocmVnV2hpdGUsICcgJykuc3BsaXQocmVnU3BsaXRTZXQpO1xuXG5cdFx0cGljdHVyZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdGltZy5jbGFzc05hbWUgPSBsYXp5U2l6ZXNDb25maWcubGF6eUNsYXNzO1xuXG5cdFx0aWYoc2V0cy5sZW5ndGggPT0gMSAmJiAhc2l6ZXMpe1xuXHRcdFx0c2l6ZXMgPSAnYXV0byc7XG5cdFx0fVxuXG5cdFx0c2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHNldCl7XG5cdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHR2YXIgc291cmNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJyk7XG5cblx0XHRcdGlmKHNpemVzICYmIHNpemVzICE9ICdhdXRvJyl7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgc2l6ZXMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZigobWF0Y2ggPSBzZXQubWF0Y2gocmVnU291cmNlKSkpe1xuXHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zcmNzZXRBdHRyLCBtYXRjaFsxXSk7XG5cdFx0XHRcdGlmKG1hdGNoWzJdKXtcblx0XHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKCdtZWRpYScsIGxhenlTaXplc0NvbmZpZy5jdXN0b21NZWRpYVttYXRjaFsyXV0gfHwgbWF0Y2hbMl0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRwaWN0dXJlLmFwcGVuZENoaWxkKHNvdXJjZSk7XG5cdFx0fSk7XG5cblx0XHRpZihzaXplcyl7XG5cdFx0XHRpbWcuc2V0QXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zaXplc0F0dHIsIHNpemVzKTtcblx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zaXplc0F0dHIpO1xuXHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoJ3NpemVzJyk7XG5cdFx0fVxuXHRcdGlmKG9wdGltdW14KXtcblx0XHRcdGltZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3B0aW11bXgnLCBvcHRpbXVteCk7XG5cdFx0fVxuXHRcdGlmKHJhdGlvKSB7XG5cdFx0XHRpbWcuc2V0QXR0cmlidXRlKCdkYXRhLXJhdGlvJywgcmF0aW8pO1xuXHRcdH1cblxuXHRcdHBpY3R1cmUuYXBwZW5kQ2hpbGQoaW1nKTtcblxuXHRcdGVsZW0uYXBwZW5kQ2hpbGQocGljdHVyZSk7XG5cdH07XG5cblx0dmFyIHByb3h5TG9hZCA9IGZ1bmN0aW9uKGUpe1xuXHRcdGlmKCFlLnRhcmdldC5fbGF6eWJnc2V0KXtyZXR1cm47fVxuXG5cdFx0dmFyIGltYWdlID0gZS50YXJnZXQ7XG5cdFx0dmFyIGVsZW0gPSBpbWFnZS5fbGF6eWJnc2V0O1xuXHRcdHZhciBiZyA9IGltYWdlLmN1cnJlbnRTcmMgfHwgaW1hZ2Uuc3JjO1xuXG5cdFx0aWYoYmcpe1xuXHRcdFx0ZWxlbS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAndXJsKCcgKyAocmVnQmdVcmxFc2NhcGUudGVzdChiZykgPyBKU09OLnN0cmluZ2lmeShiZykgOiBiZyApICsgJyknO1xuXHRcdH1cblxuXHRcdGlmKGltYWdlLl9sYXp5YmdzZXRMb2FkaW5nKXtcblx0XHRcdGxhenlTaXplcy5maXJlKGVsZW0sICdfbGF6eWxvYWRlZCcsIHt9LCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRkZWxldGUgaW1hZ2UuX2xhenliZ3NldExvYWRpbmc7XG5cdFx0fVxuXHR9O1xuXG5cdGFkZEV2ZW50TGlzdGVuZXIoJ2xhenliZWZvcmV1bnZlaWwnLCBmdW5jdGlvbihlKXtcblx0XHR2YXIgc2V0LCBpbWFnZSwgZWxlbTtcblxuXHRcdGlmKGUuZGVmYXVsdFByZXZlbnRlZCB8fCAhKHNldCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1iZ3NldCcpKSl7cmV0dXJuO31cblxuXHRcdGVsZW0gPSBlLnRhcmdldDtcblx0XHRpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG5cdFx0aW1hZ2UuYWx0ID0gJyc7XG5cblx0XHRpbWFnZS5fbGF6eWJnc2V0TG9hZGluZyA9IHRydWU7XG5cdFx0ZS5kZXRhaWwuZmlyZXNMb2FkID0gdHJ1ZTtcblxuXHRcdGNyZWF0ZVBpY3R1cmUoc2V0LCBlbGVtLCBpbWFnZSk7XG5cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRsYXp5U2l6ZXMubG9hZGVyLnVudmVpbChpbWFnZSk7XG5cblx0XHRcdGxhenlTaXplcy5yQUYoZnVuY3Rpb24oKXtcblx0XHRcdFx0bGF6eVNpemVzLmZpcmUoaW1hZ2UsICdfbGF6eWxvYWRlZCcsIHt9LCB0cnVlLCB0cnVlKTtcblx0XHRcdFx0aWYoaW1hZ2UuY29tcGxldGUpIHtcblx0XHRcdFx0XHRwcm94eUxvYWQoe3RhcmdldDogaW1hZ2V9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0fSk7XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHByb3h5TG9hZCwgdHJ1ZSk7XG5cblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xhenliZWZvcmVzaXplcycsIGZ1bmN0aW9uKGUpe1xuXHRcdGlmKGUuZGV0YWlsLmluc3RhbmNlICE9IGxhenlTaXplcyl7cmV0dXJuO31cblx0XHRpZihlLnRhcmdldC5fbGF6eWJnc2V0ICYmIGUuZGV0YWlsLmRhdGFBdHRyKXtcblx0XHRcdHZhciBlbGVtID0gZS50YXJnZXQuX2xhenliZ3NldDtcblx0XHRcdHZhciBiZ1NpemUgPSBnZXRCZ1NpemUoZWxlbSk7XG5cblx0XHRcdGlmKGFsbG93ZWRCYWNrZ3JvdW5kU2l6ZVtiZ1NpemVdKXtcblx0XHRcdFx0ZS50YXJnZXQuX2xhenlzaXplc1BhcmVudEZpdCA9IGJnU2l6ZTtcblxuXHRcdFx0XHRsYXp5U2l6ZXMuckFGKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0ZS50YXJnZXQuc2V0QXR0cmlidXRlKCdkYXRhLXBhcmVudC1maXQnLCBiZ1NpemUpO1xuXHRcdFx0XHRcdGlmKGUudGFyZ2V0Ll9sYXp5c2l6ZXNQYXJlbnRGaXQpe1xuXHRcdFx0XHRcdFx0ZGVsZXRlIGUudGFyZ2V0Ll9sYXp5c2l6ZXNQYXJlbnRGaXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH0sIHRydWUpO1xuXG5cdGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdsYXp5YmVmb3Jlc2l6ZXMnLCBmdW5jdGlvbihlKXtcblx0XHRpZihlLmRlZmF1bHRQcmV2ZW50ZWQgfHwgIWUudGFyZ2V0Ll9sYXp5YmdzZXQgfHwgZS5kZXRhaWwuaW5zdGFuY2UgIT0gbGF6eVNpemVzKXtyZXR1cm47fVxuXHRcdGUuZGV0YWlsLndpZHRoID0gcHJveHlXaWR0aChlLnRhcmdldC5fbGF6eWJnc2V0KTtcblx0fSk7XG59KSk7XG4iLCIvKiFcclxuICogdmVyZ2UgMS4xMC4yKzIwMTcwNTMwMDA1MFxyXG4gKiBodHRwOi8vbnBtLmltL3ZlcmdlXHJcbiAqIE1JVCBSeWFuIFZhbiBFdHRlblxyXG4gKi9cclxuXHJcbiFmdW5jdGlvbihyb290LCBuYW1lLCBtYWtlKSB7XG4gIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZVsnZXhwb3J0cyddKSBtb2R1bGVbJ2V4cG9ydHMnXSA9IG1ha2UoKTtcclxuICBlbHNlIHJvb3RbbmFtZV0gPSBtYWtlKCk7XHJcbn0odGhpcywgJ3ZlcmdlJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gIHZhciB4cG9ydHMgPSB7fVxyXG4gICAgLCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvd1xyXG4gICAgLCBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnRcclxuICAgICwgZG9jRWxlbSA9IGRvYyAmJiBkb2MuZG9jdW1lbnRFbGVtZW50XHJcbiAgICAsIG1hdGNoTWVkaWEgPSB3aW5bJ21hdGNoTWVkaWEnXSB8fCB3aW5bJ21zTWF0Y2hNZWRpYSddXHJcbiAgICAsIG1xID0gbWF0Y2hNZWRpYSA/IGZ1bmN0aW9uKHEpIHtcclxuICAgICAgICByZXR1cm4gISFtYXRjaE1lZGlhLmNhbGwod2luLCBxKS5tYXRjaGVzO1xyXG4gICAgICB9IDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAsIHZpZXdwb3J0VyA9IHhwb3J0c1sndmlld3BvcnRXJ10gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYSA9IGRvY0VsZW1bJ2NsaWVudFdpZHRoJ10sIGIgPSB3aW5bJ2lubmVyV2lkdGgnXTtcclxuICAgICAgICByZXR1cm4gYSA8IGIgPyBiIDogYTtcclxuICAgICAgfVxyXG4gICAgLCB2aWV3cG9ydEggPSB4cG9ydHNbJ3ZpZXdwb3J0SCddID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGEgPSBkb2NFbGVtWydjbGllbnRIZWlnaHQnXSwgYiA9IHdpblsnaW5uZXJIZWlnaHQnXTtcclxuICAgICAgICByZXR1cm4gYSA8IGIgPyBiIDogYTtcclxuICAgICAgfTtcclxuXG4gIC8qKlxuICAgKiBUZXN0IGlmIGEgbWVkaWEgcXVlcnkgaXMgYWN0aXZlLiBMaWtlIE1vZGVybml6ci5tcVxyXG4gICAqIEBzaW5jZSAxLjYuMFxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICovXG4gIHhwb3J0c1snbXEnXSA9IG1xO1xyXG5cclxuICAvKipcbiAgICogTm9ybWFsaXplZCBtYXRjaE1lZGlhXHJcbiAgICogQHNpbmNlIDEuNi4wXHJcbiAgICogQHJldHVybiB7TWVkaWFRdWVyeUxpc3R8T2JqZWN0fVxyXG4gICAqL1xuICB4cG9ydHNbJ21hdGNoTWVkaWEnXSA9IG1hdGNoTWVkaWEgPyBmdW5jdGlvbigpIHtcclxuICAgIC8vIG1hdGNoTWVkaWEgbXVzdCBiZSBiaW5kZWQgdG8gd2luZG93XHJcbiAgICByZXR1cm4gbWF0Y2hNZWRpYS5hcHBseSh3aW4sIGFyZ3VtZW50cyk7XHJcbiAgfSA6IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gR3JhY2VmdWxseSBkZWdyYWRlIHRvIHBsYWluIG9iamVjdFxyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBzaW5jZSAxLjguMFxyXG4gICAqIEByZXR1cm4ge3t3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXJ9fVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHZpZXdwb3J0KCkge1xyXG4gICAgcmV0dXJuIHsnd2lkdGgnOnZpZXdwb3J0VygpLCAnaGVpZ2h0Jzp2aWV3cG9ydEgoKX07XHJcbiAgfVxyXG4gIHhwb3J0c1sndmlld3BvcnQnXSA9IHZpZXdwb3J0O1xyXG5cbiAgLyoqXG4gICAqIENyb3NzLWJyb3dzZXIgd2luZG93LnNjcm9sbFhcclxuICAgKiBAc2luY2UgMS4wLjBcclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICovXHJcbiAgeHBvcnRzWydzY3JvbGxYJ10gPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB3aW4ucGFnZVhPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxMZWZ0O1xuICB9O1xyXG5cclxuICAvKipcbiAgICogQ3Jvc3MtYnJvd3NlciB3aW5kb3cuc2Nyb2xsWVxyXG4gICAqIEBzaW5jZSAxLjAuMFxyXG4gICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgKi9cclxuICB4cG9ydHNbJ3Njcm9sbFknXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHdpbi5wYWdlWU9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbFRvcDtcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHt7dG9wOm51bWJlciwgcmlnaHQ6bnVtYmVyLCBib3R0b206bnVtYmVyLCBsZWZ0Om51bWJlcn19IGNvb3Jkc1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gY3VzaGlvbiBhZGp1c3RtZW50XHJcbiAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNhbGlicmF0ZShjb29yZHMsIGN1c2hpb24pIHtcclxuICAgIHZhciBvID0ge307XHJcbiAgICBjdXNoaW9uID0gK2N1c2hpb24gfHwgMDtcclxuICAgIG9bJ3dpZHRoJ10gPSAob1sncmlnaHQnXSA9IGNvb3Jkc1sncmlnaHQnXSArIGN1c2hpb24pIC0gKG9bJ2xlZnQnXSA9IGNvb3Jkc1snbGVmdCddIC0gY3VzaGlvbik7XHJcbiAgICBvWydoZWlnaHQnXSA9IChvWydib3R0b20nXSA9IGNvb3Jkc1snYm90dG9tJ10gKyBjdXNoaW9uKSAtIChvWyd0b3AnXSA9IGNvb3Jkc1sndG9wJ10gLSBjdXNoaW9uKTtcclxuICAgIHJldHVybiBvO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3Jvc3MtYnJvd3NlciBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCBwbHVzIG9wdGlvbmFsIGN1c2hpb24uXHJcbiAgICogQ29vcmRzIGFyZSByZWxhdGl2ZSB0byB0aGUgdG9wLWxlZnQgY29ybmVyIG9mIHRoZSB2aWV3cG9ydC5cclxuICAgKiBAc2luY2UgMS4wLjBcclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbCBlbGVtZW50IG9yIHN0YWNrICh1c2VzIGZpcnN0IGl0ZW0pXHJcbiAgICogQHBhcmFtIHtudW1iZXI9fSBjdXNoaW9uICsvLSBwaXhlbCBhZGp1c3RtZW50IGFtb3VudFxyXG4gICAqIEByZXR1cm4ge09iamVjdHxib29sZWFufVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHJlY3RhbmdsZShlbCwgY3VzaGlvbikge1xyXG4gICAgZWwgPSBlbCAmJiAhZWwubm9kZVR5cGUgPyBlbFswXSA6IGVsO1xyXG4gICAgaWYgKCFlbCB8fCAxICE9PSBlbC5ub2RlVHlwZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuIGNhbGlicmF0ZShlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgY3VzaGlvbik7XHJcbiAgfVxyXG4gIHhwb3J0c1sncmVjdGFuZ2xlJ10gPSByZWN0YW5nbGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgdmlld3BvcnQgYXNwZWN0IHJhdGlvIChvciB0aGUgYXNwZWN0IHJhdGlvIG9mIGFuIG9iamVjdCBvciBlbGVtZW50KVxyXG4gICAqIEBzaW5jZSAxLjcuMFxyXG4gICAqIEBwYXJhbSB7KEVsZW1lbnR8T2JqZWN0KT19IG8gb3B0aW9uYWwgb2JqZWN0IHdpdGggd2lkdGgvaGVpZ2h0IHByb3BzIG9yIG1ldGhvZHNcclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICogQGxpbmsgaHR0cDovL3czLm9yZy9UUi9jc3MzLW1lZGlhcXVlcmllcy8jb3JpZW50YXRpb25cclxuICAgKi9cclxuICBmdW5jdGlvbiBhc3BlY3Qobykge1xyXG4gICAgbyA9IG51bGwgPT0gbyA/IHZpZXdwb3J0KCkgOiAxID09PSBvLm5vZGVUeXBlID8gcmVjdGFuZ2xlKG8pIDogbztcclxuICAgIHZhciBoID0gb1snaGVpZ2h0J10sIHcgPSBvWyd3aWR0aCddO1xyXG4gICAgaCA9IHR5cGVvZiBoID09ICdmdW5jdGlvbicgPyBoLmNhbGwobykgOiBoO1xyXG4gICAgdyA9IHR5cGVvZiB3ID09ICdmdW5jdGlvbicgPyB3LmNhbGwobykgOiB3O1xyXG4gICAgcmV0dXJuIHcvaDtcclxuICB9XHJcbiAgeHBvcnRzWydhc3BlY3QnXSA9IGFzcGVjdDtcclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdCBpZiBhbiBlbGVtZW50IGlzIGluIHRoZSBzYW1lIHgtYXhpcyBzZWN0aW9uIGFzIHRoZSB2aWV3cG9ydC5cclxuICAgKiBAc2luY2UgMS4wLjBcclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gY3VzaGlvblxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgeHBvcnRzWydpblgnXSA9IGZ1bmN0aW9uKGVsLCBjdXNoaW9uKSB7XHJcbiAgICB2YXIgciA9IHJlY3RhbmdsZShlbCwgY3VzaGlvbik7XHJcbiAgICByZXR1cm4gISFyICYmIHIucmlnaHQgPj0gMCAmJiByLmxlZnQgPD0gdmlld3BvcnRXKCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdCBpZiBhbiBlbGVtZW50IGlzIGluIHRoZSBzYW1lIHktYXhpcyBzZWN0aW9uIGFzIHRoZSB2aWV3cG9ydC5cclxuICAgKiBAc2luY2UgMS4wLjBcclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gY3VzaGlvblxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgeHBvcnRzWydpblknXSA9IGZ1bmN0aW9uKGVsLCBjdXNoaW9uKSB7XHJcbiAgICB2YXIgciA9IHJlY3RhbmdsZShlbCwgY3VzaGlvbik7XHJcbiAgICByZXR1cm4gISFyICYmIHIuYm90dG9tID49IDAgJiYgci50b3AgPD0gdmlld3BvcnRIKCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdCBpZiBhbiBlbGVtZW50IGlzIGluIHRoZSB2aWV3cG9ydC5cclxuICAgKiBAc2luY2UgMS4wLjBcclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gY3VzaGlvblxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgeHBvcnRzWydpblZpZXdwb3J0J10gPSBmdW5jdGlvbihlbCwgY3VzaGlvbikge1xyXG4gICAgLy8gRXF1aXYgdG8gYGluWChlbCwgY3VzaGlvbikgJiYgaW5ZKGVsLCBjdXNoaW9uKWAgYnV0IGp1c3QgbWFudWFsbHkgZG8gYm90aFxuICAgIC8vIHRvIGF2b2lkIGNhbGxpbmcgcmVjdGFuZ2xlKCkgdHdpY2UuIEl0IGd6aXBzIGp1c3QgYXMgc21hbGwgbGlrZSB0aGlzLlxyXG4gICAgdmFyIHIgPSByZWN0YW5nbGUoZWwsIGN1c2hpb24pO1xyXG4gICAgcmV0dXJuICEhciAmJiByLmJvdHRvbSA+PSAwICYmIHIucmlnaHQgPj0gMCAmJiByLnRvcCA8PSB2aWV3cG9ydEgoKSAmJiByLmxlZnQgPD0gdmlld3BvcnRXKCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHhwb3J0cztcclxufSk7XG4iLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIFRBQiBBQ0NPUkRJT04gQ0xBU1NcclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5pbXBvcnQgdmVyZ2UgZnJvbSAndmVyZ2UnO1xyXG5pbXBvcnQge1xyXG5cdG1vYmlsZVdpZHRoLFxyXG5cdGRlYm91bmNlXHJcbn0gZnJvbSAnLi91dGlsaXRpZXMnO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgVGFiQWNjb3JkaW9uLlxyXG4gKlxyXG4gKiBGaW5kcyB0cmlnZ2VycyBhbmQgY29udGVudCB3aXRoaW4gY29udGFpbmVyXHJcbiAqIEFkZCBldmVudCBsaXN0ZW5lciB0byB0cmlnZ2Vyc1xyXG4gKiBUcmlnZ2VyIHdpbGwgZmluZCBjb250ZW50IGVsZW1lbnQgYmFzZWQgb24gJ2hyZWY9XCI8I2NvbnRlbnQ+XCInIGFuZCBhZGQgJy5pcy1hY3RpdmUnXHJcbiAqIENvbnRlbnQgZWxlbWVudCBtdXN0IGhhdmUgYW4gSUQgdGhhdCBtYXRjaGVzIElEIGZvdW5kIGluIGl0J3MgdHJpZ2dlcidzIGhyZWZcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGNvbnRhaW5lckNsYXNzIC8vIHRhYiBhY2NvcmRpb24gY29udGFpbmVyJ3MgY2xhc3MgZS5pLiAnLnRhYi1hY2NvcmRpb24tY29udGFpbmVyJ1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJpZ2dlckNsYXNzIC8vIHRyaWdnZXJzJyBjbGFzcyAsIHRyaWdnZXJzIG11c3QgYmUgPGE+IHRhZyB3aXRoIGhyZWYgdG8gY29ycmVzcG9uZGluZyBjb250ZW50J3MgSURcclxuICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRDbGFzcyAvLyBjb250ZW50IGNsYXNzXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gY2xvc2VPbkNsaWNrIC8vIHRhYnMgd2lsbCBhbHdheXMgY2xvc2Ugd2hlbiBjbGlja2VkLCBvdGhlcndpc2UgdGhleSB3aWxsIG9ubHkgY2xvc2Ugd2hlbiBjbGlja2VkIG9uIG1vYmlsZVxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGF1dG9PcGVuT25EZXNrdG9wIC8vIGZpcnN0IHRhYiB3aWxsIGJlIG9wZW5lZCB3aGVuIHJlc2l6aW5nIHRvIGRlc2t0b3AgaWYgbm9uZSBhcmUgYWN0aXZlXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb3BlbkZpcnN0VGFiT25EZXNrdG9wIC8vIGZpcnN0IHRhYiB3aWxsIGJlIG9wZW4gb24gZGVza3RvcFxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRlZXBMaW5raW5nXHJcbiAqL1xyXG5jbGFzcyBUYWJBY2NvcmRpb24ge1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0Y29udGFpbmVyQ2xhc3MsXHJcblx0XHR0cmlnZ2VyQ2xhc3MsXHJcblx0XHRjb250ZW50Q2xhc3MsXHJcblx0XHRjbG9zZU9uQ2xpY2ssXHJcblx0XHRhdXRvT3Blbk9uRGVza3RvcCxcclxuXHRcdG9wZW5GaXJzdFRhYk9uRGVza3RvcCxcclxuXHRcdGRlZXBMaW5raW5nXHJcblx0KSB7XHJcblx0XHR0aGlzLl9zZWxlY3RvcnMgPSB7XHJcblx0XHRcdGNvbnRhaW5lckNsYXNzLFxyXG5cdFx0XHR0cmlnZ2VyQ2xhc3MsXHJcblx0XHRcdGNvbnRlbnRDbGFzcyxcclxuXHRcdH07XHJcblx0XHR0aGlzLl9hdXRvT3Blbk9uRGVza3RvcCA9IGF1dG9PcGVuT25EZXNrdG9wIHx8IGZhbHNlO1xyXG5cdFx0dGhpcy5fY2xvc2VPbkNsaWNrID0gY2xvc2VPbkNsaWNrIHx8IGZhbHNlO1xyXG5cdFx0dGhpcy5fb3BlbkZpcnN0VGFiT25EZXNrdG9wID0gb3BlbkZpcnN0VGFiT25EZXNrdG9wIHx8IGZhbHNlO1xyXG5cdFx0dGhpcy5fZGVlcExpbmtpbmcgPSBkZWVwTGlua2luZyB8fCBmYWxzZTtcclxuXHRcdHRoaXMuX2luaXQoKTtcclxuXHR9XHJcblxyXG5cdF9pbml0KCkge1xyXG5cdFx0Y29uc3QgY29udGFpbmVyID0gJCh0aGlzLl9zZWxlY3RvcnMuY29udGFpbmVyQ2xhc3MpO1xyXG5cclxuXHRcdC8vIGJhaWwgaWYgY29udGFpbmVyIGlzIG5vdCBwcmVzZW50XHJcblx0XHRpZiAoY29udGFpbmVyLmxlbmd0aCA8IDEpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHRyaWdnZXJzID0gY29udGFpbmVyLmZpbmQodGhpcy5fc2VsZWN0b3JzLnRyaWdnZXJDbGFzcyk7XHJcblx0XHRjb25zdCBjb250ZW50cyA9IGNvbnRhaW5lci5maW5kKHRoaXMuX3NlbGVjdG9ycy5jb250ZW50Q2xhc3MpO1xyXG5cdFx0Y29uc3QgbG9jYXRpb25IYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcblxyXG5cdFx0dHJpZ2dlcnMub24oXHJcblx0XHRcdCdjbGljaycsIHtcclxuXHRcdFx0XHRhbGxUcmlnZ2VyczogdHJpZ2dlcnMsXHJcblx0XHRcdFx0YWxsQ29udGVudDogY29udGVudHMsXHJcblx0XHRcdFx0Y2xvc2VPbkNsaWNrOiB0aGlzLl9jbG9zZU9uQ2xpY2ssXHJcblx0XHRcdFx0ZGVlcExpbmtpbmc6IHRoaXMuX2RlZXBMaW5raW5nLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHRvcGVuVGFiXHJcblx0XHQpO1xyXG5cclxuXHRcdGlmICh0aGlzLl9hdXRvT3Blbk9uRGVza3RvcCkge1xyXG5cdFx0XHRhdXRvT3Blbk9uRGVza3RvcCh0cmlnZ2Vycyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX29wZW5GaXJzdFRhYk9uRGVza3RvcCAmJiBtb2JpbGVXaWR0aCA8IHZlcmdlLnZpZXdwb3J0VygpICYmICFsb2NhdGlvbkhhc2gpIHtcclxuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0dHJpZ2dlcnMuZXEoMCkudHJpZ2dlcignY2xpY2snKTtcclxuXHRcdFx0fSwgMjAwKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5fZGVlcExpbmtpbmcpIHtcclxuXHRcdFx0b3BlbkRlZXBMaW5rZWRUYWIodHJpZ2dlcnMpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gRXZlbnRzXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4vLyBPcGVuIGEgc2luZ2xlIHRhYiwgY2xvc2Ugb3RoZXJzXHJcbmZ1bmN0aW9uIG9wZW5UYWIoZSkge1xyXG5cdGlmIChlKSB7XHJcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0fVxyXG5cclxuXHRjb25zdCAkdGhpcyA9ICQodGhpcyk7XHJcblx0Y29uc3QgaWQgPSAkdGhpcy5hdHRyKCdocmVmJyk7XHJcblx0Y29uc3QgdGFyZ2V0ID0gJChpZCk7XHJcblx0Y29uc3QgYnV0dG9ucyA9ICQoYCpbaHJlZj1cIiR7aWR9XCJdYCk7IC8vVXBkYXRlIGRlc2t0b3AgYW5kIG1vYmlsZSB0YWIgYWNjb3JkaW9uIGJ1dHRvbnNcclxuXHRjb25zdCBhbGxUcmlnZ2VycyA9IGUuZGF0YS5hbGxUcmlnZ2VycztcclxuXHRjb25zdCBhbGxDb250ZW50ID0gZS5kYXRhLmFsbENvbnRlbnQ7XHJcblx0Y29uc3QgY2xvc2VPbkNsaWNrID0gZS5kYXRhLmNsb3NlT25DbGljaztcclxuXHRjb25zdCBidXR0b25BY3RpdmUgPSBidXR0b25zLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHJcblx0aWYgKChidXR0b25BY3RpdmUgJiYgY2xvc2VPbkNsaWNrKSB8fCAoYnV0dG9uQWN0aXZlICYmIHZlcmdlLnZpZXdwb3J0VygpIDwgbW9iaWxlV2lkdGgpKSB7XHJcblx0XHRjbG9zZUFsbFRhYnMoYWxsVHJpZ2dlcnMsIGFsbENvbnRlbnQpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Y2xvc2VBbGxUYWJzKGFsbFRyaWdnZXJzLCBhbGxDb250ZW50KTtcclxuXHJcblx0YnV0dG9ucy5hZGRDbGFzcygnaXMtYWN0aXZlJykuYXJpYUV4cGFuZGVkKCk7XHJcblxyXG5cdG9wZW5Db250ZW50KHRhcmdldCk7XHJcblxyXG5cdGlmIChlLmRhdGEuZGVlcExpbmtpbmcpIHtcclxuXHRcdGlmIChoaXN0b3J5LnB1c2hTdGF0ZSkge1xyXG5cdFx0XHRoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBpZCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IGlkO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuLy8gQ2xvc2UgYWxsIHRhYnNcclxuZnVuY3Rpb24gY2xvc2VBbGxUYWJzKHRyaWdnZXJzLCBjb250ZW50KSB7XHJcblx0dHJpZ2dlcnMucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmFyaWFOb3RFeHBhbmRlZCgpO1xyXG5cdGNvbnRlbnQucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG59XHJcblxyXG4vLyBPcGVuIHRhYidzIGNvbnRlbnRcclxuZnVuY3Rpb24gb3BlbkNvbnRlbnQoY29udGVudCkge1xyXG5cdGNvbnRlbnQuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLmZvY3VzKCk7XHJcbn1cclxuXHJcbi8vIElmIG5vIGFjY29yZGlvbiBhcmUgb3BlbiBvbiByZXNpemUgdG8gZGVza3RvcCwgb3BlbiB0aGUgZmlyc3Qgb25lXHJcbmZ1bmN0aW9uIGF1dG9PcGVuT25EZXNrdG9wKHRyaWdnZXJzKSB7XHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXHJcblx0XHQncmVzaXplJyxcclxuXHRcdGRlYm91bmNlKCgpID0+IHtcclxuXHRcdFx0aWYgKHZlcmdlLnZpZXdwb3J0VygpID49IG1vYmlsZVdpZHRoICYmICF0cmlnZ2Vycy5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcclxuXHRcdFx0XHRjb25zdCBmaXJzdFRyaWdnZXIgPSB0cmlnZ2Vycy5lcSgwKTtcclxuXHRcdFx0XHRmaXJzdFRyaWdnZXIudHJpZ2dlcignY2xpY2snKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgNTAwKVxyXG5cdCk7XHJcbn1cclxuXHJcbi8vIE9wZW4gZGVlcGxpbmtlZCB0YWIgaWYgaGFzaCBpcyBwcmVzZW50XHJcbmZ1bmN0aW9uIG9wZW5EZWVwTGlua2VkVGFiKHRyaWdnZXJzKSB7XHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcblx0XHRjb25zdCBsb2NhdGlvbkhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuXHRcdGxldCBhY3RpdmVUcmlnZ2VySW5kZXg7XHJcblxyXG5cdFx0aWYgKCFsb2NhdGlvbkhhc2gpIHJldHVybjtcclxuXHJcblx0XHQkLmVhY2godHJpZ2dlcnMsIGZ1bmN0aW9uIChpbmRleCkge1xyXG5cdFx0XHRjb25zdCBocmVmID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcclxuXHJcblx0XHRcdGlmIChocmVmID09PSBsb2NhdGlvbkhhc2gpIHtcclxuXHRcdFx0XHRhY3RpdmVUcmlnZ2VySW5kZXggPSBpbmRleDtcclxuXHRcdFx0fTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGNvbnN0IGFjdGl2ZVRyaWdnZXIgPSB0cmlnZ2Vycy5lcShhY3RpdmVUcmlnZ2VySW5kZXgpO1xyXG5cdFx0YWN0aXZlVHJpZ2dlci50cmlnZ2VyKCdjbGljaycpO1xyXG5cdFx0JCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xyXG5cdFx0XHRzY3JvbGxUb3A6IGFjdGl2ZVRyaWdnZXIub2Zmc2V0KCkudG9wXHJcblx0XHR9KTtcclxuXHR9KTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuXHRUYWJBY2NvcmRpb25cclxufTtcclxuIiwiLyoqXHJcbiAqIERldGVjdCBFZGdlXHJcbiAqL1xyXG5pbXBvcnQge2RlYm91bmNlfSBmcm9tICcuL3V0aWxpdGllcyc7XHJcblxyXG4vKipcclxuICogRGV0ZWN0IEVkZ2VcclxuICogQHBhcmFtIFN0cmluZyBzZWxlY3RvclxyXG4gKiBAcGFyYW0gSW50ZWdlciBidWZmZXIob3B0aW9uYWwpIEhvdyBjbG9zZSB0byBlZGdlIGNhbiBlbGVtZW50cyBnZXQgYmVmb3JlIGVkZ2UgZGV0ZWN0b3IgY2xhc3MgaXMgYWRkZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGV0ZWN0RWRnZSB7XHJcblx0Y29uc3RydWN0b3Ioc2VsZWN0b3IsIGJ1ZmZlcikge1xyXG5cdFx0dGhpcy5idWZmZXIgICAgICA9IGJ1ZmZlciB8fCAwO1xyXG5cdFx0dGhpcy5lbGVtZW50cyAgICA9IHRoaXMuZ2V0RWxlbWVudHMoc2VsZWN0b3IpO1xyXG5cclxuXHRcdHRoaXMubWFpbigpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTWFpblxyXG5cdCAqL1xyXG5cdG1haW4oKSB7XHJcblx0XHRpZiAodGhpcy5lbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdHRoaXMuY2hlY2tFbGVtZW50cygpO1xyXG5cclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGUgPT4ge1xyXG5cdFx0XHRcdHRoaXMuY2hlY2tFbGVtZW50cygpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrIGlmIGVsZW1lbnRzIGFyZSB0b3VjaGluZyB3aW5kb3cncyBlZGdlIChtaW51cyBidWZmZXIpXHJcblx0ICovXHJcblx0Y2hlY2tFbGVtZW50cygpIHtcclxuXHRcdHRoaXMucmVtb3ZlRWRnZUNsYXNzZXMoKTtcclxuXHJcblx0XHRjb25zdCB3aW5kb3dXaWR0aCA9IHRoaXMuZ2V0V2luZG93V2lkdGgoKTtcclxuXHJcblx0XHR0aGlzLmVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xyXG5cdFx0XHRjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG5cdFx0XHRpZiAoKHJlY3QubGVmdCArIHJlY3Qud2lkdGgpICsgdGhpcy5idWZmZXIgPiB3aW5kb3dXaWR0aCkge1xyXG5cdFx0XHRcdC8vIGVsIGlzIHRvdWNoaW5nIHJpZ2h0IGVkZ2VcclxuXHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKCdyaWdodC1lZGdlJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChyZWN0LmxlZnQgPD0gdGhpcy5idWZmZXIpIHtcclxuXHRcdFx0XHQvLyBlbCBpcyB0b3VjaGluZyBsZWZ0IGVkZ2VcclxuXHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKCdsZWZ0LWVkZ2UnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZW1vdmUgRWRnZSBDbGFzc2VzXHJcblx0ICogUmVtb3ZlIHRoZSBjbGFzc2VzIGFkZGVkIGJ5IGNoZWNrRWxlbWVudHMuXHJcblx0ICovXHJcblx0cmVtb3ZlRWRnZUNsYXNzZXMoKSB7XHJcblx0XHR0aGlzLmVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xyXG5cdFx0XHRlbC5jbGFzc0xpc3QucmVtb3ZlKCdyaWdodC1lZGdlJyk7XHJcblx0XHRcdGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2xlZnQtZWRnZScpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgV2luZG93IFNpemVcclxuXHQgKi9cclxuXHRnZXRXaW5kb3dXaWR0aCgpIHtcclxuXHRcdHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCBFbGVtZW50c1xyXG5cdCAqL1xyXG5cdGdldEVsZW1lbnRzKHNlbGVjdG9yKSB7XHJcblx0XHRyZXR1cm4gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XHJcblx0fVxyXG59XHJcbiIsIi8qKlxuICogU29tZSB2ZXJzaW9ucyBvZiBpT1MgKDguMS0pIGRvIGxvYWQgdGhlIGZpcnN0IGNhbmRpZGF0ZSBvZiBhIHNyY3NldCBjYW5kaWRhdGUgbGlzdCwgaWYgd2lkdGggZGVzY3JpcHRvcnMgd2l0aCB0aGUgc2l6ZXMgYXR0cmlidXRlIGlzIHVzZWQuXG4gKiBUaGlzIHRpbnkgZXh0ZW5zaW9uIHByZXZlbnRzIHRoaXMgd2FzdGVkIGRvd25sb2FkIGJ5IGNyZWF0aW5nIGEgcGljdHVyZSBzdHJ1Y3R1cmUgYXJvdW5kIHRoZSBpbWFnZS5cbiAqIE5vdGU6IFRoaXMgZXh0ZW5zaW9uIGlzIGFscmVhZHkgaW5jbHVkZWQgaW4gdGhlIGxzLnJlc3BpbWcuanMgZmlsZS5cbiAqXG4gKiBVc2FnZTpcbiAqXG4gKiA8aW1nXG4gKiBcdGNsYXNzPVwibGF6eWxvYWRcIlxuICogXHRkYXRhLXNpemVzPVwiYXV0b1wiXG4gKiBcdGRhdGEtc3Jjc2V0PVwic21hbGwuanBnIDY0MHB4LFxuICogXHRcdG1lZGl1bS5qcGcgOTgwdyxcbiAqIFx0XHRsYXJnZS5qcGcgMTI4MHdcIlxuICogXHQvPlxuICovXG5cbihmdW5jdGlvbih3aW5kb3csIGZhY3RvcnkpIHtcblx0dmFyIGdsb2JhbEluc3RhbGwgPSBmdW5jdGlvbigpe1xuXHRcdGZhY3Rvcnkod2luZG93LmxhenlTaXplcyk7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH07XG5cblx0ZmFjdG9yeSA9IGZhY3RvcnkuYmluZChudWxsLCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudCk7XG5cblx0aWYodHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG5cdFx0ZmFjdG9yeShyZXF1aXJlKCdsYXp5c2l6ZXMnKSk7XG5cdH0gZWxzZSBpZih3aW5kb3cubGF6eVNpemVzKSB7XG5cdFx0Z2xvYmFsSW5zdGFsbCgpO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsYXp5dW52ZWlscmVhZCcsIGdsb2JhbEluc3RhbGwsIHRydWUpO1xuXHR9XG59KHdpbmRvdywgZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgbGF6eVNpemVzKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIHJlZ1BpY3R1cmU7XG5cdHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuXHRpZigoJ3NyY3NldCcgaW4gaW1nKSAmJiAhKCdzaXplcycgaW4gaW1nKSAmJiAhd2luZG93LkhUTUxQaWN0dXJlRWxlbWVudCl7XG5cdFx0cmVnUGljdHVyZSA9IC9ecGljdHVyZSQvaTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdsYXp5YmVmb3JldW52ZWlsJywgZnVuY3Rpb24oZSl7XG5cdFx0XHRpZihlLmRldGFpbC5pbnN0YW5jZSAhPSBsYXp5U2l6ZXMpe3JldHVybjt9XG5cblx0XHRcdHZhciBlbGVtLCBwYXJlbnQsIHNyY3NldCwgc2l6ZXMsIGlzUGljdHVyZTtcblx0XHRcdHZhciBwaWN0dXJlLCBzb3VyY2U7XG5cdFx0XHRpZihlLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0bGF6eVNpemVzQ29uZmlnLm5vSU9TRml4IHx8XG5cdFx0XHRcdCEoZWxlbSA9IGUudGFyZ2V0KSB8fFxuXHRcdFx0XHQhKHNyY3NldCA9IGVsZW0uZ2V0QXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zcmNzZXRBdHRyKSkgfHxcblx0XHRcdFx0IShwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUpIHx8XG5cdFx0XHRcdChcblx0XHRcdFx0XHQhKGlzUGljdHVyZSA9IHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpKSAmJlxuXHRcdFx0XHRcdCEoc2l6ZXMgPSBlbGVtLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShsYXp5U2l6ZXNDb25maWcuc2l6ZXNBdHRyKSlcblx0XHRcdFx0KVxuXHRcdFx0KXtyZXR1cm47fVxuXG5cdFx0XHRwaWN0dXJlID0gaXNQaWN0dXJlID8gcGFyZW50IDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncGljdHVyZScpO1xuXG5cdFx0XHRpZighZWxlbS5fbGF6eUltZ1NyYyl7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtLCAnX2xhenlJbWdTcmMnLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0c291cmNlID0gZWxlbS5fbGF6eUltZ1NyYztcblxuXHRcdFx0aWYoc2l6ZXMpe1xuXHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKCdzaXplcycsIHNpemVzKTtcblx0XHRcdH1cblxuXHRcdFx0c291cmNlLnNldEF0dHJpYnV0ZShsYXp5U2l6ZXNDb25maWcuc3Jjc2V0QXR0ciwgc3Jjc2V0KTtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdkYXRhLXBmc3Jjc2V0Jywgc3Jjc2V0KTtcblx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKGxhenlTaXplc0NvbmZpZy5zcmNzZXRBdHRyKTtcblxuXHRcdFx0aWYoIWlzUGljdHVyZSl7XG5cdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUocGljdHVyZSwgZWxlbSk7XG5cdFx0XHRcdHBpY3R1cmUuYXBwZW5kQ2hpbGQoZWxlbSk7XG5cdFx0XHR9XG5cdFx0XHRwaWN0dXJlLmluc2VydEJlZm9yZShzb3VyY2UsIGVsZW0pO1xuXHRcdH0pO1xuXHR9XG59KSk7XG4iLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIE5BVklHQVRJT05cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuaW1wb3J0IHZlcmdlIGZyb20gJ3ZlcmdlJztcclxuaW1wb3J0IHsgbW9iaWxlV2lkdGgsZGVib3VuY2UsIHRyaWdnZXJVcGRhdGVUZXh0IH0gZnJvbSAnLi91dGlsaXRpZXMnO1xyXG5pbXBvcnQgeyBEZXRlY3RFZGdlIH0gZnJvbSAnLi9kZXRlY3QtZWRnZSdcclxuXHJcbi8vIFNldCB1cCBlZGdlIGRldGVjdGlvbiBmb3Igc3ViIG1lbnVzXHJcbndpbmRvdy5uYXZFZGdlRGV0ZWN0ID0gbmV3IERldGVjdEVkZ2UoJy5zdWItbWVudS1sZXZlbC0xJywgMTUpO1xyXG5jb25zdCBuYXZFZGdlRGV0ZWN0ID0gd2luZG93Lm5hdkVkZ2VEZXRlY3Q7XHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIERlY2xhcmUgVmFyaWFibGVzXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuY29uc3QgbmF2aWdhdGlvbiA9ICQoJy5uYXZpZ2F0aW9uJyk7XHJcbmNvbnN0IG5hdk1haW4gPSAkKCcjbmF2LW1haW4nKTtcclxuY29uc3QgaXNQYXJlbnRUcmlnZ2VyID0gJCgnLmlzLXBhcmVudC10cmlnZ2VyJyk7XHJcbmNvbnN0IHN1Yk1lbnUgPSAkKCcuc3ViLW1lbnUnKTtcclxuY29uc3QgbW9iaWxlQmFja0J1dHRvbiA9ICQoJy5qcy1tZW51LWJhY2snKTtcclxuY29uc3QgbW9iaWxlVHJpZ2dlciA9ICQoJy5qcy1tZW51LXRyaWdnZXInKTtcclxuY29uc3QgdHJpZ2dlclRleHQgPSAkKCcuYy10cmlnZ2VyX190ZXh0Jyk7XHJcbmNvbnN0IG1vZGFsVHJpZ2dlciA9ICQoJy5qcy1tb2RhbC10cmlnZ2VyJyk7XHJcbmNvbnN0IG1vZGFsID0gJCgnLmpzLW1vZGFsJyk7XHJcbmNvbnN0IGJvZHkgPSAkKCdib2R5Jyk7XHJcbmNvbnN0ICR3aW5kb3cgPSAkKHdpbmRvdyk7XHJcbmNvbnN0IHdpbmRvd1dpZHRoID0gJHdpbmRvdy53aWR0aCgpO1xyXG5sZXQgY3VycmVudE5hdkRlcHRoID0gMDtcclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQXJpYSBGdW5jdGlvbnNcclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLyoqXHJcbiAqIFNldCBNb2JpbGUgQXJpYVxyXG4gKi9cclxuZnVuY3Rpb24gbW9iaWxlVHJpZ2dlckFyaWEoaGlkZGVuID0gdHJ1ZSwgZXhwYW5kZWQgPSB0cnVlLCBoYXNwb3B1cCA9IHRydWUpIHtcclxuXHRtb2JpbGVUcmlnZ2VyLmF0dHIoe1xyXG5cdFx0J2FyaWEtaGlkZGVuJzogaGlkZGVuLFxyXG5cdFx0J2FyaWEtZXhwYW5kZWQnOiBleHBhbmRlZCxcclxuXHRcdCdhcmlhLWhhc3BvcHVwJzogaGFzcG9wdXAsXHJcblx0fSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgQXJpYSBBdHRyaWJ1dGVzXHJcbiAqIFRoaXMgaXMgcnVuIG9uIHBhZ2UgbG9hZCB0byBzZXR1cCBhcmlhLlxyXG4gKi9cclxuZnVuY3Rpb24gYWRkQXJpYSgpIHtcclxuXHQvLyBCdXR0b25cclxuXHRtb2JpbGVUcmlnZ2VyQXJpYSh0cnVlLCBmYWxzZSwgdHJ1ZSk7XHJcblxyXG5cdC8vIE5hdmlnYXRpb25cclxuXHRuYXZpZ2F0aW9uLmFyaWFIaWRkZW5GYWxzZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIEFyaWEgb24gTW9iaWxlXHJcbiAqIFRoaXMgaXMgcnVuIG9uIHBhZ2UgbG9hZCB3aGVuIG9uIG1vYmlsZSB2aWV3LlxyXG4gKi9cclxuZnVuY3Rpb24gYWRkTW9iaWxlQXJpYSgpIHtcclxuXHQvLyBCdXR0b25cclxuXHRtb2JpbGVUcmlnZ2VyQXJpYShmYWxzZSwgZmFsc2UsIHRydWUpO1xyXG5cclxuXHQvLyBOYXZpZ2F0aW9uXHJcblx0bmF2aWdhdGlvbi5hcmlhSGlkZGVuVHJ1ZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogVG9nZ2xlIEFyaWEgQXR0cmlidXRlc1xyXG4gKiBUaGlzIGlzIHJ1biB3aGVuIG1lbnUgYnV0dG9uIGlzIGNsaWNrZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b2dnbGVNb2JpbGVBcmlhKCkge1xyXG5cdC8vIEJ1dHRvblxyXG5cdG1vYmlsZVRyaWdnZXJBcmlhKGZhbHNlLCB0cnVlLCBmYWxzZSk7XHJcblxyXG5cdC8vIE5hdmlnYXRpb25cclxuXHRuYXZpZ2F0aW9uLmFyaWFIaWRkZW5GYWxzZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogT3BlbiBBcmlhIHN0YXRlcyB0byBzdWItbWVudSBhbmQgcGFyZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBvcGVuU3ViTWVudUFyaWEodHJpZ2dlcikge1xyXG5cdHRyaWdnZXIuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xyXG5cdHRyaWdnZXIubmV4dCgnLnN1Yi1tZW51JykuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbG9zZWQgQXJpYSBzdGF0ZXMgdG8gc3ViLW1lbnUgYW5kIHBhcmVudFxyXG4gKi9cclxuZnVuY3Rpb24gY2xvc2VTdWJNZW51QXJpYShwYXJlbnRUcmlnZ2VyID0gaXNQYXJlbnRUcmlnZ2VyLCBtZW51ID0gc3ViTWVudSkge1xyXG5cdHBhcmVudFRyaWdnZXIuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcclxuXHRtZW51LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XHJcbn1cclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gRXZlbnQgRnVuY3Rpb25zXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbi8qKlxyXG4gKiBDbG9zZSBNYWluIE5hdiBNZW51c1xyXG4gKi9cclxuZnVuY3Rpb24gY2xvc2VNZW51cyhwYXJlbnRUcmlnZ2VyID0gaXNQYXJlbnRUcmlnZ2VyLCBtZW51ID0gJCgnLm5hdmlnYXRpb24gLnN1Yi1tZW51JykpIHtcclxuXHRwYXJlbnRUcmlnZ2VyLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRwYXJlbnRUcmlnZ2VyLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRtZW51LnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRjbG9zZVN1Yk1lbnVBcmlhKHBhcmVudFRyaWdnZXIsIG1lbnUpO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xvc2UgU2libGluZyBNb2RhbHNcclxuICovXHJcbmZ1bmN0aW9uIGNsb3NlU2libGluZ01vZGFscyh0aGlzVHJpZ2dlciwgdGhpc01vZGFsKSB7XHJcblx0bW9kYWwubm90KHRoaXNNb2RhbCkucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cdG1vZGFsVHJpZ2dlci5ub3QodGhpc1RyaWdnZXIpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRtb2RhbC5ub3QodGhpc01vZGFsKS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xyXG5cdG1vZGFsVHJpZ2dlci5ub3QodGhpc1RyaWdnZXIpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbG9zZSBBbGwgTW9kYWxzXHJcbiAqL1xyXG5mdW5jdGlvbiBjbG9zZU1vZGFscygpIHtcclxuXHRtb2RhbFRyaWdnZXIucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cdG1vZGFsLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRjbG9zZVN1Yk1lbnVBcmlhKG1vZGFsVHJpZ2dlciwgbW9kYWwpO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xvc2UgTW9iaWxlIE5hdlxyXG4gKi9cclxuZnVuY3Rpb24gY2xvc2VNb2JpbGVOYXYoKSB7XHJcblx0aWYgKHdpbmRvd1dpZHRoIDwgbW9iaWxlV2lkdGgpIHtcclxuXHRcdG1vYmlsZVRyaWdnZXIucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cdFx0bmF2aWdhdGlvbi5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcblx0XHRhZGRNb2JpbGVBcmlhKCk7XHJcblx0XHRjdXJyZW50TmF2RGVwdGggPSAwO1xyXG5cdFx0c2xpZGVOYXYoY3VycmVudE5hdkRlcHRoKTtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYWluIHRvZ2dsZSBmb3IgYWxsIHJldmVhbHNcclxuICovXHJcbmZ1bmN0aW9uIHRvZ2dsZU5hdkVsZW1lbnQgKG1lbnVUcmlnZ2VyID0gaXNQYXJlbnRUcmlnZ2VyLCBtZW51ID0gJy5zdWItbWVudScpIHtcclxuXHRtZW51VHJpZ2dlci5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCl7XHJcblx0XHRjb25zdCBjdXJyZW50VHJpZ2dlciA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XHJcblx0XHRjb25zdCBjdXJyZW50TWVudSA9IGN1cnJlbnRUcmlnZ2VyLm5leHQobWVudSk7XHJcblx0XHRjb25zdCBzaWJsaW5ncyA9IGN1cnJlbnRUcmlnZ2VyLnBhcmVudCgpLnNpYmxpbmdzKCk7XHJcblx0XHRjb25zdCBzaWJsaW5nVHJpZ2dlcnMgPSBjdXJyZW50VHJpZ2dlci5wYXJlbnQoKS5zaWJsaW5ncygpLmNoaWxkcmVuKCcuaXMtcGFyZW50LXRyaWdnZXInKTtcclxuXHRcdGNvbnN0IHNpYmxpbmdNZW51cyA9IHNpYmxpbmdUcmlnZ2Vycy5uZXh0KG1lbnUpO1xyXG5cdFx0Y29uc3QgZGVwdGggPSBjdXJyZW50VHJpZ2dlci5kYXRhKCdsZXZlbCcpO1xyXG5cclxuXHRcdC8vIE9wZW4sIENsb3NlIHRyaWdnZXIgYW5kIG1lbnUuXHJcblx0XHRpZiAodmVyZ2Uudmlld3BvcnRXKCkgPCBtb2JpbGVXaWR0aCkge1xyXG5cdFx0XHRpZiAoY3VycmVudFRyaWdnZXIuaGFzQ2xhc3MoJ2pzLW1vZGFsLXRyaWdnZXInKSkge1xyXG5cdFx0XHRcdGN1cnJlbnRUcmlnZ2VyLnRvZ2dsZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHJcblx0XHRcdFx0Ly8gT3BlbiBtZWdhIG5hdiBtb2RhbHMgZnJvbSBmbG9hdGluZyBuYXZcclxuXHRcdFx0XHRpZiAoKGN1cnJlbnRUcmlnZ2VyLmF0dHIoJ2RhdGEtbWFpbi1uYXYtdHJpZ2dlcicpKSkge1xyXG5cdFx0XHRcdFx0Y2xvc2VTaWJsaW5nTW9kYWxzKGN1cnJlbnRUcmlnZ2VyLCBjdXJyZW50TWVudSk7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3QgbmF2TW9kYWwgPSAkKGBbZGF0YS1tYWluLW5hdi1tb2RhbD1cIiR7Y3VycmVudFRyaWdnZXIuYXR0cignZGF0YS1tYWluLW5hdi10cmlnZ2VyJyl9XCJdYCk7XHJcblxyXG5cdFx0XHRcdFx0bmF2TW9kYWxcclxuXHRcdFx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdpcy1hY3RpdmUnKVxyXG5cdFx0XHRcdFx0XHQudG9nZ2xlQXJpYUhpZGRlbigpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBmaXggYnVnIHdoZW4gY2xpY2tpbmcgZm9yd2FyZCwgYmFjayBhbmQgdGhlbiBzYW1lIHRyaWdnZXJcclxuXHRcdFx0XHQvLyBpcy1hY3RpdmUgd2FzIGJlaW5nIHJlbW92ZWQgYW5kIGNsb3NpbmcgdGhlIG1lbnUuXHJcblx0XHRcdFx0Y3VycmVudFRyaWdnZXIuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cdFx0XHRcdGN1cnJlbnRNZW51LmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHsgLy8gZGVza3RvcCB0cmlnZ2VycyBhbmQgbWVudXMuXHJcblx0XHRcdGN1cnJlbnRUcmlnZ2VyLnRvZ2dsZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRcdFx0Y3VycmVudE1lbnUudG9nZ2xlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbmRpdGlvbmFsIHRvIHRhcmdldCBldmVudHNcclxuXHRcdGlmIChjdXJyZW50VHJpZ2dlci5oYXNDbGFzcygnanMtbW9kYWwtdHJpZ2dlcicpKSB7XHJcblx0XHRcdGlmICghY3VycmVudFRyaWdnZXIuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpIHx8IHZlcmdlLnZpZXdwb3J0VygpID4gbW9iaWxlV2lkdGgpIHtcclxuXHRcdFx0XHRjbG9zZVNpYmxpbmdNb2RhbHMoY3VycmVudFRyaWdnZXIsIGN1cnJlbnRNZW51KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y2xvc2VNZW51cygpO1xyXG5cdFx0XHRjbG9zZU1vYmlsZU5hdigpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2xvc2VNb2RhbHMoKTtcclxuXHRcdFx0Y2xvc2VTdWJNZW51QXJpYShzaWJsaW5nVHJpZ2dlcnMsIHNpYmxpbmdNZW51cyk7XHJcblx0XHRcdHNpYmxpbmdzLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRcdFx0c2libGluZ1RyaWdnZXJzLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRcdFx0c2libGluZ01lbnVzLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRcdFx0Y3VycmVudFRyaWdnZXIucGFyZW50KCkudG9nZ2xlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNsaWRlIE1vYmlsZSBOYXZcclxuXHRcdGlmIChkZXB0aCAmJiB2ZXJnZS52aWV3cG9ydFcoKSA8IG1vYmlsZVdpZHRoKSB7XHJcblx0XHRcdGN1cnJlbnROYXZEZXB0aCA9IGRlcHRoO1xyXG5cdFx0XHRzbGlkZU5hdihjdXJyZW50TmF2RGVwdGgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbmRpdGlvbmFsIGZvciBib2R5IGNsYXNzZXNcclxuXHRcdGlmIChjdXJyZW50VHJpZ2dlci5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcclxuXHRcdFx0Ym9keS5hZGRDbGFzcygnbmF2LWFjdGl2ZScpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ym9keS5yZW1vdmVDbGFzcygnbmF2LWFjdGl2ZScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbmRpdGlvbmFsIGZvciBhcmlhIGF0dHJcclxuXHRcdGlmIChjdXJyZW50VHJpZ2dlci5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcclxuXHRcdFx0b3BlblN1Yk1lbnVBcmlhKGN1cnJlbnRUcmlnZ2VyKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNsb3NlU3ViTWVudUFyaWEoY3VycmVudFRyaWdnZXIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNjcm9sbCBUb3BcclxuXHRcdG5hdmlnYXRpb24uc2Nyb2xsVG9wKDApO1xyXG5cclxuXHRcdC8vIENhbGwgRWRnZSBEZXRlY3Rvci5cclxuXHRcdG5hdkVkZ2VEZXRlY3QuY2hlY2tFbGVtZW50cygpO1xyXG5cdH0pO1xyXG59XHJcblxyXG4vKipcclxuICogU2xpZGUgVXRpbGl0aWVzXHJcbiAqL1xyXG5cclxuIC8vIFNsaWRlIG5hdiBieSBnaXZlbiBkZXB0aFxyXG5mdW5jdGlvbiBzbGlkZU5hdihkZXB0aCkge1xyXG5cdG5hdk1haW4uY3NzKCAndHJhbnNmb3JtJywgYHRyYW5zbGF0ZVgoJHtkZXB0aCAqIC0xMDB9JSlgICk7XHJcblx0ZGlzcGxheUJhY2tCdXR0b24oKTtcclxufVxyXG5cclxuLy8gU2hvdyBvciBIaWRlIEJhY2sgQnV0dG9uIGJhc2VkIG9uIGRlcHRoXHJcbmZ1bmN0aW9uIGRpc3BsYXlCYWNrQnV0dG9uKCkge1xyXG5cdGlmIChjdXJyZW50TmF2RGVwdGggPiAwKSB7XHJcblx0XHRtb2JpbGVCYWNrQnV0dG9uLnNob3coKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0bW9iaWxlQmFja0J1dHRvbi5oaWRlKCk7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQ2xvc2UgQWxsIFV0aWxpdHlcclxuICovXHJcbmZ1bmN0aW9uIGNsb3NlQWxsKCkge1xyXG5cdGN1cnJlbnROYXZEZXB0aCA9IDA7XHJcblx0c2xpZGVOYXYoY3VycmVudE5hdkRlcHRoKTtcclxuXHRjbG9zZU1lbnVzKCk7XHJcblx0Y2xvc2VNb2RhbHMoKTtcclxuXHRib2R5LnJlbW92ZUNsYXNzKCduYXYtYWN0aXZlJyk7XHJcblx0bW9iaWxlVHJpZ2dlci5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcblx0bmF2aWdhdGlvbi5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbG9zZSBldmVyeXRoaW5nIHdoZW4gY2xpY2sgaXMgb2ZmIG5hdiBlbGVtZW50c1xyXG4gKi9cclxuZnVuY3Rpb24gb3V0c2lkZUNsaWNrKCkge1xyXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiAoIWUudGFyZ2V0LmNsb3Nlc3QoJy5qcy1uYXYnKSkgPyBjbG9zZUFsbCgpIDogbnVsbCk7XHJcbn1cclxuXHJcbi8vIENsb3NlIG1lbnUgaWYgRXNjIGtleSBpcyBwdXNoZWRcclxuZnVuY3Rpb24gY2xvc2VNZW51c09uRXNjKCkge1xyXG5cdGJvZHkub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0aWYgKGUud2hpY2ggPT09IDI3KSB7XHJcblx0XHRcdGlmIChib2R5Lmhhc0NsYXNzKCduYXYtYWN0aXZlJykpIHtcclxuXHRcdFx0XHRjbG9zZUFsbCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXYXRjaCBmb3IgY2xpY2tzXHJcbiAqL1xyXG5mdW5jdGlvbiBydW5FdmVudFdhdGNoZXJzKCkge1xyXG5cdHRvZ2dsZU5hdkVsZW1lbnQoKTtcclxuXHR0b2dnbGVOYXZFbGVtZW50KG1vZGFsVHJpZ2dlciwgJy5qcy1tb2RhbCcpO1xyXG5cdG91dHNpZGVDbGljaygpO1xyXG59XHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIE1vYmlsZSBzcGVjaWZpYyBmdW5jdGlvbnNcclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLyoqXHJcbiAqIFRvZ2dsZSBNb2JpbGUgTmF2XHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBFdmVudCBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b2dnbGVNb2JpbGVOYXZpZ2F0aW9uKGV2ZW50KSB7XHJcblx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0bW9iaWxlVHJpZ2dlci50b2dnbGVDbGFzcygnaXMtYWN0aXZlJyk7XHJcblx0bmF2aWdhdGlvbi50b2dnbGVDbGFzcygnaXMtYWN0aXZlJyk7XHJcblxyXG5cdGlmIChtb2JpbGVUcmlnZ2VyLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xyXG5cdFx0dG9nZ2xlTW9iaWxlQXJpYSgpO1xyXG5cdFx0Y2xvc2VNb2RhbHMoKTtcclxuXHRcdGJvZHkuYWRkQ2xhc3MoJ25hdi1hY3RpdmUnKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0YWRkTW9iaWxlQXJpYSgpO1xyXG5cdFx0Y2xvc2VBbGwoKTtcclxuXHR9XHJcblxyXG5cdHRyaWdnZXJVcGRhdGVUZXh0KHRyaWdnZXJUZXh0KTtcclxufVxyXG5cclxuLy8gVG9nZ2xlIG1vYmlsZSBuYXYgZXZlbnRcclxubW9iaWxlVHJpZ2dlci5vbignY2xpY2snLCB0b2dnbGVNb2JpbGVOYXZpZ2F0aW9uKTtcclxuXHJcbi8qKlxyXG4gKiBCYWNrIGJ1dHRvbiBldmVudFxyXG4gKi9cclxuZnVuY3Rpb24gYmFja0J1dHRvbigpIHtcclxuXHRtb2JpbGVCYWNrQnV0dG9uLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBjdXJyZW50IHN1YiBsZXZlbCBpcyBkZWFjdGl2YXRlZFxyXG5cdFx0Ly8gdG9nZ2xlTmF2RWxlbWVudCB3aWxsIHRvZ2dsZSB0aGUgaXMtYWN0aXZlIGNsYXNzLlxyXG5cdFx0JChgLnN1Yi1tZW51LWxldmVsLSR7Y3VycmVudE5hdkRlcHRofWApLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHJcblx0XHRjdXJyZW50TmF2RGVwdGgtLTtcclxuXHRcdHNsaWRlTmF2KGN1cnJlbnROYXZEZXB0aCk7XHJcblx0fSlcclxufVxyXG5cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBSdW4gRnVuY3Rpb25zXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuYWRkQXJpYSgpO1xyXG5ydW5FdmVudFdhdGNoZXJzKCk7XHJcbmJhY2tCdXR0b24oKTtcclxuY2xvc2VNZW51c09uRXNjKCk7XHJcblxyXG4vLyBJZiBtb2JpbGUgdXBkYXRlIGFyaWEuXHJcbmlmICh2ZXJnZS52aWV3cG9ydFcoKSA8IG1vYmlsZVdpZHRoKSB7XHJcblx0YWRkTW9iaWxlQXJpYSgpO1xyXG59XHJcblxyXG4vLyBDaGVjayBmb3IgcmVzaXplIHRvIHVwZGF0ZSBhcmlhLlxyXG4kd2luZG93Lm9uKFxyXG5cdCdyZXNpemUnLFxyXG5cdGRlYm91bmNlKGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKHZlcmdlLnZpZXdwb3J0VygpID49IG1vYmlsZVdpZHRoKSB7XHJcblx0XHRcdGFkZE1vYmlsZUFyaWEoKTtcclxuXHRcdFx0dHJpZ2dlclVwZGF0ZVRleHQodHJpZ2dlclRleHQpO1xyXG5cdFx0XHRjbG9zZUFsbCgpO1xyXG5cdFx0fVxyXG5cdH0sIDUwMClcclxuKTtcclxuXHJcbi8vIEFkZCBmdW5jdGlvbiB0byB3aW5kb3cgZm9yIHVzZSBmcm9tIG90aGVyIHNjcmlwdHMuXHJcbndpbmRvdy5uYXZDbG9zZUFsbCA9IGZ1bmN0aW9uKCkge1xyXG5cdGNsb3NlQWxsKCk7XHJcbn1cclxuIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBFWFRFTkRcclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLyoqXHJcbiAqIEFjY2Vzc2liaWxpdHlcclxuICovXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdHRvZ2dsZUFyaWFIaWRkZW46IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKCF0aGlzLmF0dHIoJ2FyaWEtaGlkZGVuJykpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBoaWRkZW4gPSB0aGlzLmF0dHIoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJyB8fCBmYWxzZTtcclxuXHRcdHJldHVybiB0aGlzLmF0dHIoJ2FyaWEtaGlkZGVuJywgIWhpZGRlbik7XHJcblx0fSxcclxuXHRhcmlhSGlkZGVuVHJ1ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcblx0fSxcclxuXHRhcmlhSGlkZGVuRmFsc2U6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuXHR9LFxyXG5cdHRvZ2dsZUFyaWFFeHBhbmRlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoIXRoaXMuYXR0cignYXJpYS1leHBhbmRlZCcpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgaGlkZGVuID0gdGhpcy5hdHRyKCdhcmlhLWV4cGFuZGVkJykgPT09ICd0cnVlJyB8fCBmYWxzZTtcclxuXHRcdHJldHVybiB0aGlzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAhaGlkZGVuKTtcclxuXHR9LFxyXG5cdGFyaWFFeHBhbmRlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcclxuXHR9LFxyXG5cdGFyaWFOb3RFeHBhbmRlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XHJcblx0fSxcclxufSk7XHJcbiIsIi8qXG5UaGlzIHBsdWdpbiBleHRlbmRzIGxhenlTaXplcyB0byBsYXp5TG9hZDpcbmJhY2tncm91bmQgaW1hZ2VzLCB2aWRlb3MvcG9zdGVycyBhbmQgc2NyaXB0c1xuXG5CYWNrZ3JvdW5kLUltYWdlOlxuRm9yIGJhY2tncm91bmQgaW1hZ2VzLCB1c2UgZGF0YS1iZyBhdHRyaWJ1dGU6XG48ZGl2IGNsYXNzPVwibGF6eWxvYWRcIiBkYXRhLWJnPVwiYmctaW1nLmpwZ1wiPjwvZGl2PlxuXG4gVmlkZW86XG4gRm9yIHZpZGVvL2F1ZGlvIHVzZSBkYXRhLXBvc3RlciBhbmQgcHJlbG9hZD1cIm5vbmVcIjpcbiA8dmlkZW8gY2xhc3M9XCJsYXp5bG9hZFwiIGRhdGEtcG9zdGVyPVwicG9zdGVyLmpwZ1wiIHByZWxvYWQ9XCJub25lXCI+XG4gPCEtLSBzb3VyY2VzIC0tPlxuIDwvdmlkZW8+XG5cbiBTY3JpcHRzOlxuIEZvciBzY3JpcHRzIHVzZSBkYXRhLXNjcmlwdDpcbiA8ZGl2IGNsYXNzPVwibGF6eWxvYWRcIiBkYXRhLXNjcmlwdD1cIm1vZHVsZS1uYW1lLmpzXCI+PC9kaXY+XG5cblxuIFNjcmlwdCBtb2R1bGVzIHVzaW5nIHJlcXVpcmU6XG4gRm9yIG1vZHVsZXMgdXNpbmcgcmVxdWlyZSB1c2UgZGF0YS1yZXF1aXJlOlxuIDxkaXYgY2xhc3M9XCJsYXp5bG9hZFwiIGRhdGEtcmVxdWlyZT1cIm1vZHVsZS1uYW1lXCI+PC9kaXY+XG4qL1xuXG4oZnVuY3Rpb24od2luZG93LCBmYWN0b3J5KSB7XG5cdHZhciBnbG9iYWxJbnN0YWxsID0gZnVuY3Rpb24oKXtcblx0XHRmYWN0b3J5KHdpbmRvdy5sYXp5U2l6ZXMpO1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsYXp5dW52ZWlscmVhZCcsIGdsb2JhbEluc3RhbGwsIHRydWUpO1xuXHR9O1xuXG5cdGZhY3RvcnkgPSBmYWN0b3J5LmJpbmQobnVsbCwgd2luZG93LCB3aW5kb3cuZG9jdW1lbnQpO1xuXG5cdGlmKHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpe1xuXHRcdGZhY3RvcnkocmVxdWlyZSgnbGF6eXNpemVzJykpO1xuXHR9IGVsc2UgaWYod2luZG93LmxhenlTaXplcykge1xuXHRcdGdsb2JhbEluc3RhbGwoKTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbGF6eXVudmVpbHJlYWQnLCBnbG9iYWxJbnN0YWxsLCB0cnVlKTtcblx0fVxufSh3aW5kb3csIGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIGxhenlTaXplcykge1xuXHQvKmpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBiZ0xvYWQsIHJlZ0JnVXJsRXNjYXBlO1xuXHR2YXIgdW5pcXVlVXJscyA9IHt9O1xuXG5cdGlmKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpe1xuXHRcdHJlZ0JnVXJsRXNjYXBlID0gL1xcKHxcXCl8XFxzfCcvO1xuXG5cdFx0YmdMb2FkID0gZnVuY3Rpb24gKHVybCwgY2Ipe1xuXHRcdFx0dmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHRcdFx0aW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGltZy5vbmxvYWQgPSBudWxsO1xuXHRcdFx0XHRpbWcub25lcnJvciA9IG51bGw7XG5cdFx0XHRcdGltZyA9IG51bGw7XG5cdFx0XHRcdGNiKCk7XG5cdFx0XHR9O1xuXHRcdFx0aW1nLm9uZXJyb3IgPSBpbWcub25sb2FkO1xuXG5cdFx0XHRpbWcuc3JjID0gdXJsO1xuXG5cdFx0XHRpZihpbWcgJiYgaW1nLmNvbXBsZXRlICYmIGltZy5vbmxvYWQpe1xuXHRcdFx0XHRpbWcub25sb2FkKCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2xhenliZWZvcmV1bnZlaWwnLCBmdW5jdGlvbihlKXtcblx0XHRcdGlmKGUuZGV0YWlsLmluc3RhbmNlICE9IGxhenlTaXplcyl7cmV0dXJuO31cblxuXHRcdFx0dmFyIHRtcCwgbG9hZCwgYmcsIHBvc3Rlcjtcblx0XHRcdGlmKCFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcblxuXHRcdFx0XHRpZihlLnRhcmdldC5wcmVsb2FkID09ICdub25lJyl7XG5cdFx0XHRcdFx0ZS50YXJnZXQucHJlbG9hZCA9ICdhdXRvJztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRtcCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1saW5rJyk7XG5cdFx0XHRcdGlmKHRtcCl7XG5cdFx0XHRcdFx0YWRkU3R5bGVTY3JpcHQodG1wLCB0cnVlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGhhbmRsZSBkYXRhLXNjcmlwdFxuXHRcdFx0XHR0bXAgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2NyaXB0Jyk7XG5cdFx0XHRcdGlmKHRtcCl7XG5cdFx0XHRcdFx0YWRkU3R5bGVTY3JpcHQodG1wKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGhhbmRsZSBkYXRhLXJlcXVpcmVcblx0XHRcdFx0dG1wID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXJlcXVpcmUnKTtcblx0XHRcdFx0aWYodG1wKXtcblx0XHRcdFx0XHRpZihsYXp5U2l6ZXMuY2ZnLnJlcXVpcmVKcyl7XG5cdFx0XHRcdFx0XHRsYXp5U2l6ZXMuY2ZnLnJlcXVpcmVKcyhbdG1wXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGFkZFN0eWxlU2NyaXB0KHRtcCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaGFuZGxlIGRhdGEtYmdcblx0XHRcdFx0YmcgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYmcnKTtcblx0XHRcdFx0aWYgKGJnKSB7XG5cdFx0XHRcdFx0ZS5kZXRhaWwuZmlyZXNMb2FkID0gdHJ1ZTtcblx0XHRcdFx0XHRsb2FkID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdGUudGFyZ2V0LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9ICd1cmwoJyArIChyZWdCZ1VybEVzY2FwZS50ZXN0KGJnKSA/IEpTT04uc3RyaW5naWZ5KGJnKSA6IGJnICkgKyAnKSc7XG5cdFx0XHRcdFx0XHRlLmRldGFpbC5maXJlc0xvYWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGxhenlTaXplcy5maXJlKGUudGFyZ2V0LCAnX2xhenlsb2FkZWQnLCB7fSwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGJnTG9hZChiZywgbG9hZCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBoYW5kbGUgZGF0YS1wb3N0ZXJcblx0XHRcdFx0cG9zdGVyID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXBvc3RlcicpO1xuXHRcdFx0XHRpZihwb3N0ZXIpe1xuXHRcdFx0XHRcdGUuZGV0YWlsLmZpcmVzTG9hZCA9IHRydWU7XG5cdFx0XHRcdFx0bG9hZCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRlLnRhcmdldC5wb3N0ZXIgPSBwb3N0ZXI7XG5cdFx0XHRcdFx0XHRlLmRldGFpbC5maXJlc0xvYWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGxhenlTaXplcy5maXJlKGUudGFyZ2V0LCAnX2xhenlsb2FkZWQnLCB7fSwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGJnTG9hZChwb3N0ZXIsIGxvYWQpO1xuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LCBmYWxzZSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZFN0eWxlU2NyaXB0KHNyYywgc3R5bGUpe1xuXHRcdGlmKHVuaXF1ZVVybHNbc3JjXSl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChzdHlsZSA/ICdsaW5rJyA6ICdzY3JpcHQnKTtcblx0XHR2YXIgaW5zZXJ0RWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcblxuXHRcdGlmKHN0eWxlKXtcblx0XHRcdGVsZW0ucmVsID0gJ3N0eWxlc2hlZXQnO1xuXHRcdFx0ZWxlbS5ocmVmID0gc3JjO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNyYyA9IHNyYztcblx0XHR9XG5cdFx0dW5pcXVlVXJsc1tzcmNdID0gdHJ1ZTtcblx0XHR1bmlxdWVVcmxzW2VsZW0uc3JjIHx8IGVsZW0uaHJlZl0gPSB0cnVlO1xuXHRcdGluc2VydEVsZW0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbSwgaW5zZXJ0RWxlbSk7XG5cdH1cbn0pKTtcbiIsIihmdW5jdGlvbih3aW5kb3csIGZhY3RvcnkpIHtcblx0dmFyIGdsb2JhbEluc3RhbGwgPSBmdW5jdGlvbigpe1xuXHRcdGZhY3Rvcnkod2luZG93LmxhenlTaXplcyk7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xhenl1bnZlaWxyZWFkJywgZ2xvYmFsSW5zdGFsbCwgdHJ1ZSk7XG5cdH07XG5cblx0ZmFjdG9yeSA9IGZhY3RvcnkuYmluZChudWxsLCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudCk7XG5cblx0aWYodHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG5cdFx0ZmFjdG9yeShyZXF1aXJlKCdsYXp5c2l6ZXMnKSk7XG5cdH0gZWxzZSBpZih3aW5kb3cubGF6eVNpemVzKSB7XG5cdFx0Z2xvYmFsSW5zdGFsbCgpO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsYXp5dW52ZWlscmVhZCcsIGdsb2JhbEluc3RhbGwsIHRydWUpO1xuXHR9XG59KHdpbmRvdywgZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgbGF6eVNpemVzKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRpZighd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpe3JldHVybjt9XG5cblx0dmFyIHJlZ0Rlc2NyaXB0b3JzID0gL1xccysoXFxkKykod3xoKVxccysoXFxkKykod3xoKS87XG5cdHZhciByZWdDc3NGaXQgPSAvcGFyZW50LWZpdFtcIiddKlxccyo6XFxzKltcIiddKihjb250YWlufGNvdmVyfHdpZHRoKS87XG5cdHZhciByZWdDc3NPYmplY3QgPSAvcGFyZW50LWNvbnRhaW5lcltcIiddKlxccyo6XFxzKltcIiddKiguKz8pKD89KFxcc3wkfCx8J3xcInw7KSkvO1xuXHR2YXIgcmVnUGljdHVyZSA9IC9ecGljdHVyZSQvaTtcblxuXHR2YXIgZ2V0Q1NTID0gZnVuY3Rpb24gKGVsZW0pe1xuXHRcdHJldHVybiAoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtLCBudWxsKSB8fCB7fSk7XG5cdH07XG5cblx0dmFyIHBhcmVudEZpdCA9IHtcblxuXHRcdGdldFBhcmVudDogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50U2VsKXtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtZW50O1xuXHRcdFx0dmFyIHBhcmVudE5vZGUgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cblx0XHRcdGlmKCghcGFyZW50U2VsIHx8IHBhcmVudFNlbCA9PSAncHJldicpICYmIHBhcmVudE5vZGUgJiYgcmVnUGljdHVyZS50ZXN0KHBhcmVudE5vZGUubm9kZU5hbWUgfHwgJycpKXtcblx0XHRcdFx0cGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0aWYocGFyZW50U2VsICE9ICdzZWxmJyl7XG5cdFx0XHRcdGlmKHBhcmVudFNlbCA9PSAncHJldicpe1xuXHRcdFx0XHRcdHBhcmVudCA9IGVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZztcblx0XHRcdFx0fSBlbHNlIGlmKHBhcmVudFNlbCAmJiAocGFyZW50Tm9kZS5jbG9zZXN0IHx8IHdpbmRvdy5qUXVlcnkpKXtcblx0XHRcdFx0XHRwYXJlbnQgPSAocGFyZW50Tm9kZS5jbG9zZXN0ID9cblx0XHRcdFx0XHRcdFx0cGFyZW50Tm9kZS5jbG9zZXN0KHBhcmVudFNlbCkgOlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkocGFyZW50Tm9kZSkuY2xvc2VzdChwYXJlbnRTZWwpWzBdKSB8fFxuXHRcdFx0XHRcdFx0cGFyZW50Tm9kZVxuXHRcdFx0XHRcdDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwYXJlbnQgPSBwYXJlbnROb2RlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwYXJlbnQ7XG5cdFx0fSxcblxuXHRcdGdldEZpdDogZnVuY3Rpb24oZWxlbWVudCl7XG5cdFx0XHR2YXIgdG1wTWF0Y2gsIHBhcmVudE9iajtcblx0XHRcdHZhciBjc3MgPSBnZXRDU1MoZWxlbWVudCk7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzcy5jb250ZW50IHx8IGNzcy5mb250RmFtaWx5O1xuXHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0Zml0OiBlbGVtZW50Ll9sYXp5c2l6ZXNQYXJlbnRGaXQgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50LWZpdCcpXG5cdFx0XHR9O1xuXG5cdFx0XHRpZighb2JqLmZpdCAmJiBjb250ZW50ICYmICh0bXBNYXRjaCA9IGNvbnRlbnQubWF0Y2gocmVnQ3NzRml0KSkpe1xuXHRcdFx0XHRvYmouZml0ID0gdG1wTWF0Y2hbMV07XG5cdFx0XHR9XG5cblx0XHRcdGlmKG9iai5maXQpe1xuXHRcdFx0XHRwYXJlbnRPYmogPSBlbGVtZW50Ll9sYXp5c2l6ZXNQYXJlbnRDb250YWluZXIgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50LWNvbnRhaW5lcicpO1xuXG5cdFx0XHRcdGlmKCFwYXJlbnRPYmogJiYgY29udGVudCAmJiAodG1wTWF0Y2ggPSBjb250ZW50Lm1hdGNoKHJlZ0Nzc09iamVjdCkpKXtcblx0XHRcdFx0XHRwYXJlbnRPYmogPSB0bXBNYXRjaFsxXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9iai5wYXJlbnQgPSBwYXJlbnRGaXQuZ2V0UGFyZW50KGVsZW1lbnQsIHBhcmVudE9iaik7XG5cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b2JqLmZpdCA9IGNzcy5vYmplY3RGaXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fSxcblxuXHRcdGdldEltYWdlUmF0aW86IGZ1bmN0aW9uKGVsZW1lbnQpe1xuXHRcdFx0dmFyIGksIHNyY3NldCwgbWVkaWEsIHJhdGlvLCBtYXRjaDtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cdFx0XHR2YXIgZWxlbWVudHMgPSBwYXJlbnQgJiYgcmVnUGljdHVyZS50ZXN0KHBhcmVudC5ub2RlTmFtZSB8fCAnJykgP1xuXHRcdFx0XHRcdHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCdzb3VyY2UsIGltZycpIDpcblx0XHRcdFx0XHRbZWxlbWVudF1cblx0XHRcdFx0O1xuXG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcblx0XHRcdFx0c3Jjc2V0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobGF6eVNpemVzQ29uZmlnLnNyY3NldEF0dHIpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzcmNzZXQnKSB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wZnNyY3NldCcpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXJpc3Jjc2V0JykgfHwgJyc7XG5cdFx0XHRcdG1lZGlhID0gZWxlbWVudC5fbHNNZWRpYSB8fCBlbGVtZW50LmdldEF0dHJpYnV0ZSgnbWVkaWEnKTtcblx0XHRcdFx0bWVkaWEgPSBsYXp5U2l6ZXNDb25maWcuY3VzdG9tTWVkaWFbZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWVkaWEnKSB8fCBtZWRpYV0gfHwgbWVkaWE7XG5cblx0XHRcdFx0aWYoc3Jjc2V0ICYmICghbWVkaWEgfHwgKHdpbmRvdy5tYXRjaE1lZGlhICYmIG1hdGNoTWVkaWEobWVkaWEpIHx8IHt9KS5tYXRjaGVzICkpe1xuXHRcdFx0XHRcdHJhdGlvID0gcGFyc2VGbG9hdChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1hc3BlY3RyYXRpbycpKTtcblxuXHRcdFx0XHRcdGlmKCFyYXRpbyAmJiAobWF0Y2ggPSBzcmNzZXQubWF0Y2gocmVnRGVzY3JpcHRvcnMpKSl7XG5cdFx0XHRcdFx0XHRpZihtYXRjaFsyXSA9PSAndycpe1xuXHRcdFx0XHRcdFx0XHRyYXRpbyA9IG1hdGNoWzFdIC8gbWF0Y2hbM107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyYXRpbyA9IG1hdGNoWzNdIC8gbWF0Y2hbMV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByYXRpbztcblx0XHR9LFxuXG5cdFx0Y2FsY3VsYXRlU2l6ZTogZnVuY3Rpb24oZWxlbWVudCwgd2lkdGgpe1xuXHRcdFx0dmFyIGRpc3BsYXlSYXRpbywgaGVpZ2h0LCBpbWFnZVJhdGlvLCByZXRXaWR0aDtcblx0XHRcdHZhciBmaXRPYmogPSB0aGlzLmdldEZpdChlbGVtZW50KTtcblx0XHRcdHZhciBmaXQgPSBmaXRPYmouZml0O1xuXHRcdFx0dmFyIGZpdEVsZW0gPSBmaXRPYmoucGFyZW50O1xuXG5cdFx0XHRpZihmaXQgIT0gJ3dpZHRoJyAmJiAoKGZpdCAhPSAnY29udGFpbicgJiYgZml0ICE9ICdjb3ZlcicpIHx8ICEoaW1hZ2VSYXRpbyA9IHRoaXMuZ2V0SW1hZ2VSYXRpbyhlbGVtZW50KSkpKXtcblx0XHRcdFx0cmV0dXJuIHdpZHRoO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihmaXRFbGVtKXtcblx0XHRcdFx0d2lkdGggPSBmaXRFbGVtLmNsaWVudFdpZHRoO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zml0RWxlbSA9IGVsZW1lbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldFdpZHRoID0gd2lkdGg7XG5cblx0XHRcdGlmKGZpdCA9PSAnd2lkdGgnKXtcblx0XHRcdFx0cmV0V2lkdGggPSB3aWR0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhlaWdodCA9IGZpdEVsZW0uY2xpZW50SGVpZ2h0O1xuXG5cdFx0XHRcdGlmKGhlaWdodCA+IDQwICYmIChkaXNwbGF5UmF0aW8gPSAgd2lkdGggLyBoZWlnaHQpICYmICgoZml0ID09ICdjb3ZlcicgJiYgZGlzcGxheVJhdGlvIDwgaW1hZ2VSYXRpbykgfHwgKGZpdCA9PSAnY29udGFpbicgJiYgZGlzcGxheVJhdGlvID4gaW1hZ2VSYXRpbykpKXtcblx0XHRcdFx0XHRyZXRXaWR0aCA9IHdpZHRoICogKGltYWdlUmF0aW8gLyBkaXNwbGF5UmF0aW8pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXRXaWR0aDtcblx0XHR9XG5cdH07XG5cblx0bGF6eVNpemVzLnBhcmVudEZpdCA9IHBhcmVudEZpdDtcblxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdsYXp5YmVmb3Jlc2l6ZXMnLCBmdW5jdGlvbihlKXtcblx0XHRpZihlLmRlZmF1bHRQcmV2ZW50ZWQgfHwgZS5kZXRhaWwuaW5zdGFuY2UgIT0gbGF6eVNpemVzKXtyZXR1cm47fVxuXG5cdFx0dmFyIGVsZW1lbnQgPSBlLnRhcmdldDtcblx0XHRlLmRldGFpbC53aWR0aCA9IHBhcmVudEZpdC5jYWxjdWxhdGVTaXplKGVsZW1lbnQsIGUuZGV0YWlsLndpZHRoKTtcblx0fSk7XG59KSk7XG4iLCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIFBST0RVQ1QgUEFHRSBKU1xyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmltcG9ydCB7VGFiQWNjb3JkaW9ufSBmcm9tICcuL3RhYi1hY2NvcmRpb24nO1xyXG5cclxubmV3IFRhYkFjY29yZGlvbignLmpzLWN1c3RvbS10YWJzJywgJy5qcy10YWItdHJpZ2dlcicsICcuanMtdGFiLWNvbnRlbnQnLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XHJcbm5ldyBUYWJBY2NvcmRpb24oJy5qcy1wcm9kdWN0LWFjY29yZGlvbicsICcuanMtcHJvZHVjdC1hY2NvcmRpb25fX2xpbmsnLCAnLmpzLXByb2R1Y3QtYWNjb3JkaW9uX19jb250ZW50JywgdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XHJcbm5ldyBUYWJBY2NvcmRpb24oJy5qcy1mYXFzLWFjY29yZGlvbicsICcuanMtZmFxcy1hY2NvcmRpb25fX2xpbmsnLCAnLmpzLWZhcXMtYWNjb3JkaW9uX19jb250ZW50JywgdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XHJcbm5ldyBUYWJBY2NvcmRpb24oJy5qcy1wcm9kdWN0LWZhcScsICcuanMtcHJvZHVjdC1mYXFfX2xpbmsnLCAnLmpzLXByb2R1Y3QtZmFxX19jb250ZW50JywgdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XHJcblxyXG4iLCIvLyBiaW5kIGEgY2xpY2sgZXZlbnQgdG8gdGhlICdza2lwJyBsaW5rXHJcbiQoJy5jLXNraXAtbmF2Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuXHQvLyBzdHJpcCB0aGUgbGVhZGluZyBoYXNoIGFuZCBkZWNsYXJlXHJcblx0Ly8gdGhlIGNvbnRlbnQgd2UncmUgc2tpcHBpbmcgdG9cclxuXHRjb25zdCBza2lwVG8gPSAnIycgKyB0aGlzLmhyZWYuc3BsaXQoJyMnKVsxXTtcclxuXHJcblx0Ly8gU2V0dGluZyAndGFiaW5kZXgnIHRvIC0xIHRha2VzIGFuIGVsZW1lbnQgb3V0IG9mIG5vcm1hbFxyXG5cdC8vIHRhYiBmbG93IGJ1dCBhbGxvd3MgaXQgdG8gYmUgZm9jdXNlZCB2aWEgamF2YXNjcmlwdFxyXG5cdCQoc2tpcFRvKVxyXG5cdFx0LmF0dHIoJ3RhYmluZGV4JywgLTEpXHJcblx0XHQub24oJ2JsdXIgZm9jdXNvdXQnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gd2hlbiBmb2N1cyBsZWF2ZXMgdGhpcyBlbGVtZW50LFxyXG5cdFx0XHQvLyByZW1vdmUgdGhlIHRhYmluZGV4IGF0dHJpYnV0ZVxyXG5cdFx0XHQkKHRoaXMpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XHJcblx0XHR9KVxyXG5cdFx0LmZvY3VzKCk7IC8vIGZvY3VzIG9uIHRoZSBjb250ZW50IGNvbnRhaW5lclxyXG59KTtcclxuIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBDVVNUT01cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLy8gZm9vdGVyIG1lbnVzXHJcbmNvbnN0IGZvb3RUcmlnZ2VyT25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zvb3Rlci1uYXYtMScpO1xyXG5jb25zdCBmb290VHJpZ2dlclR3byA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb290ZXItbmF2LTInKTtcclxuY29uc3QgZm9vdFRyaWdnZXJUaHJlZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb290ZXItbmF2LTMnKTtcclxuY29uc3QgdHJpZ2dlcnMgPSBbZm9vdFRyaWdnZXJPbmUsIGZvb3RUcmlnZ2VyVHdvLCBmb290VHJpZ2dlclRocmVlXTtcclxuXHJcbnRyaWdnZXJzLmZvckVhY2godHJpZ2dlciA9PiB7XHJcblx0dHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG5cdFx0aWYgKHRyaWdnZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1hY3RpdmUnKSkge1xyXG5cdFx0XHR0cmlnZ2VyLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dHJpZ2dlcnMuZm9yRWFjaCh0cmlnZ2VyID0+IHtcclxuXHRcdFx0dHJpZ2dlci5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRyaWdnZXIuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcblx0fSk7XHJcbn0pO1xyXG5cclxuLy8gUHJvZHVjdCBQYWdlIGFjY29yZGlvbiBEcm9wZG93blxyXG5jb25zdCBhY2NvcmRpb25UcmlnZ2VycyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtZGlzY2xvc3VyZS10aXRsZScpXTtcclxuXHJcbmFjY29yZGlvblRyaWdnZXJzLmZvckVhY2godHJpZ2dlciA9PiB7XHJcblx0dHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG5cdFx0aWYgKHRyaWdnZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1hY3RpdmUnKSkge1xyXG5cdFx0XHQkKHRyaWdnZXIpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKS5hcmlhTm90RXhwYW5kZWQoKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGFjY29yZGlvblRyaWdnZXJzLmZvckVhY2godHJpZ2dlciA9PiB7XHJcblx0XHRcdCQodHJpZ2dlcikucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmFyaWFOb3RFeHBhbmRlZCgpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0JCh0cmlnZ2VyKS5hZGRDbGFzcygnaXMtYWN0aXZlJykudG9nZ2xlQXJpYUV4cGFuZGVkKCk7XHJcblx0fSk7XHJcbn0pOyIsIi8qKlxyXG4gKiBDU1MzIEJveCBEZWNvcmF0aW9uIEJyZWFrXHJcbiAqIFBvbHlmaWxsIGZvciBJRSBhbmQgRURHRVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBCb3ggRGVjb3JhdGlvbiBCcmVha1xyXG4gKiBGdW5jdGlvbiB3aWxsIHNwbGl0IGlubmVyIHRleHQgaW50byBzcGFuIHRhZ3MsIHNlcGFyYXRlZCBieSA8YnI+LlxyXG4gKiBVc2VkIGJ5IHRoZSAnYy1xdW90ZScgYmxvY2suXHJcbiAqIEBwYXJhbSBOb2RlIGVsIEhUTUwgZWxlbWVudCB3aXRoIHRleHQgdG8gYmUgcHJvY2Vzc2VkLlxyXG4gKi9cclxuZnVuY3Rpb24gYm94RGVjb3JhdGlvbkJyZWFrKGVsKSB7XHJcblx0Y29uc3QgJGVsID0gJChlbCk7XHJcblx0Y29uc3QgJHBhcmVudCA9ICRlbC5wYXJlbnQoKTtcclxuXHRjb25zdCBzdHJpbmdzID0gJChlbCkuaHRtbCgpLnNwbGl0KCc8YnI+Jyk7XHJcblxyXG5cdCRlbC5yZW1vdmUoKTtcclxuXHJcblx0JC5lYWNoKHN0cmluZ3MsIChpLCBzdHJpbmcpID0+IHtcclxuXHRcdC8vIFJlbW92ZSBicmVha3NcclxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cXG4vLCAnJyk7XHJcblx0XHQkcGFyZW50LmFwcGVuZCgkKCc8c3Bhbj4nKS50ZXh0KHN0cmluZykpO1xyXG5cclxuXHRcdC8vIFJlYWRkIHRoZSA8YnI+IHRhZ3NcclxuXHRcdGlmIChpIDwgc3RyaW5ncy5sZW5ndGggLTEpIHtcclxuXHRcdFx0JHBhcmVudC5hcHBlbmQoJzxicj4nKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIYXMgQm94IERlY29yYXRpb24gQnJlYWtcclxuICovXHJcbmZ1bmN0aW9uIGhhc0JveERlY29yYXRpb25CcmVhaygpIHtcclxuXHQvLyBXZSBoYXZlIHRvIHVzZSB0aGlzLCBiZWNhdXNlIElFIGRvZXNuJ3QgdW5kZXJzdGFuZCAnQ1NTLnN1cHBvcnRzJ1xyXG5cdGlmICh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC9nKSkge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRyZXR1cm4gQ1NTLnN1cHBvcnRzKCcoIGJveC1kZWNvcmF0aW9uLWJyZWFrOiBjbG9uZSApIG9yICggLXdlYmtpdC1ib3gtZGVjb3JhdGlvbi1icmVhazogY2xvbmUgKScpO1xyXG59O1xyXG5cclxuaWYgKCFoYXNCb3hEZWNvcmF0aW9uQnJlYWsoKSkge1xyXG5cdGJveERlY29yYXRpb25CcmVhayhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtYm94LWRlY28nKSk7XHJcbn1cclxuIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBIZXJvIFNsaWRlclxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmNsYXNzIEhlcm9TbGlkZXIge1xyXG5cdGNvbnN0cnVjdG9yKHNsaWRlU2VsZWN0b3IsIHNsaWRlRGVsYXkpIHtcclxuXHRcdHRoaXMuc2xpZGVTZWxlY3RvciA9IHNsaWRlU2VsZWN0b3I7XHJcblx0XHR0aGlzLnNsaWRlRGVsYXkgPSBzbGlkZURlbGF5IHx8IDQwMDA7IC8vIERlZmF1bHRzIHRvIDQwMDBtc1xyXG5cdFx0dGhpcy5zbGlkZXMgPSB0aGlzLmNvbGxlY3RTbGlkZXMoKTtcclxuXHRcdHRoaXMuY3VycmVudFNsaWRlSW5kZXggPSAwO1xyXG5cdFx0dGhpcy5jdXJyZW50U2xpZGVFbGVtZW50O1xyXG5cdFx0dGhpcy5fc2xpZGVMb29wO1xyXG5cdFx0dGhpcy5faXNSdW5uaW5nO1xyXG5cclxuXHRcdC8vIEluaXRcclxuXHRcdHRoaXMubWFpbigpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTWFpblxyXG5cdCAqL1xyXG5cdG1haW4oKSB7XHJcblx0XHQvLyBCYWlsIGlmIDEgb3IgbGVzcyBzbGlkZXMgYXJlIGZvdW5kLlxyXG5cdFx0aWYgKHRoaXMuc2xpZGVzIDw9IDEpIHJldHVybjtcclxuXHJcblx0XHQvLyBTZXQgdGhlIGluaXRpYWwgc2xpZGUuXHJcblx0XHR0aGlzLmN1cnJlbnRTbGlkZUVsZW1lbnQgPSB0aGlzLmFjdGl2YXRlU2xpZGUodGhpcy5jdXJyZW50U2xpZGVJbmRleCk7XHJcblxyXG5cdFx0Ly8gU3RhcnQgbG9vcGluZyBvdmVyIHRoZSBzbGlkZXMuXHJcblx0XHR0aGlzLnN0YXJ0TG9vcCgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU3RhcnQgTG9vcFxyXG5cdCAqL1xyXG5cdHN0YXJ0TG9vcCgpIHtcclxuXHRcdHRoaXMuX2lzUnVubmluZyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5fc2xpZGVMb29wID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG5cdFx0XHR0aGlzLm5leHRTbGlkZSgpO1xyXG5cdFx0fSwgdGhpcy5zbGlkZURlbGF5KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0b3AgTG9vcFxyXG5cdCAqL1xyXG5cdHN0b3BMb29wKCkge1xyXG5cdFx0dGhpcy5faXNSdW5uaW5nID0gZmFsc2U7XHJcblxyXG5cdFx0Y2xlYXJJbnRlcnZhbCh0aGlzLl9zbGlkZUxvb3ApO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVG9nZ2xlIExvb3BcclxuXHQgKi9cclxuXHR0b2dnbGVMb29wKCkge1xyXG5cdFx0dGhpcy5faXNSdW5uaW5nID8gdGhpcy5zdG9wTG9vcCgpIDogdGhpcy5zdGFydExvb3AoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIE5leHQgU2xpZGVcclxuXHQgKi9cclxuXHRuZXh0U2xpZGUoKSB7XHJcblx0XHQvLyBEZWFjdGl2YXRlIGN1cnJlbnQgc2xpZGUuXHJcblx0XHR0aGlzLmRlYWN0aXZhdGVTbGlkZSh0aGlzLmN1cnJlbnRTbGlkZUluZGV4KTtcclxuXHJcblx0XHQvLyBHbyBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNsaWRlIGFycmF5IGlmIG9uIGxhc3QgaXRlbSxcclxuXHRcdC8vIG90aGVyd2lzZSBpbmNyZW1lbnQgdGhlIHNsaWRlIGluZGV4LlxyXG5cdFx0aWYgKCB0aGlzLmN1cnJlbnRTbGlkZUluZGV4ID09PSAodGhpcy5zbGlkZXMubGVuZ3RoIC0gMSkgKSB7XHJcblx0XHRcdHRoaXMuY3VycmVudFNsaWRlSW5kZXggPSAwO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5jdXJyZW50U2xpZGVJbmRleCsrO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY3VycmVudFNsaWRlRWxlbWVudCA9IHRoaXMuYWN0aXZhdGVTbGlkZSh0aGlzLmN1cnJlbnRTbGlkZUluZGV4KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFjdGl2YXRlIFNsaWRlXHJcblx0ICovXHJcblx0YWN0aXZhdGVTbGlkZShzbGlkZU51bWJlcikge1xyXG5cdFx0Y29uc3QgbmV3QWN0aXZlU2xpZGUgPSB0aGlzLnNsaWRlc1tzbGlkZU51bWJlcl1cclxuXHRcdG5ld0FjdGl2ZVNsaWRlLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZS1zbGlkZScpO1xyXG5cclxuXHRcdHJldHVybiBuZXdBY3RpdmVTbGlkZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlYWN0aXZhdGUgU2xpZGVcclxuXHQgKi9cclxuXHRkZWFjdGl2YXRlU2xpZGUoc2xpZGVOdW1iZXIpIHtcclxuXHRcdHRoaXMuc2xpZGVzW3NsaWRlTnVtYmVyXS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUtc2xpZGUnKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbGxlY3QgU2xpZGVzXHJcblx0ICovXHJcblx0Y29sbGVjdFNsaWRlcygpIHtcclxuXHRcdHJldHVybiBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5zbGlkZVNlbGVjdG9yKSk7XHJcblx0fVxyXG59XHJcblxyXG53aW5kb3cuaGVyb1NsaWRlciA9IG5ldyBIZXJvU2xpZGVyKCcuanMtaG9tZXBhZ2Utc2xpZGUnLCA0MDAwKTtcclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIEhvbWUgUGFnZSBIZXJvIENvbnRyb2xzXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmNvbnN0IGhlcm9TbGlkZXJQYXVzZVBsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaGVyby1zbGlkZXItY29udHJvbCcpO1xyXG5cclxuaWYgKGhlcm9TbGlkZXJQYXVzZVBsYXkpIHtcclxuXHRjb25zdCBidXR0b25UZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWhlcm8tc2xpZGVyLWNvbnRyb2xfX3RleHQnKTtcclxuXHJcblx0aGVyb1NsaWRlclBhdXNlUGxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG5cdFx0d2luZG93Lmhlcm9TbGlkZXIudG9nZ2xlTG9vcCgpOyAvLyBDYWxsIHNsaWRlcidzIHRvZ2dsZSBtZXRob2RcclxuXHJcblx0XHRoZXJvU2xpZGVyUGF1c2VQbGF5LmNsYXNzTGlzdC50b2dnbGUoJ2lzLXBsYXlpbmcnKTtcclxuXHJcblx0XHRidXR0b25UZXh0LnRleHRDb250ZW50ID0gYnV0dG9uVGV4dC50ZXh0Q29udGVudCA9PT0gJ1BhdXNlJyA/ICdQbGF5JyA6ICdQYXVzZSc7XHJcblx0fSk7XHJcbn1cclxuIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBCdXR0b24gRWZmZWN0c1xyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnV0dG9uJyldXHJcblx0LmZvckVhY2goYnV0dG9uID0+IGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBob3ZlckVmZmVjdCkpO1xyXG5cclxuZnVuY3Rpb24gaG92ZXJFZmZlY3QoZSkge1xyXG5cdGNvbnN0IHggPSBlLnBhZ2VYIC0gJChlLnRhcmdldCkub2Zmc2V0KCkubGVmdDtcclxuXHRjb25zdCB5ID0gZS5wYWdlWSAtICQoZS50YXJnZXQpLm9mZnNldCgpLnRvcDtcclxuXHJcblx0ZS50YXJnZXQuc3R5bGUuc2V0UHJvcGVydHkoJy0teCcsIGAke3h9cHhgKTtcclxuXHRlLnRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS15JywgYCR7eX1weGApO1xyXG59XHJcbiIsIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gTW9kYWxzXHJcbi8vIEF1dGhvcjogUGF1bCBBbGxlblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuL3V0aWxpdGllcyc7XHJcblxyXG5leHBvcnQgY29uc3QgTW9kYWxzID0gKGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuXHRjb25zdCBkZWZhdWx0cyA9IHtcclxuXHRcdG1vZGFsRGF0YUF0dHI6ICdkYXRhLW1vZGFsJyxcclxuXHRcdGFkZEJvZHlDbGFzczogdHJ1ZVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gQnVpbGRNb2RhbHMob3B0aW9ucykge1xyXG5cdFx0bGV0IHB1YmxpY0FQSXMgPSB7fTtcclxuXHRcdGxldCBzZXR0aW5ncztcclxuXHRcdGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBQcml2YXRlIE1ldGhvZHNcclxuXHRcdCAqL1xyXG5cdFx0ZnVuY3Rpb24gcnVuTW9kYWxzKCkge1xyXG5cdFx0XHRjb25zdCBtb2RhbHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgWyR7c2V0dGluZ3MubW9kYWxEYXRhQXR0cn1dYCldO1xyXG5cclxuXHRcdFx0aWYgKG1vZGFscy5sZW5ndGggPD0gMCkgcmV0dXJuIGZhbHNlOyAvLyBObyBtb2RhbHMgZm91bmRcclxuXHJcblx0XHRcdG1vZGFscy5mb3JFYWNoKG1vZGFsID0+IHtcclxuXHRcdFx0XHRjb25zdCBtb2RhbElkID0gbW9kYWwuZ2V0QXR0cmlidXRlKHNldHRpbmdzLm1vZGFsRGF0YUF0dHIpO1xyXG5cdFx0XHRcdHB1YmxpY0FQSXMubW9kYWxzW21vZGFsSWRdID0gbW9kYWxcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHQvLyBIYW5kbGUgY2xpY2sgZXZlbnRzXHJcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcblx0XHRcdFx0aGFuZGxlQ2xvc2UoZSk7XHJcblx0XHRcdFx0aGFuZGxlT3BlbihlKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XHJcblx0XHRcdFx0aWYgKGUud2hpY2ggPT09IDI3KSB7XHJcblx0XHRcdFx0XHRpZiAoc2V0dGluZ3MuYWRkQm9keUNsYXNzKSBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLWFjdGl2ZScpO1xyXG5cdFx0XHRcdFx0cHVibGljQVBJcy5jbG9zZUFsbE1vZGFscygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBIYW5kbGUgT3BlblxyXG5cdFx0ICovXHJcblx0XHRmdW5jdGlvbiBoYW5kbGVPcGVuKGUpIHtcclxuXHRcdFx0Ly8gRmlyc3QsIGNoZWNrIGZvciBhbiBhbmNob3IgdGFnXHJcblx0XHRcdGNvbnN0IGFuY2hvciA9IGUudGFyZ2V0LmNsb3Nlc3QoJ2EnKTtcclxuXHRcdFx0aWYgKCFhbmNob3IpIHJldHVybjtcclxuXHJcblx0XHRcdC8vIC5ocmVmIGlzIG5lZWRlZCBmb3IgPGE+IHRhZ3MgaW5zaWRlIGFuIFNWRy5cclxuXHRcdFx0Ly8gQ2hlY2sgaWYgd2UgY2FuIGdldCBvbmUgb3IgdGhlIG90aGVyLlxyXG5cdFx0XHRjb25zdCBhbmNob3JIYXNoID0gYW5jaG9yLmhhc2ggfHwgYW5jaG9yLmhyZWYuYmFzZVZhbDtcclxuXHJcblx0XHRcdC8vIEJhaWwgaWYgdGhlIGhhc2ggaXMgbm90IGZvcm1hdHRlZCBjb3JyZWN0bHlcclxuXHRcdFx0aWYoIWlzVGFyZ2V0VXJsKGFuY2hvckhhc2gpKSByZXR1cm47XHJcblxyXG5cdFx0XHQvLyBQcmVwYXJlIHRoZSBoYXNoIHRvIGJlIGNoZWNrZWRcclxuXHRcdFx0Y29uc3QgaGFzaFRhcmdldCA9IChhbmNob3JIYXNoKS5yZXBsYWNlKCcjJywgJycpO1xyXG5cclxuXHRcdFx0aWYoY2hlY2tGb3JNb2RhbElkKGhhc2hUYXJnZXQpKSB7XHJcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdHB1YmxpY0FQSXMub3Blbk1vZGFsKGhhc2hUYXJnZXQpO1xyXG5cdFx0XHRcdGlmIChzZXR0aW5ncy5hZGRCb2R5Q2xhc3MpIGJvZHkuY2xhc3NMaXN0LmFkZCgnbW9kYWwtYWN0aXZlJyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEhhbmRsZSBDbG9zZVxyXG5cdFx0ICovXHJcblx0XHRmdW5jdGlvbiBoYW5kbGVDbG9zZShlKSB7XHJcblx0XHRcdGlmICghcHVibGljQVBJcy5hY3RpdmVNb2RhbCkgcmV0dXJuOyAvLyBSZXR1cm4gaWYgdGhlcmUgaXMgbm90IGFuIGFjdGl2ZSBtb2RhbFxyXG5cclxuXHRcdFx0aWYgKFxyXG5cdFx0XHRcdGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1jbG9zZS1tb2RhbCcpIHx8IC8vIGNsaWNrIG9uIGNsb3NlIHRyaWdnZXJcclxuXHRcdFx0XHQhZS50YXJnZXQuY2xvc2VzdChgWyR7c2V0dGluZ3MubW9kYWxEYXRhQXR0cn1dYCkgLy8gY2xpY2tzIG9mZiBtb2RhbFxyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHRpZiAoc2V0dGluZ3MuYWRkQm9keUNsYXNzKSBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLWFjdGl2ZScpO1xyXG5cdFx0XHRcdHB1YmxpY0FQSXMuY2xvc2VBbGxNb2RhbHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ2hlY2sgaWYgdXJsIGlzIGEgdGFyZ2V0IHVybCB3aXRoIHRoZSAjXHJcblx0XHQgKi9cclxuXHRcdGZ1bmN0aW9uIGlzVGFyZ2V0VXJsKHVybCkge1xyXG5cdFx0XHRjb25zdCB0ZXN0ID0gbmV3IFJlZ0V4cCgvXiMvZ20pO1xyXG5cdFx0XHRyZXR1cm4gdGVzdC50ZXN0KHVybCk7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDaGVjayBpZiBNb2RhbCBpcyBpbiB0aGUgbGlzdCBvZiByZWdpc3RlcmVkIE1vZGFsc1xyXG5cdFx0ICovXHJcblx0XHRmdW5jdGlvbiBjaGVja0Zvck1vZGFsSWQoaWQpIHtcclxuXHRcdFx0cmV0dXJuIHB1YmxpY0FQSXMubW9kYWxzLmhhc093blByb3BlcnR5KGlkKTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFB1YmxpYyBBUElzXHJcblx0XHQgKi9cclxuXHRcdHB1YmxpY0FQSXMubW9kYWxzID0ge307XHJcblxyXG5cdFx0cHVibGljQVBJcy5hY3RpdmVNb2RhbCA9IG51bGw7XHJcblxyXG5cdFx0cHVibGljQVBJcy5vcGVuTW9kYWwgPSBmdW5jdGlvbihtb2RhbElkKSB7XHJcblx0XHRcdHB1YmxpY0FQSXMubW9kYWxzW21vZGFsSWRdLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xyXG5cdFx0XHRwdWJsaWNBUElzLm1vZGFsc1ttb2RhbElkXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcblxyXG5cdFx0XHRwdWJsaWNBUElzLmFjdGl2ZU1vZGFsID0gcHVibGljQVBJcy5tb2RhbHNbbW9kYWxJZF07XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljQVBJcy5jbG9zZUFsbE1vZGFscyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRmb3IgKGxldCBtb2RhbCBpbiBwdWJsaWNBUElzLm1vZGFscykge1xyXG5cdFx0XHRcdHB1YmxpY0FQSXMubW9kYWxzW21vZGFsXS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcclxuXHRcdFx0XHRwdWJsaWNBUElzLm1vZGFsc1ttb2RhbF0uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwdWJsaWNBUElzLmFjdGl2ZU1vZGFsID0gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWNBUElzLmluaXQgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcblx0XHRcdHNldHRpbmdzID0gZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zIHx8IHt9KTtcclxuXHRcdFx0cnVuTW9kYWxzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljQVBJcy5pbml0KG9wdGlvbnMpO1xyXG5cclxuXHRcdHJldHVybiBwdWJsaWNBUElzO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIEJ1aWxkTW9kYWxzO1xyXG5cclxufSkod2luZG93LCBkb2N1bWVudCk7XHJcblxyXG53aW5kb3cuYmFzZU1vZGFscyA9IG5ldyBNb2RhbHMoKTtcclxuIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBJTkRFWFxyXG4vL1xyXG4vLyBFbnRyeSBwb2ludCBmaWxlIGZvciB3ZWJwYWNrLlxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4vLyBTQ1NTXHJcbmltcG9ydCAnLi4vc2Nzcy9hcHAuc2Nzcyc7XHJcblxyXG4vLyBMYXp5c2l6ZXNcclxucmVxdWlyZSgnbGF6eXNpemVzL2xhenlzaXplcycpOyAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hRmFya2FzL2xhenlzaXplc1xyXG5yZXF1aXJlKCdsYXp5c2l6ZXMvcGx1Z2lucy9wYXJlbnQtZml0L2xzLnBhcmVudC1maXQnKTsgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYUZhcmthcy9sYXp5c2l6ZXMjcGFyZW50LWZpdC1leHRlbnNpb25cclxucmVxdWlyZSgnbGF6eXNpemVzL3BsdWdpbnMvYmdzZXQvbHMuYmdzZXQnKTsgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYUZhcmthcy9sYXp5c2l6ZXMjYmdzZXQtcGx1Z2luLS0tbGF6eS1yZXNwb25zaXZlLWJhY2tncm91bmQtaW1hZ2VcclxucmVxdWlyZSgnbGF6eXNpemVzL3BsdWdpbnMvdW52ZWlsaG9va3MvbHMudW52ZWlsaG9va3MnKTsgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYUZhcmthcy9sYXp5c2l6ZXMvdHJlZS9naC1wYWdlcy9wbHVnaW5zL3VudmVpbGhvb2tzXHJcbnJlcXVpcmUoJ2xhenlzaXplcy9wbHVnaW5zL3Jlc3BpbWcvbHMucmVzcGltZycpOyAvLyBJRSAxMS4gT25seSB1bmNvbW1lbnQgYW5kIHVzZSBmb3Igc3VwcG9ydCBpbiBJRS5cclxuXHJcbi8vIGpRdWVyeSBFeHRlbmRcclxuaW1wb3J0ICcuL2V4dGVuZCc7XHJcblxyXG4vLyBNb2RhbHNcclxuaW1wb3J0ICcuL21vZGFsJztcclxuXHJcbi8vIEJ1dHRvbnNcclxuaW1wb3J0ICcuL2J1dHRvbic7XHJcblxyXG4vLyBIb21lcGFnZSBIZXJvIFNsaWRlclxyXG5pbXBvcnQgJy4vaGVyby1zbGlkZXInO1xyXG5cclxuLy8gRGV0ZWN0IEVkZ2UgVXRpbFxyXG5pbXBvcnQgJy4vZGV0ZWN0LWVkZ2UnO1xyXG5cclxuLy8gUG9seWZpbGxzXHJcbmltcG9ydCAnLi9wb2x5ZmlsbC9ib3gtZGVjb3JhdGlvbi1icmVhayc7XHJcblxyXG5pbXBvcnQgJy4vY3VzdG9tJztcclxuXHJcbi8vIE5hdmlnYXRpb25cclxuaW1wb3J0ICcuL25hdmlnYXRpb24nO1xyXG5pbXBvcnQgJy4vc2tpcC1uYXYnO1xyXG5cclxuLy8gVGFiIGFjY29yZGlvblxyXG5pbXBvcnQgJy4vaW5pdC1hY2NvcmRpb24nOyJdLCJzb3VyY2VSb290IjoiIn0=